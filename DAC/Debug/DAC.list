
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007e6c  08007e6c  00017e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ecc  08007ecc  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08007ecc  08007ecc  00017ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ed4  08007ed4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  24000000  08007edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  24000018  08007ef4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400052c  08007ef4  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc0d  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030c2  00000000  00000000  0003dc53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  00040d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  00041e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035eff  00000000  00000000  00042de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd02  00000000  00000000  00078cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001563bb  00000000  00000000  000889e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ded9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ec  00000000  00000000  001dee18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007e54 	.word	0x08007e54

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	08007e54 	.word	0x08007e54

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f969 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e2:	f002 f8ab 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80005e6:	4601      	mov	r1, r0
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_Init+0x60>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_Init+0x64>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	f003 031f 	and.w	r3, r3, #31
 80005fa:	fa21 f303 	lsr.w	r3, r1, r3
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <HAL_Init+0x68>)
 8000600:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_Init+0x60>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <HAL_Init+0x64>)
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	fa22 f303 	lsr.w	r3, r2, r3
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_Init+0x6c>)
 800061c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f812 	bl	8000648 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e002      	b.n	8000634 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f007 f9df 	bl	80079f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58024400 	.word	0x58024400
 800063c:	08007ebc 	.word	0x08007ebc
 8000640:	24000010 	.word	0x24000010
 8000644:	24000014 	.word	0x24000014

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_InitTick+0x60>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	e021      	b.n	80006a0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <HAL_InitTick+0x64>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f943 	bl	80008fe <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f91b 	bl	80008ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x68>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000004 	.word	0x24000004
 80006ac:	24000010 	.word	0x24000010
 80006b0:	24000000 	.word	0x24000000

080006b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x20>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x24>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_IncTick+0x24>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	24000004 	.word	0x24000004
 80006d8:	24000034 	.word	0x24000034

080006dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GetTick+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	24000034 	.word	0x24000034

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff ffee 	bl	80006dc <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_Delay+0x40>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffde 	bl	80006dc <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	24000004 	.word	0x24000004

08000738 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_GetREVID+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	0c1b      	lsrs	r3, r3, #16
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	5c001000 	.word	0x5c001000

08000750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <__NVIC_SetPriorityGrouping+0x40>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	4313      	orrs	r3, r2
 800077c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <__NVIC_SetPriorityGrouping+0x40>)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	60d3      	str	r3, [r2, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	05fa0000 	.word	0x05fa0000

08000798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <__NVIC_GetPriorityGrouping+0x18>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	f003 0307 	and.w	r3, r3, #7
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db0a      	blt.n	80007de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	490c      	ldr	r1, [pc, #48]	; (8000800 <__NVIC_SetPriority+0x4c>)
 80007ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d2:	0112      	lsls	r2, r2, #4
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007dc:	e00a      	b.n	80007f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4908      	ldr	r1, [pc, #32]	; (8000804 <__NVIC_SetPriority+0x50>)
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	f003 030f 	and.w	r3, r3, #15
 80007ea:	3b04      	subs	r3, #4
 80007ec:	0112      	lsls	r2, r2, #4
 80007ee:	b2d2      	uxtb	r2, r2
 80007f0:	440b      	add	r3, r1
 80007f2:	761a      	strb	r2, [r3, #24]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	f1c3 0307 	rsb	r3, r3, #7
 8000822:	2b04      	cmp	r3, #4
 8000824:	bf28      	it	cs
 8000826:	2304      	movcs	r3, #4
 8000828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3304      	adds	r3, #4
 800082e:	2b06      	cmp	r3, #6
 8000830:	d902      	bls.n	8000838 <NVIC_EncodePriority+0x30>
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3b03      	subs	r3, #3
 8000836:	e000      	b.n	800083a <NVIC_EncodePriority+0x32>
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	f04f 32ff 	mov.w	r2, #4294967295
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43da      	mvns	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	401a      	ands	r2, r3
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000850:	f04f 31ff 	mov.w	r1, #4294967295
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	43d9      	mvns	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	4313      	orrs	r3, r2
         );
}
 8000862:	4618      	mov	r0, r3
 8000864:	3724      	adds	r7, #36	; 0x24
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000880:	d301      	bcc.n	8000886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000882:	2301      	movs	r3, #1
 8000884:	e00f      	b.n	80008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <SysTick_Config+0x40>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088e:	210f      	movs	r1, #15
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f7ff ff8e 	bl	80007b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <SysTick_Config+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <SysTick_Config+0x40>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff47 	bl	8000750 <__NVIC_SetPriorityGrouping>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008d8:	f7ff ff5e 	bl	8000798 <__NVIC_GetPriorityGrouping>
 80008dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	6978      	ldr	r0, [r7, #20]
 80008e4:	f7ff ff90 	bl	8000808 <NVIC_EncodePriority>
 80008e8:	4602      	mov	r2, r0
 80008ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff5f 	bl	80007b4 <__NVIC_SetPriority>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ffb2 	bl	8000870 <SysTick_Config>
 800090c:	4603      	mov	r3, r0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e014      	b.n	8000952 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	791b      	ldrb	r3, [r3, #4]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d105      	bne.n	800093e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f007 f873 	bl	8007a24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2202      	movs	r2, #2
 8000942:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	795b      	ldrb	r3, [r3, #5]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d101      	bne.n	8000970 <HAL_DAC_Start+0x16>
 800096c:	2302      	movs	r3, #2
 800096e:	e03b      	b.n	80009e8 <HAL_DAC_Start+0x8e>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2201      	movs	r2, #1
 8000974:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2202      	movs	r2, #2
 800097a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6819      	ldr	r1, [r3, #0]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	2201      	movs	r2, #1
 800098a:	409a      	lsls	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	430a      	orrs	r2, r1
 8000992:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10f      	bne.n	80009ba <HAL_DAC_Start+0x60>
  {
    
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d118      	bne.n	80009da <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 0201 	orr.w	r2, r2, #1
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	e00f      	b.n	80009da <HAL_DAC_Start+0x80>
    }
  }
  else
  {  
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 80009c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80009c8:	d107      	bne.n	80009da <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f042 0202 	orr.w	r2, r2, #2
 80009d8:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2201      	movs	r2, #1
 80009de:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d105      	bne.n	8000a1e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	3308      	adds	r3, #8
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e004      	b.n	8000a28 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	3314      	adds	r3, #20
 8000a26:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	371c      	adds	r7, #28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Returns the DAC channel data output register value */
  if(Channel == DAC_CHANNEL_1)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d103      	bne.n	8000a56 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a54:	e002      	b.n	8000a5c <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1, tmpreg2;
  uint32_t tickstart = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)); 
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	795b      	ldrb	r3, [r3, #5]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d101      	bne.n	8000a84 <HAL_DAC_ConfigChannel+0x1c>
 8000a80:	2302      	movs	r3, #2
 8000a82:	e107      	b.n	8000c94 <HAL_DAC_ConfigChannel+0x22c>
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2201      	movs	r2, #1
 8000a88:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	711a      	strb	r2, [r3, #4]
  
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d174      	bne.n	8000b82 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */ 
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d137      	bne.n	8000b0e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8000a9e:	f7ff fe1d 	bl	80006dc <HAL_GetTick>
 8000aa2:	61f8      	str	r0, [r7, #28]
      
      
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000aa4:	e011      	b.n	8000aca <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000aa6:	f7ff fe19 	bl	80006dc <HAL_GetTick>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d90a      	bls.n	8000aca <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	f043 0208 	orr.w	r2, r3, #8
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e0e4      	b.n	8000c94 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad0:	4b72      	ldr	r3, [pc, #456]	; (8000c9c <HAL_DAC_ConfigChannel+0x234>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1e6      	bne.n	8000aa6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff fe0b 	bl	80006f4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	6992      	ldr	r2, [r2, #24]
 8000ae6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ae8:	e01e      	b.n	8000b28 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2)!= 0UL)
      {
        /* Check for the Timeout */
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000aea:	f7ff fdf7 	bl	80006dc <HAL_GetTick>
 8000aee:	4602      	mov	r2, r0
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d90a      	bls.n	8000b0e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	f043 0208 	orr.w	r2, r3, #8
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2203      	movs	r2, #3
 8000b08:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	e0c2      	b.n	8000c94 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2)!= 0UL)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	dbe8      	blt.n	8000aea <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff fdeb 	bl	80006f4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	6992      	ldr	r2, [r2, #24]
 8000b26:	645a      	str	r2, [r3, #68]	; 0x44
    }
    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	ea02 0103 	and.w	r1, r2, r3
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	69da      	ldr	r2, [r3, #28]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	430a      	orrs	r2, r1
 8000b54:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	21ff      	movs	r1, #255	; 0xff
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	ea02 0103 	and.w	r1, r2, r3
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	6a1a      	ldr	r2, [r3, #32]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	409a      	lsls	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	64da      	str	r2, [r3, #76]	; 0x4c
  }
    
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d11d      	bne.n	8000bc6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b90:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	221f      	movs	r2, #31
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */
  
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bcc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4013      	ands	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	431a      	orrs	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6819      	ldr	r1, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	400a      	ands	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	601a      	str	r2, [r3, #0]
      
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6819      	ldr	r1, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	22c0      	movs	r2, #192	; 0xc0
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43da      	mvns	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	400a      	ands	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20008000 	.word	0x20008000

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cae:	4b89      	ldr	r3, [pc, #548]	; (8000ed4 <HAL_GPIO_Init+0x234>)
 8000cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cb2:	e194      	b.n	8000fde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8186 	beq.w	8000fd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0x3c>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b12      	cmp	r3, #18
 8000cda:	d123      	bne.n	8000d24 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	69b9      	ldr	r1, [r7, #24]
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0203 	and.w	r2, r3, #3
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d00b      	beq.n	8000d78 <HAL_GPIO_Init+0xd8>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d007      	beq.n	8000d78 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6c:	2b11      	cmp	r3, #17
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b12      	cmp	r3, #18
 8000d76:	d130      	bne.n	8000dda <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	f003 0201 	and.w	r2, r3, #1
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 80e0 	beq.w	8000fd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e18:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <HAL_GPIO_Init+0x238>)
 8000e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e1e:	4a2e      	ldr	r2, [pc, #184]	; (8000ed8 <HAL_GPIO_Init+0x238>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e28:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <HAL_GPIO_Init+0x238>)
 8000e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e36:	4a29      	ldr	r2, [pc, #164]	; (8000edc <HAL_GPIO_Init+0x23c>)
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <HAL_GPIO_Init+0x240>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d052      	beq.n	8000f08 <HAL_GPIO_Init+0x268>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <HAL_GPIO_Init+0x244>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d031      	beq.n	8000ece <HAL_GPIO_Init+0x22e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <HAL_GPIO_Init+0x248>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d02b      	beq.n	8000eca <HAL_GPIO_Init+0x22a>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_GPIO_Init+0x24c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d025      	beq.n	8000ec6 <HAL_GPIO_Init+0x226>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <HAL_GPIO_Init+0x250>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d01f      	beq.n	8000ec2 <HAL_GPIO_Init+0x222>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <HAL_GPIO_Init+0x254>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d019      	beq.n	8000ebe <HAL_GPIO_Init+0x21e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <HAL_GPIO_Init+0x258>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_GPIO_Init+0x21a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_GPIO_Init+0x25c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d00d      	beq.n	8000eb6 <HAL_GPIO_Init+0x216>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_GPIO_Init+0x260>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_GPIO_Init+0x264>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_GPIO_Init+0x20e>
 8000eaa:	2309      	movs	r3, #9
 8000eac:	e02d      	b.n	8000f0a <HAL_GPIO_Init+0x26a>
 8000eae:	230a      	movs	r3, #10
 8000eb0:	e02b      	b.n	8000f0a <HAL_GPIO_Init+0x26a>
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	e029      	b.n	8000f0a <HAL_GPIO_Init+0x26a>
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	e027      	b.n	8000f0a <HAL_GPIO_Init+0x26a>
 8000eba:	2306      	movs	r3, #6
 8000ebc:	e025      	b.n	8000f0a <HAL_GPIO_Init+0x26a>
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	e023      	b.n	8000f0a <HAL_GPIO_Init+0x26a>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e021      	b.n	8000f0a <HAL_GPIO_Init+0x26a>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e01f      	b.n	8000f0a <HAL_GPIO_Init+0x26a>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e01d      	b.n	8000f0a <HAL_GPIO_Init+0x26a>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e01b      	b.n	8000f0a <HAL_GPIO_Init+0x26a>
 8000ed2:	bf00      	nop
 8000ed4:	58000080 	.word	0x58000080
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58000400 	.word	0x58000400
 8000ee0:	58020000 	.word	0x58020000
 8000ee4:	58020400 	.word	0x58020400
 8000ee8:	58020800 	.word	0x58020800
 8000eec:	58020c00 	.word	0x58020c00
 8000ef0:	58021000 	.word	0x58021000
 8000ef4:	58021400 	.word	0x58021400
 8000ef8:	58021800 	.word	0x58021800
 8000efc:	58021c00 	.word	0x58021c00
 8000f00:	58022000 	.word	0x58022000
 8000f04:	58022400 	.word	0x58022400
 8000f08:	2300      	movs	r3, #0
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	f002 0203 	and.w	r2, r2, #3
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	4093      	lsls	r3, r2
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f1a:	4938      	ldr	r1, [pc, #224]	; (8000ffc <HAL_GPIO_Init+0x35c>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f47f ae63 	bne.w	8000cb4 <HAL_GPIO_Init+0x14>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	58000400 	.word	0x58000400

08001000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800101c:	e003      	b.n	8001026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	041a      	lsls	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	619a      	str	r2, [r3, #24]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e07f      	b.n	8001146 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f006 fd28 	bl	8007ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2224      	movs	r2, #36	; 0x24
 8001064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0201 	bic.w	r2, r2, #1
 8001076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001084:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001094:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d107      	bne.n	80010ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	e006      	b.n	80010bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d104      	bne.n	80010ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6859      	ldr	r1, [r3, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_I2C_Init+0x11c>)
 80010da:	430b      	orrs	r3, r1
 80010dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	ea42 0103 	orr.w	r1, r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	021a      	lsls	r2, r3, #8
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69d9      	ldr	r1, [r3, #28]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1a      	ldr	r2, [r3, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2220      	movs	r2, #32
 8001132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	02008000 	.word	0x02008000

08001154 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af02      	add	r7, sp, #8
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	461a      	mov	r2, r3
 8001160:	460b      	mov	r3, r1
 8001162:	817b      	strh	r3, [r7, #10]
 8001164:	4613      	mov	r3, r2
 8001166:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b20      	cmp	r3, #32
 8001172:	f040 80da 	bne.w	800132a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <HAL_I2C_Master_Transmit+0x30>
 8001180:	2302      	movs	r3, #2
 8001182:	e0d3      	b.n	800132c <HAL_I2C_Master_Transmit+0x1d8>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800118c:	f7ff faa6 	bl	80006dc <HAL_GetTick>
 8001190:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2319      	movs	r3, #25
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 f9f8 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0be      	b.n	800132c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2221      	movs	r2, #33	; 0x21
 80011b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2210      	movs	r2, #16
 80011ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	893a      	ldrh	r2, [r7, #8]
 80011ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011da:	b29b      	uxth	r3, r3
 80011dc:	2bff      	cmp	r3, #255	; 0xff
 80011de:	d90e      	bls.n	80011fe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	22ff      	movs	r2, #255	; 0xff
 80011e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	8979      	ldrh	r1, [r7, #10]
 80011ee:	4b51      	ldr	r3, [pc, #324]	; (8001334 <HAL_I2C_Master_Transmit+0x1e0>)
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 faee 	bl	80017d8 <I2C_TransferConfig>
 80011fc:	e06c      	b.n	80012d8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001202:	b29a      	uxth	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800120c:	b2da      	uxtb	r2, r3
 800120e:	8979      	ldrh	r1, [r7, #10]
 8001210:	4b48      	ldr	r3, [pc, #288]	; (8001334 <HAL_I2C_Master_Transmit+0x1e0>)
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 fadd 	bl	80017d8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800121e:	e05b      	b.n	80012d8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	6a39      	ldr	r1, [r7, #32]
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f000 f9f5 	bl	8001614 <I2C_WaitOnTXISFlagUntilTimeout>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e07b      	b.n	800132c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124e:	b29b      	uxth	r3, r3
 8001250:	3b01      	subs	r3, #1
 8001252:	b29a      	uxth	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125c:	3b01      	subs	r3, #1
 800125e:	b29a      	uxth	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001268:	b29b      	uxth	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d034      	beq.n	80012d8 <HAL_I2C_Master_Transmit+0x184>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001272:	2b00      	cmp	r3, #0
 8001274:	d130      	bne.n	80012d8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	2200      	movs	r2, #0
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f000 f987 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e04d      	b.n	800132c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001294:	b29b      	uxth	r3, r3
 8001296:	2bff      	cmp	r3, #255	; 0xff
 8001298:	d90e      	bls.n	80012b8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	22ff      	movs	r2, #255	; 0xff
 800129e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	8979      	ldrh	r1, [r7, #10]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f000 fa91 	bl	80017d8 <I2C_TransferConfig>
 80012b6:	e00f      	b.n	80012d8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012bc:	b29a      	uxth	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	8979      	ldrh	r1, [r7, #10]
 80012ca:	2300      	movs	r3, #0
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 fa80 	bl	80017d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012dc:	b29b      	uxth	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d19e      	bne.n	8001220 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	6a39      	ldr	r1, [r7, #32]
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f000 f9d4 	bl	8001694 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e01a      	b.n	800132c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2220      	movs	r2, #32
 80012fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6859      	ldr	r1, [r3, #4]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_I2C_Master_Transmit+0x1e4>)
 800130a:	400b      	ands	r3, r1
 800130c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2220      	movs	r2, #32
 8001312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800132a:	2302      	movs	r3, #2
  }
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	80002000 	.word	0x80002000
 8001338:	fe00e800 	.word	0xfe00e800

0800133c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	460b      	mov	r3, r1
 800134a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b20      	cmp	r3, #32
 800135a:	f040 80ef 	bne.w	800153c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800136c:	d101      	bne.n	8001372 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800136e:	2302      	movs	r3, #2
 8001370:	e0e5      	b.n	800153e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_I2C_IsDeviceReady+0x44>
 800137c:	2302      	movs	r3, #2
 800137e:	e0de      	b.n	800153e <HAL_I2C_IsDeviceReady+0x202>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2224      	movs	r2, #36	; 0x24
 800138c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d105      	bne.n	80013aa <HAL_I2C_IsDeviceReady+0x6e>
 800139e:	897b      	ldrh	r3, [r7, #10]
 80013a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013a4:	4b68      	ldr	r3, [pc, #416]	; (8001548 <HAL_I2C_IsDeviceReady+0x20c>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	e004      	b.n	80013b4 <HAL_I2C_IsDeviceReady+0x78>
 80013aa:	897b      	ldrh	r3, [r7, #10]
 80013ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013b0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff f98f 	bl	80006dc <HAL_GetTick>
 80013be:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 0320 	and.w	r3, r3, #32
 80013ca:	2b20      	cmp	r3, #32
 80013cc:	bf0c      	ite	eq
 80013ce:	2301      	moveq	r3, #1
 80013d0:	2300      	movne	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	2b10      	cmp	r3, #16
 80013e2:	bf0c      	ite	eq
 80013e4:	2301      	moveq	r3, #1
 80013e6:	2300      	movne	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80013ec:	e034      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d01a      	beq.n	800142c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013f6:	f7ff f971 	bl	80006dc <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d302      	bcc.n	800140c <HAL_I2C_IsDeviceReady+0xd0>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10f      	bne.n	800142c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2220      	movs	r2, #32
 8001410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001418:	f043 0220 	orr.w	r2, r3, #32
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e088      	b.n	800153e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0320 	and.w	r3, r3, #32
 8001436:	2b20      	cmp	r3, #32
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b10      	cmp	r3, #16
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001458:	7ffb      	ldrb	r3, [r7, #31]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <HAL_I2C_IsDeviceReady+0x128>
 800145e:	7fbb      	ldrb	r3, [r7, #30]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0c4      	beq.n	80013ee <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b10      	cmp	r3, #16
 8001470:	d01a      	beq.n	80014a8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2200      	movs	r2, #0
 800147a:	2120      	movs	r1, #32
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f889 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e058      	b.n	800153e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2220      	movs	r2, #32
 8001492:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2220      	movs	r2, #32
 8001498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e04a      	b.n	800153e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	2120      	movs	r1, #32
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 f86e 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e03d      	b.n	800153e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2210      	movs	r2, #16
 80014c8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2220      	movs	r2, #32
 80014d0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d118      	bne.n	800150c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014e8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2200      	movs	r2, #0
 80014f2:	2120      	movs	r1, #32
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 f84d 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e01c      	b.n	800153e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2220      	movs	r2, #32
 800150a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	f63f af3d 	bhi.w	8001396 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2220      	movs	r2, #32
 8001520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f043 0220 	orr.w	r2, r3, #32
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800153c:	2302      	movs	r3, #2
  }
}
 800153e:	4618      	mov	r0, r3
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	02002000 	.word	0x02002000

0800154c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b02      	cmp	r3, #2
 8001560:	d103      	bne.n	800156a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b01      	cmp	r3, #1
 8001576:	d007      	beq.n	8001588 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	619a      	str	r2, [r3, #24]
  }
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015a4:	e022      	b.n	80015ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d01e      	beq.n	80015ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ae:	f7ff f895 	bl	80006dc <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d302      	bcc.n	80015c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d113      	bne.n	80015ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f043 0220 	orr.w	r2, r3, #32
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2220      	movs	r2, #32
 80015d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e00f      	b.n	800160c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699a      	ldr	r2, [r3, #24]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	4013      	ands	r3, r2
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	429a      	cmp	r2, r3
 8001608:	d0cd      	beq.n	80015a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001620:	e02c      	b.n	800167c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f870 	bl	800170c <I2C_IsAcknowledgeFailed>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e02a      	b.n	800168c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d01e      	beq.n	800167c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800163e:	f7ff f84d 	bl	80006dc <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	d302      	bcc.n	8001654 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d113      	bne.n	800167c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	f043 0220 	orr.w	r2, r3, #32
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2220      	movs	r2, #32
 8001664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e007      	b.n	800168c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b02      	cmp	r3, #2
 8001688:	d1cb      	bne.n	8001622 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016a0:	e028      	b.n	80016f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f830 	bl	800170c <I2C_IsAcknowledgeFailed>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e026      	b.n	8001704 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016b6:	f7ff f811 	bl	80006dc <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d302      	bcc.n	80016cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d113      	bne.n	80016f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	f043 0220 	orr.w	r2, r3, #32
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2220      	movs	r2, #32
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e007      	b.n	8001704 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d1cf      	bne.n	80016a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b10      	cmp	r3, #16
 8001724:	d151      	bne.n	80017ca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001726:	e022      	b.n	800176e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172e:	d01e      	beq.n	800176e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001730:	f7fe ffd4 	bl	80006dc <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	429a      	cmp	r2, r3
 800173e:	d302      	bcc.n	8001746 <I2C_IsAcknowledgeFailed+0x3a>
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d113      	bne.n	800176e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f043 0220 	orr.w	r2, r3, #32
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2220      	movs	r2, #32
 8001756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e02e      	b.n	80017cc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b20      	cmp	r3, #32
 800177a:	d1d5      	bne.n	8001728 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2210      	movs	r2, #16
 8001782:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2220      	movs	r2, #32
 800178a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff fedd 	bl	800154c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <I2C_IsAcknowledgeFailed+0xc8>)
 800179e:	400b      	ands	r3, r1
 80017a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f043 0204 	orr.w	r2, r3, #4
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2220      	movs	r2, #32
 80017b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	fe00e800 	.word	0xfe00e800

080017d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	817b      	strh	r3, [r7, #10]
 80017e6:	4613      	mov	r3, r2
 80017e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	0d5b      	lsrs	r3, r3, #21
 80017f4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <I2C_TransferConfig+0x58>)
 80017fa:	430b      	orrs	r3, r1
 80017fc:	43db      	mvns	r3, r3
 80017fe:	ea02 0103 	and.w	r1, r2, r3
 8001802:	897b      	ldrh	r3, [r7, #10]
 8001804:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001808:	7a7b      	ldrb	r3, [r7, #9]
 800180a:	041b      	lsls	r3, r3, #16
 800180c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	431a      	orrs	r2, r3
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	431a      	orrs	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	03ff63ff 	.word	0x03ff63ff

08001834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b20      	cmp	r3, #32
 8001848:	d138      	bne.n	80018bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001854:	2302      	movs	r3, #2
 8001856:	e032      	b.n	80018be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2224      	movs	r2, #36	; 0x24
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0201 	bic.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001886:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6819      	ldr	r1, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2220      	movs	r2, #32
 80018ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e000      	b.n	80018be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018bc:	2302      	movs	r3, #2
  }
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b20      	cmp	r3, #32
 80018de:	d139      	bne.n	8001954 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e033      	b.n	8001956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2224      	movs	r2, #36	; 0x24
 80018fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0201 	bic.w	r2, r2, #1
 800190c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800191c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2220      	movs	r2, #32
 8001944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	e000      	b.n	8001956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001954:	2302      	movs	r3, #2
  }
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001964:	b08f      	sub	sp, #60	; 0x3c
 8001966:	af0a      	add	r7, sp, #40	; 0x28
 8001968:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e116      	b.n	8001ba2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f006 f922 	bl	8007bd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 f854 	bl	8006a60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	687e      	ldr	r6, [r7, #4]
 80019c0:	466d      	mov	r5, sp
 80019c2:	f106 0410 	add.w	r4, r6, #16
 80019c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80019d6:	1d33      	adds	r3, r6, #4
 80019d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019da:	6838      	ldr	r0, [r7, #0]
 80019dc:	f004 ffde 	bl	800699c <USB_CoreInit>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2202      	movs	r2, #2
 80019ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0d7      	b.n	8001ba2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f005 f842 	bl	8006a82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	e04a      	b.n	8001a9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	333d      	adds	r3, #61	; 0x3d
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	333c      	adds	r3, #60	; 0x3c
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	b298      	uxth	r0, r3
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3342      	adds	r3, #66	; 0x42
 8001a40:	4602      	mov	r2, r0
 8001a42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	333f      	adds	r3, #63	; 0x3f
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	3344      	adds	r3, #68	; 0x44
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	3348      	adds	r3, #72	; 0x48
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3350      	adds	r3, #80	; 0x50
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	3301      	adds	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d3af      	bcc.n	8001a04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e044      	b.n	8001b34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	3301      	adds	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d3b5      	bcc.n	8001aaa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	687e      	ldr	r6, [r7, #4]
 8001b46:	466d      	mov	r5, sp
 8001b48:	f106 0410 	add.w	r4, r6, #16
 8001b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b5c:	1d33      	adds	r3, r6, #4
 8001b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b60:	6838      	ldr	r0, [r7, #0]
 8001b62:	f004 ffb9 	bl	8006ad8 <USB_DevInit>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e014      	b.n	8001ba2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d102      	bne.n	8001b96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f80b 	bl	8001bac <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f005 f969 	bl	8006e72 <USB_DevDisconnect>

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001bac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_PCDEx_ActivateLPM+0x44>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	10000003 	.word	0x10000003

08001bf4 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_PWREx_ConfigSupply+0x6c>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d008      	beq.n	8001c1a <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_PWREx_ConfigSupply+0x6c>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e01d      	b.n	8001c56 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_PWREx_ConfigSupply+0x6c>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f023 0207 	bic.w	r2, r3, #7
 8001c22:	490f      	ldr	r1, [pc, #60]	; (8001c60 <HAL_PWREx_ConfigSupply+0x6c>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c2a:	f7fe fd57 	bl	80006dc <HAL_GetTick>
 8001c2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001c30:	e009      	b.n	8001c46 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8001c32:	f7fe fd53 	bl	80006dc <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c40:	d901      	bls.n	8001c46 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e007      	b.n	8001c56 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_PWREx_ConfigSupply+0x6c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c52:	d1ee      	bne.n	8001c32 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	58024800 	.word	0x58024800

08001c64 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	58024800 	.word	0x58024800

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e3a4      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8087 	beq.w	8001db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca4:	4b9a      	ldr	r3, [pc, #616]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cae:	4b98      	ldr	r3, [pc, #608]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d007      	beq.n	8001cca <HAL_RCC_OscConfig+0x46>
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	2b18      	cmp	r3, #24
 8001cbe:	d110      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cca:	4b91      	ldr	r3, [pc, #580]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d06c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x12c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d168      	bne.n	8001db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e37e      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x76>
 8001cec:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a87      	ldr	r2, [pc, #540]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e02e      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b83      	ldr	r3, [pc, #524]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a82      	ldr	r2, [pc, #520]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b80      	ldr	r3, [pc, #512]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7f      	ldr	r2, [pc, #508]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e01d      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0xbc>
 8001d26:	4b7a      	ldr	r3, [pc, #488]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a79      	ldr	r2, [pc, #484]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b77      	ldr	r3, [pc, #476]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a76      	ldr	r2, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e00b      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d40:	4b73      	ldr	r3, [pc, #460]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a72      	ldr	r2, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b70      	ldr	r3, [pc, #448]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a6f      	ldr	r2, [pc, #444]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7fe fcbc 	bl	80006dc <HAL_GetTick>
 8001d64:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d68:	f7fe fcb8 	bl	80006dc <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e332      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0xe4>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7fe fca8 	bl	80006dc <HAL_GetTick>
 8001d8c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d90:	f7fe fca4 	bl	80006dc <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e31e      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001da2:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x10c>
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80b0 	beq.w	8001f20 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc0:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dc8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dca:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <HAL_RCC_OscConfig+0x162>
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b18      	cmp	r3, #24
 8001dda:	d149      	bne.n	8001e70 <HAL_RCC_OscConfig+0x1ec>
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d144      	bne.n	8001e70 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de6:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_RCC_OscConfig+0x17a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e2f0      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dfe:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0219 	bic.w	r2, r3, #25
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4941      	ldr	r1, [pc, #260]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7fe fc64 	bl	80006dc <HAL_GetTick>
 8001e14:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e18:	f7fe fc60 	bl	80006dc <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e2da      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e2a:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e36:	f7fe fc7f 	bl	8000738 <HAL_GetREVID>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d80a      	bhi.n	8001e5a <HAL_RCC_OscConfig+0x1d6>
 8001e44:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	492f      	ldr	r1, [pc, #188]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e58:	e062      	b.n	8001f20 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	061b      	lsls	r3, r3, #24
 8001e68:	4929      	ldr	r1, [pc, #164]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e6e:	e057      	b.n	8001f20 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d038      	beq.n	8001eea <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 0219 	bic.w	r2, r3, #25
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4922      	ldr	r1, [pc, #136]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fc27 	bl	80006dc <HAL_GetTick>
 8001e8e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e92:	f7fe fc23 	bl	80006dc <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e29d      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	f7fe fc42 	bl	8000738 <HAL_GetREVID>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f241 0303 	movw	r3, #4099	; 0x1003
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d80a      	bhi.n	8001ed4 <HAL_RCC_OscConfig+0x250>
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	031b      	lsls	r3, r3, #12
 8001ecc:	4910      	ldr	r1, [pc, #64]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
 8001ed2:	e025      	b.n	8001f20 <HAL_RCC_OscConfig+0x29c>
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	490b      	ldr	r1, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
 8001ee8:	e01a      	b.n	8001f20 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_RCC_OscConfig+0x28c>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7fe fbf1 	bl	80006dc <HAL_GetTick>
 8001efa:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efe:	f7fe fbed 	bl	80006dc <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d903      	bls.n	8001f14 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e267      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
 8001f10:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f14:	4ba0      	ldr	r3, [pc, #640]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ee      	bne.n	8001efe <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 808f 	beq.w	800204c <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2e:	4b9a      	ldr	r3, [pc, #616]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f36:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f38:	4b97      	ldr	r3, [pc, #604]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d007      	beq.n	8001f54 <HAL_RCC_OscConfig+0x2d0>
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b18      	cmp	r3, #24
 8001f48:	d12d      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x322>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d128      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f54:	4b90      	ldr	r3, [pc, #576]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x2e8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	2b80      	cmp	r3, #128	; 0x80
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e239      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f6c:	f7fe fbe4 	bl	8000738 <HAL_GetREVID>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f241 0303 	movw	r3, #4099	; 0x1003
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d80a      	bhi.n	8001f90 <HAL_RCC_OscConfig+0x30c>
 8001f7a:	4b87      	ldr	r3, [pc, #540]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	069b      	lsls	r3, r3, #26
 8001f88:	4983      	ldr	r1, [pc, #524]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f8e:	e05d      	b.n	800204c <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f90:	4b81      	ldr	r3, [pc, #516]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	497e      	ldr	r1, [pc, #504]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fa4:	e052      	b.n	800204c <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d035      	beq.n	800201a <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001fae:	4b7a      	ldr	r3, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a79      	ldr	r2, [pc, #484]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7fe fb8f 	bl	80006dc <HAL_GetTick>
 8001fbe:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001fc2:	f7fe fb8b 	bl	80006dc <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e205      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fd4:	4b70      	ldr	r3, [pc, #448]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fe0:	f7fe fbaa 	bl	8000738 <HAL_GetREVID>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f241 0303 	movw	r3, #4099	; 0x1003
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d80a      	bhi.n	8002004 <HAL_RCC_OscConfig+0x380>
 8001fee:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	069b      	lsls	r3, r3, #26
 8001ffc:	4966      	ldr	r1, [pc, #408]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
 8002002:	e023      	b.n	800204c <HAL_RCC_OscConfig+0x3c8>
 8002004:	4b64      	ldr	r3, [pc, #400]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	061b      	lsls	r3, r3, #24
 8002012:	4961      	ldr	r1, [pc, #388]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002014:	4313      	orrs	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
 8002018:	e018      	b.n	800204c <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800201a:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a5e      	ldr	r2, [pc, #376]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7fe fb59 	bl	80006dc <HAL_GetTick>
 800202a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800202e:	f7fe fb55 	bl	80006dc <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e1cf      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002040:	4b55      	ldr	r3, [pc, #340]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f0      	bne.n	800202e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d036      	beq.n	80020c6 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d019      	beq.n	8002094 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002060:	4b4d      	ldr	r3, [pc, #308]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002064:	4a4c      	ldr	r2, [pc, #304]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7fe fb36 	bl	80006dc <HAL_GetTick>
 8002070:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe fb32 	bl	80006dc <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1ac      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002086:	4b44      	ldr	r3, [pc, #272]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x3f0>
 8002092:	e018      	b.n	80020c6 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002094:	4b40      	ldr	r3, [pc, #256]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002098:	4a3f      	ldr	r2, [pc, #252]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7fe fb1c 	bl	80006dc <HAL_GetTick>
 80020a4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a8:	f7fe fb18 	bl	80006dc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e192      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020ba:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 80020bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d036      	beq.n	8002140 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d019      	beq.n	800210e <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020da:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a2e      	ldr	r2, [pc, #184]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 80020e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020e6:	f7fe faf9 	bl	80006dc <HAL_GetTick>
 80020ea:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80020ee:	f7fe faf5 	bl	80006dc <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e16f      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x46a>
 800210c:	e018      	b.n	8002140 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a21      	ldr	r2, [pc, #132]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002118:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800211a:	f7fe fadf 	bl	80006dc <HAL_GetTick>
 800211e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002122:	f7fe fadb 	bl	80006dc <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e155      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8086 	beq.w	800225a <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_RCC_OscConfig+0x518>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <HAL_RCC_OscConfig+0x518>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002158:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800215a:	f7fe fabf 	bl	80006dc <HAL_GetTick>
 800215e:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002162:	f7fe fabb 	bl	80006dc <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b64      	cmp	r3, #100	; 0x64
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e135      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_OscConfig+0x518>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d10b      	bne.n	80021a0 <HAL_RCC_OscConfig+0x51c>
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	4a02      	ldr	r2, [pc, #8]	; (8002198 <HAL_RCC_OscConfig+0x514>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6713      	str	r3, [r2, #112]	; 0x70
 8002194:	e032      	b.n	80021fc <HAL_RCC_OscConfig+0x578>
 8002196:	bf00      	nop
 8002198:	58024400 	.word	0x58024400
 800219c:	58024800 	.word	0x58024800
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10c      	bne.n	80021c2 <HAL_RCC_OscConfig+0x53e>
 80021a8:	4b8f      	ldr	r3, [pc, #572]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a8e      	ldr	r2, [pc, #568]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	4b8c      	ldr	r3, [pc, #560]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a8b      	ldr	r2, [pc, #556]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021ba:	f023 0304 	bic.w	r3, r3, #4
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	e01c      	b.n	80021fc <HAL_RCC_OscConfig+0x578>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x560>
 80021ca:	4b87      	ldr	r3, [pc, #540]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a86      	ldr	r2, [pc, #536]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
 80021d6:	4b84      	ldr	r3, [pc, #528]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	4a83      	ldr	r2, [pc, #524]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6713      	str	r3, [r2, #112]	; 0x70
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0x578>
 80021e4:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a7f      	ldr	r2, [pc, #508]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
 80021f0:	4b7d      	ldr	r3, [pc, #500]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	4a7c      	ldr	r2, [pc, #496]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80021f6:	f023 0304 	bic.w	r3, r3, #4
 80021fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d015      	beq.n	8002230 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7fe fa6a 	bl	80006dc <HAL_GetTick>
 8002208:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800220a:	e00a      	b.n	8002222 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7fe fa66 	bl	80006dc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0de      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002222:	4b71      	ldr	r3, [pc, #452]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0ee      	beq.n	800220c <HAL_RCC_OscConfig+0x588>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7fe fa54 	bl	80006dc <HAL_GetTick>
 8002234:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002236:	e00a      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002238:	f7fe fa50 	bl	80006dc <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e0c8      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800224e:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ee      	bne.n	8002238 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80bd 	beq.w	80023de <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002264:	4b60      	ldr	r3, [pc, #384]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800226c:	2b18      	cmp	r3, #24
 800226e:	f000 80b4 	beq.w	80023da <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	2b02      	cmp	r3, #2
 8002278:	f040 8095 	bne.w	80023a6 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a59      	ldr	r2, [pc, #356]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fa28 	bl	80006dc <HAL_GetTick>
 800228c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe fa24 	bl	80006dc <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e09e      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022a2:	4b51      	ldr	r3, [pc, #324]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ae:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80022b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b2:	4b4e      	ldr	r3, [pc, #312]	; (80023ec <HAL_RCC_OscConfig+0x768>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	430a      	orrs	r2, r1
 80022c2:	4949      	ldr	r1, [pc, #292]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	628b      	str	r3, [r1, #40]	; 0x28
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	3b01      	subs	r3, #1
 80022ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d6:	3b01      	subs	r3, #1
 80022d8:	025b      	lsls	r3, r3, #9
 80022da:	b29b      	uxth	r3, r3
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	3b01      	subs	r3, #1
 80022e4:	041b      	lsls	r3, r3, #16
 80022e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	3b01      	subs	r3, #1
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022f8:	493b      	ldr	r1, [pc, #236]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80022fe:	4b3a      	ldr	r3, [pc, #232]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	4a39      	ldr	r2, [pc, #228]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 800230c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <HAL_RCC_OscConfig+0x76c>)
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002316:	00d2      	lsls	r2, r2, #3
 8002318:	4933      	ldr	r1, [pc, #204]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 800231a:	4313      	orrs	r3, r2
 800231c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800231e:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f023 020c 	bic.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	492f      	ldr	r1, [pc, #188]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 800232c:	4313      	orrs	r3, r2
 800232e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002330:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	f023 0202 	bic.w	r2, r3, #2
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	492a      	ldr	r1, [pc, #168]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 800233e:	4313      	orrs	r3, r2
 8002340:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	4a28      	ldr	r2, [pc, #160]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800235a:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002364:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	4a1f      	ldr	r2, [pc, #124]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 8002378:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe f9ad 	bl	80006dc <HAL_GetTick>
 8002382:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002386:	f7fe f9a9 	bl	80006dc <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e023      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x702>
 80023a4:	e01b      	b.n	80023de <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80023ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe f993 	bl	80006dc <HAL_GetTick>
 80023b6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ba:	f7fe f98f 	bl	80006dc <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e009      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_OscConfig+0x764>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x736>
 80023d8:	e001      	b.n	80023de <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3728      	adds	r7, #40	; 0x28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	58024400 	.word	0x58024400
 80023ec:	fffffc0c 	.word	0xfffffc0c
 80023f0:	ffff0007 	.word	0xffff0007

080023f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e18d      	b.n	8002724 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002408:	4b8a      	ldr	r3, [pc, #552]	; (8002634 <HAL_RCC_ClockConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d910      	bls.n	8002438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b87      	ldr	r3, [pc, #540]	; (8002634 <HAL_RCC_ClockConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 020f 	bic.w	r2, r3, #15
 800241e:	4985      	ldr	r1, [pc, #532]	; (8002634 <HAL_RCC_ClockConfig+0x240>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b83      	ldr	r3, [pc, #524]	; (8002634 <HAL_RCC_ClockConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e175      	b.n	8002724 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d010      	beq.n	8002466 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	4b7b      	ldr	r3, [pc, #492]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002450:	429a      	cmp	r2, r3
 8002452:	d908      	bls.n	8002466 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002454:	4b78      	ldr	r3, [pc, #480]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	4975      	ldr	r1, [pc, #468]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002462:	4313      	orrs	r3, r2
 8002464:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d010      	beq.n	8002494 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800247e:	429a      	cmp	r2, r3
 8002480:	d908      	bls.n	8002494 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002482:	4b6d      	ldr	r3, [pc, #436]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	496a      	ldr	r1, [pc, #424]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002490:	4313      	orrs	r3, r2
 8002492:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d010      	beq.n	80024c2 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	4b64      	ldr	r3, [pc, #400]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d908      	bls.n	80024c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024b0:	4b61      	ldr	r3, [pc, #388]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	495e      	ldr	r1, [pc, #376]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d010      	beq.n	80024f0 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69da      	ldr	r2, [r3, #28]
 80024d2:	4b59      	ldr	r3, [pc, #356]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024da:	429a      	cmp	r2, r3
 80024dc:	d908      	bls.n	80024f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024de:	4b56      	ldr	r3, [pc, #344]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4953      	ldr	r1, [pc, #332]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	4b4d      	ldr	r3, [pc, #308]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	429a      	cmp	r2, r3
 800250a:	d908      	bls.n	800251e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250c:	4b4a      	ldr	r3, [pc, #296]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f023 020f 	bic.w	r2, r3, #15
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4947      	ldr	r1, [pc, #284]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 800251a:	4313      	orrs	r3, r2
 800251c:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d055      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800252a:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	4940      	ldr	r1, [pc, #256]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002538:	4313      	orrs	r3, r2
 800253a:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d107      	bne.n	8002554 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002544:	4b3c      	ldr	r3, [pc, #240]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d121      	bne.n	8002594 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0e7      	b.n	8002724 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d107      	bne.n	800256c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800255c:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d115      	bne.n	8002594 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0db      	b.n	8002724 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002574:	4b30      	ldr	r3, [pc, #192]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0cf      	b.n	8002724 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002584:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0c7      	b.n	8002724 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f023 0207 	bic.w	r2, r3, #7
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4925      	ldr	r1, [pc, #148]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe f899 	bl	80006dc <HAL_GetTick>
 80025aa:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ae:	f7fe f895 	bl	80006dc <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0af      	b.n	8002724 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d1eb      	bne.n	80025ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d010      	beq.n	8002604 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d208      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f023 020f 	bic.w	r2, r3, #15
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	490e      	ldr	r1, [pc, #56]	; (8002638 <HAL_RCC_ClockConfig+0x244>)
 8002600:	4313      	orrs	r3, r2
 8002602:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_ClockConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d214      	bcs.n	800263c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <HAL_RCC_ClockConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 020f 	bic.w	r2, r3, #15
 800261a:	4906      	ldr	r1, [pc, #24]	; (8002634 <HAL_RCC_ClockConfig+0x240>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <HAL_RCC_ClockConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e077      	b.n	8002724 <HAL_RCC_ClockConfig+0x330>
 8002634:	52002000 	.word	0x52002000
 8002638:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d010      	beq.n	800266a <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	4b37      	ldr	r3, [pc, #220]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002654:	429a      	cmp	r2, r3
 8002656:	d208      	bcs.n	800266a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002658:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	4931      	ldr	r1, [pc, #196]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 8002666:	4313      	orrs	r3, r2
 8002668:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d010      	beq.n	8002698 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	4b2c      	ldr	r3, [pc, #176]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002682:	429a      	cmp	r2, r3
 8002684:	d208      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002686:	4b29      	ldr	r3, [pc, #164]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	4926      	ldr	r1, [pc, #152]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 8002694:	4313      	orrs	r3, r2
 8002696:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d010      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d208      	bcs.n	80026c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	491a      	ldr	r1, [pc, #104]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d010      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026de:	429a      	cmp	r2, r3
 80026e0:	d208      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	490f      	ldr	r1, [pc, #60]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026f4:	f000 f822 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026f8:	4601      	mov	r1, r0
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_RCC_ClockConfig+0x338>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_RCC_ClockConfig+0x33c>)
 8002706:	5cd3      	ldrb	r3, [r2, r3]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa21 f303 	lsr.w	r3, r1, r3
 8002710:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_RCC_ClockConfig+0x340>)
 8002712:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_RCC_ClockConfig+0x344>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd ff95 	bl	8000648 <HAL_InitTick>
 800271e:	4603      	mov	r3, r0
 8002720:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002722:	7afb      	ldrb	r3, [r7, #11]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	58024400 	.word	0x58024400
 8002730:	08007ebc 	.word	0x08007ebc
 8002734:	24000010 	.word	0x24000010
 8002738:	24000000 	.word	0x24000000

0800273c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002742:	4baf      	ldr	r3, [pc, #700]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800274a:	2b18      	cmp	r3, #24
 800274c:	f200 814e 	bhi.w	80029ec <HAL_RCC_GetSysClockFreq+0x2b0>
 8002750:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	080027bd 	.word	0x080027bd
 800275c:	080029ed 	.word	0x080029ed
 8002760:	080029ed 	.word	0x080029ed
 8002764:	080029ed 	.word	0x080029ed
 8002768:	080029ed 	.word	0x080029ed
 800276c:	080029ed 	.word	0x080029ed
 8002770:	080029ed 	.word	0x080029ed
 8002774:	080029ed 	.word	0x080029ed
 8002778:	080027e3 	.word	0x080027e3
 800277c:	080029ed 	.word	0x080029ed
 8002780:	080029ed 	.word	0x080029ed
 8002784:	080029ed 	.word	0x080029ed
 8002788:	080029ed 	.word	0x080029ed
 800278c:	080029ed 	.word	0x080029ed
 8002790:	080029ed 	.word	0x080029ed
 8002794:	080029ed 	.word	0x080029ed
 8002798:	080027e9 	.word	0x080027e9
 800279c:	080029ed 	.word	0x080029ed
 80027a0:	080029ed 	.word	0x080029ed
 80027a4:	080029ed 	.word	0x080029ed
 80027a8:	080029ed 	.word	0x080029ed
 80027ac:	080029ed 	.word	0x080029ed
 80027b0:	080029ed 	.word	0x080029ed
 80027b4:	080029ed 	.word	0x080029ed
 80027b8:	080027ef 	.word	0x080027ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027bc:	4b90      	ldr	r3, [pc, #576]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d009      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027c8:	4b8d      	ldr	r3, [pc, #564]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	4a8c      	ldr	r2, [pc, #560]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
 80027d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80027da:	e10a      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027dc:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80027de:	61bb      	str	r3, [r7, #24]
    break;
 80027e0:	e107      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80027e2:	4b89      	ldr	r3, [pc, #548]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80027e4:	61bb      	str	r3, [r7, #24]
    break;
 80027e6:	e104      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80027e8:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x2d0>)
 80027ea:	61bb      	str	r3, [r7, #24]
    break;
 80027ec:	e101      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027ee:	4b84      	ldr	r3, [pc, #528]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80027f8:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002802:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002804:	4b7e      	ldr	r3, [pc, #504]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800280e:	4b7c      	ldr	r3, [pc, #496]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	08db      	lsrs	r3, r3, #3
 8002814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002826:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80da 	beq.w	80029e6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d05a      	beq.n	80028ee <HAL_RCC_GetSysClockFreq+0x1b2>
 8002838:	2b01      	cmp	r3, #1
 800283a:	d302      	bcc.n	8002842 <HAL_RCC_GetSysClockFreq+0x106>
 800283c:	2b02      	cmp	r3, #2
 800283e:	d078      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002840:	e099      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002842:	4b6f      	ldr	r3, [pc, #444]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d02d      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800284e:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	08db      	lsrs	r3, r3, #3
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	4a6a      	ldr	r2, [pc, #424]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	ee07 3a90 	vmov	s15, r3
 8002870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002878:	4b61      	ldr	r3, [pc, #388]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002888:	ed97 6a02 	vldr	s12, [r7, #8]
 800288c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002a10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800289c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80028a8:	e087      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002a14 <HAL_RCC_GetSysClockFreq+0x2d8>
 80028b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028bc:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80028d0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002a10 <HAL_RCC_GetSysClockFreq+0x2d4>
 80028d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028ec:	e065      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002a18 <HAL_RCC_GetSysClockFreq+0x2dc>
 80028fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002900:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002910:	ed97 6a02 	vldr	s12, [r7, #8]
 8002914:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002a10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800291c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002930:	e043      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002a1c <HAL_RCC_GetSysClockFreq+0x2e0>
 8002940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002944:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002954:	ed97 6a02 	vldr	s12, [r7, #8]
 8002958:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002a10 <HAL_RCC_GetSysClockFreq+0x2d4>
 800295c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800296c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002970:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002974:	e021      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	ee07 3a90 	vmov	s15, r3
 800297c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002980:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002a18 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002998:	ed97 6a02 	vldr	s12, [r7, #8]
 800299c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002a10 <HAL_RCC_GetSysClockFreq+0x2d4>
 80029a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029b8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	0a5b      	lsrs	r3, r3, #9
 80029c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029c4:	3301      	adds	r3, #1
 80029c6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80029d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029de:	ee17 3a90 	vmov	r3, s15
 80029e2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80029e4:	e005      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
    break;
 80029ea:	e002      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80029ee:	61bb      	str	r3, [r7, #24]
    break;
 80029f0:	bf00      	nop
  }

  return sysclockfreq;
 80029f2:	69bb      	ldr	r3, [r7, #24]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3724      	adds	r7, #36	; 0x24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	58024400 	.word	0x58024400
 8002a04:	03d09000 	.word	0x03d09000
 8002a08:	003d0900 	.word	0x003d0900
 8002a0c:	007a1200 	.word	0x007a1200
 8002a10:	46000000 	.word	0x46000000
 8002a14:	4c742400 	.word	0x4c742400
 8002a18:	4a742400 	.word	0x4a742400
 8002a1c:	4af42400 	.word	0x4af42400

08002a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a24:	f001 f9e2 	bl	8003dec <HAL_RCCEx_GetD1SysClockFreq>
 8002a28:	4601      	mov	r1, r0
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_RCC_GetHCLKFreq+0x2c>)
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x30>)
 8002a34:	5cd3      	ldrb	r3, [r2, r3]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a3e:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <HAL_RCC_GetHCLKFreq+0x34>)
 8002a40:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <HAL_RCC_GetHCLKFreq+0x34>)
 8002a44:	681b      	ldr	r3, [r3, #0]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	08007ebc 	.word	0x08007ebc
 8002a54:	24000014 	.word	0x24000014

08002a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a5c:	f7ff ffe0 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a60:	4601      	mov	r1, r0
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	08007ebc 	.word	0x08007ebc

08002a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a88:	f7ff ffca 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	08007ebc 	.word	0x08007ebc

08002ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ab8:	2300      	movs	r3, #0
 8002aba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002abc:	2300      	movs	r3, #0
 8002abe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d03d      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ad4:	d013      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ada:	d802      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ae0:	e01f      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ae6:	d013      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002aec:	d01c      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002aee:	e018      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002af0:	4baf      	ldr	r3, [pc, #700]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	4aae      	ldr	r2, [pc, #696]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002afc:	e015      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2102      	movs	r1, #2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f001 f98d 	bl	8003e24 <RCCEx_PLL2_Config>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b0e:	e00c      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3324      	adds	r3, #36	; 0x24
 8002b14:	2102      	movs	r1, #2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 fa36 	bl	8003f88 <RCCEx_PLL3_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b20:	e003      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
      break;
 8002b26:	e000      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b30:	4b9f      	ldr	r3, [pc, #636]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b3c:	499c      	ldr	r1, [pc, #624]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	650b      	str	r3, [r1, #80]	; 0x50
 8002b42:	e001      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d03d      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d826      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002b5c:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b62:	bf00      	nop
 8002b64:	08002b79 	.word	0x08002b79
 8002b68:	08002b87 	.word	0x08002b87
 8002b6c:	08002b99 	.word	0x08002b99
 8002b70:	08002bb1 	.word	0x08002bb1
 8002b74:	08002bb1 	.word	0x08002bb1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b78:	4b8d      	ldr	r3, [pc, #564]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	4a8c      	ldr	r2, [pc, #560]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b84:	e015      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 f949 	bl	8003e24 <RCCEx_PLL2_Config>
 8002b92:	4603      	mov	r3, r0
 8002b94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b96:	e00c      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3324      	adds	r3, #36	; 0x24
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 f9f2 	bl	8003f88 <RCCEx_PLL3_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ba8:	e003      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
      break;
 8002bae:	e000      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bb8:	4b7d      	ldr	r3, [pc, #500]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbc:	f023 0207 	bic.w	r2, r3, #7
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	497a      	ldr	r1, [pc, #488]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	650b      	str	r3, [r1, #80]	; 0x50
 8002bca:	e001      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d03e      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	2b80      	cmp	r3, #128	; 0x80
 8002be2:	d01c      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002be4:	2b80      	cmp	r3, #128	; 0x80
 8002be6:	d804      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d00d      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002bf0:	e01e      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8002bf4:	d01f      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfa:	d01e      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002bfc:	e018      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfe:	4b6c      	ldr	r3, [pc, #432]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	4a6b      	ldr	r2, [pc, #428]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c0a:	e017      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 f906 	bl	8003e24 <RCCEx_PLL2_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c1c:	e00e      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3324      	adds	r3, #36	; 0x24
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 f9af 	bl	8003f88 <RCCEx_PLL3_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c2e:	e005      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
      break;
 8002c34:	e002      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c42:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c46:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	4958      	ldr	r1, [pc, #352]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	650b      	str	r3, [r1, #80]	; 0x50
 8002c54:	e001      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d044      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c70:	d01f      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c76:	d805      	bhi.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c80:	d00e      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002c82:	e01f      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002c84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c88:	d01f      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002c8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c8e:	d01e      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002c90:	e018      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c92:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	4a46      	ldr	r2, [pc, #280]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c9e:	e017      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 f8bc 	bl	8003e24 <RCCEx_PLL2_Config>
 8002cac:	4603      	mov	r3, r0
 8002cae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002cb0:	e00e      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3324      	adds	r3, #36	; 0x24
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 f965 	bl	8003f88 <RCCEx_PLL3_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cc2:	e005      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc8:	e002      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10a      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002cd6:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ce4:	4932      	ldr	r1, [pc, #200]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	658b      	str	r3, [r1, #88]	; 0x58
 8002cea:	e001      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d044      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d06:	d01f      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002d08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d0c:	d805      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002d12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d16:	d00e      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002d18:	e01f      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002d1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d1e:	d01f      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d24:	d01e      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d26:	e018      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d28:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d34:	e017      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 f871 	bl	8003e24 <RCCEx_PLL2_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d46:	e00e      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3324      	adds	r3, #36	; 0x24
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 f91a 	bl	8003f88 <RCCEx_PLL3_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d58:	e005      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5e:	e002      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d6c:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d7a:	490d      	ldr	r1, [pc, #52]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	658b      	str	r3, [r1, #88]	; 0x58
 8002d80:	e001      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d035      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d00c      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d802      	bhi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01b      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002da2:	e017      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d00c      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002da8:	2b30      	cmp	r3, #48	; 0x30
 8002daa:	d018      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002dac:	e012      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002dae:	bf00      	nop
 8002db0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002db4:	4baf      	ldr	r3, [pc, #700]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	4aae      	ldr	r2, [pc, #696]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002dc0:	e00e      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f001 f82b 	bl	8003e24 <RCCEx_PLL2_Config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002dd2:	e005      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002dd8:	e002      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e000      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002de6:	4ba3      	ldr	r3, [pc, #652]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df2:	49a0      	ldr	r1, [pc, #640]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002df8:	e001      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d042      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e12:	d01f      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e18:	d805      	bhi.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e22:	d00e      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002e24:	e01f      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002e26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e2a:	d01f      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e30:	d01e      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002e32:	e018      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e34:	4b8f      	ldr	r3, [pc, #572]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	4a8e      	ldr	r2, [pc, #568]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e40:	e017      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 ffeb 	bl	8003e24 <RCCEx_PLL2_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e52:	e00e      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3324      	adds	r3, #36	; 0x24
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 f894 	bl	8003f88 <RCCEx_PLL3_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e64:	e005      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002e6c:	bf00      	nop
 8002e6e:	e000      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e78:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	497b      	ldr	r1, [pc, #492]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	650b      	str	r3, [r1, #80]	; 0x50
 8002e8a:	e001      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d042      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ea4:	d01b      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eaa:	d805      	bhi.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d022      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002eb6:	e01b      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002eb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ebc:	d01d      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002ebe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec2:	d01c      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002ec4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ec8:	d01b      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002eca:	e011      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 ffa6 	bl	8003e24 <RCCEx_PLL2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002edc:	e012      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3324      	adds	r3, #36	; 0x24
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 f84f 	bl	8003f88 <RCCEx_PLL3_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002eee:	e009      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef4:	e006      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e004      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002efa:	bf00      	nop
 8002efc:	e002      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002efe:	bf00      	nop
 8002f00:	e000      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f0a:	4b5a      	ldr	r3, [pc, #360]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f16:	4957      	ldr	r1, [pc, #348]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	650b      	str	r3, [r1, #80]	; 0x50
 8002f1c:	e001      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d044      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f38:	d01b      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f3e:	d805      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d022      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002f4a:	e01b      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f50:	d01d      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f56:	d01c      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002f58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f5c:	d01b      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002f5e:	e011      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 ff5c 	bl	8003e24 <RCCEx_PLL2_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002f70:	e012      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3324      	adds	r3, #36	; 0x24
 8002f76:	2101      	movs	r1, #1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f001 f805 	bl	8003f88 <RCCEx_PLL3_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002f82:	e009      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
      break;
 8002f88:	e006      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e004      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e002      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002f92:	bf00      	nop
 8002f94:	e000      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f9e:	4b35      	ldr	r3, [pc, #212]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fac:	4931      	ldr	r1, [pc, #196]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	658b      	str	r3, [r1, #88]	; 0x58
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d02d      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fcc:	d005      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd2:	d009      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002fd8:	e00f      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fda:	4b26      	ldr	r3, [pc, #152]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	4a25      	ldr	r2, [pc, #148]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002fe6:	e00c      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	2101      	movs	r1, #1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 ff18 	bl	8003e24 <RCCEx_PLL2_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ff8:	e003      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ffe:	e000      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800300a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003014:	4917      	ldr	r1, [pc, #92]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	650b      	str	r3, [r1, #80]	; 0x50
 800301a:	e001      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d035      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	2b03      	cmp	r3, #3
 8003032:	d81b      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	08003079 	.word	0x08003079
 8003040:	0800304d 	.word	0x0800304d
 8003044:	0800305b 	.word	0x0800305b
 8003048:	08003079 	.word	0x08003079
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	4a08      	ldr	r2, [pc, #32]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003056:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003058:	e00f      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3304      	adds	r3, #4
 800305e:	2102      	movs	r1, #2
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fedf 	bl	8003e24 <RCCEx_PLL2_Config>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800306a:	e006      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
      break;
 8003070:	e003      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003072:	bf00      	nop
 8003074:	58024400 	.word	0x58024400
      break;
 8003078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800307a:	7dfb      	ldrb	r3, [r7, #23]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003080:	4bba      	ldr	r3, [pc, #744]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003084:	f023 0203 	bic.w	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	49b7      	ldr	r1, [pc, #732]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8086 	beq.w	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a6:	4bb2      	ldr	r3, [pc, #712]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4ab1      	ldr	r2, [pc, #708]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b2:	f7fd fb13 	bl	80006dc <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b8:	e009      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ba:	f7fd fb0f 	bl	80006dc <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b64      	cmp	r3, #100	; 0x64
 80030c6:	d902      	bls.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	75fb      	strb	r3, [r7, #23]
        break;
 80030cc:	e005      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ce:	4ba8      	ldr	r3, [pc, #672]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ef      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d166      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030e0:	4ba2      	ldr	r3, [pc, #648]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80030e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030ea:	4053      	eors	r3, r2
 80030ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d013      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030f4:	4b9d      	ldr	r3, [pc, #628]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030fe:	4b9b      	ldr	r3, [pc, #620]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	4a9a      	ldr	r2, [pc, #616]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800310a:	4b98      	ldr	r3, [pc, #608]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a97      	ldr	r2, [pc, #604]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003116:	4a95      	ldr	r2, [pc, #596]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003126:	d115      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fd fad8 	bl	80006dc <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800312e:	e00b      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fd fad4 	bl	80006dc <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d902      	bls.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	75fb      	strb	r3, [r7, #23]
            break;
 8003146:	e005      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003148:	4b88      	ldr	r3, [pc, #544]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ed      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d126      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003168:	d10d      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800316a:	4b80      	ldr	r3, [pc, #512]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003178:	0919      	lsrs	r1, r3, #4
 800317a:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800317c:	400b      	ands	r3, r1
 800317e:	497b      	ldr	r1, [pc, #492]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	610b      	str	r3, [r1, #16]
 8003184:	e005      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003186:	4b79      	ldr	r3, [pc, #484]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	4a78      	ldr	r2, [pc, #480]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800318c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003190:	6113      	str	r3, [r2, #16]
 8003192:	4b76      	ldr	r3, [pc, #472]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	4972      	ldr	r1, [pc, #456]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	670b      	str	r3, [r1, #112]	; 0x70
 80031a6:	e004      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	75bb      	strb	r3, [r7, #22]
 80031ac:	e001      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d07d      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031c2:	2b28      	cmp	r3, #40	; 0x28
 80031c4:	d866      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	0800329b 	.word	0x0800329b
 80031d0:	08003295 	.word	0x08003295
 80031d4:	08003295 	.word	0x08003295
 80031d8:	08003295 	.word	0x08003295
 80031dc:	08003295 	.word	0x08003295
 80031e0:	08003295 	.word	0x08003295
 80031e4:	08003295 	.word	0x08003295
 80031e8:	08003295 	.word	0x08003295
 80031ec:	08003271 	.word	0x08003271
 80031f0:	08003295 	.word	0x08003295
 80031f4:	08003295 	.word	0x08003295
 80031f8:	08003295 	.word	0x08003295
 80031fc:	08003295 	.word	0x08003295
 8003200:	08003295 	.word	0x08003295
 8003204:	08003295 	.word	0x08003295
 8003208:	08003295 	.word	0x08003295
 800320c:	08003283 	.word	0x08003283
 8003210:	08003295 	.word	0x08003295
 8003214:	08003295 	.word	0x08003295
 8003218:	08003295 	.word	0x08003295
 800321c:	08003295 	.word	0x08003295
 8003220:	08003295 	.word	0x08003295
 8003224:	08003295 	.word	0x08003295
 8003228:	08003295 	.word	0x08003295
 800322c:	0800329b 	.word	0x0800329b
 8003230:	08003295 	.word	0x08003295
 8003234:	08003295 	.word	0x08003295
 8003238:	08003295 	.word	0x08003295
 800323c:	08003295 	.word	0x08003295
 8003240:	08003295 	.word	0x08003295
 8003244:	08003295 	.word	0x08003295
 8003248:	08003295 	.word	0x08003295
 800324c:	0800329b 	.word	0x0800329b
 8003250:	08003295 	.word	0x08003295
 8003254:	08003295 	.word	0x08003295
 8003258:	08003295 	.word	0x08003295
 800325c:	08003295 	.word	0x08003295
 8003260:	08003295 	.word	0x08003295
 8003264:	08003295 	.word	0x08003295
 8003268:	08003295 	.word	0x08003295
 800326c:	0800329b 	.word	0x0800329b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	2101      	movs	r1, #1
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fdd4 	bl	8003e24 <RCCEx_PLL2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003280:	e00c      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3324      	adds	r3, #36	; 0x24
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fe7d 	bl	8003f88 <RCCEx_PLL3_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003292:	e003      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	75fb      	strb	r3, [r7, #23]
      break;
 8003298:	e000      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800329a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80032a2:	4b32      	ldr	r3, [pc, #200]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ae:	492f      	ldr	r1, [pc, #188]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	654b      	str	r3, [r1, #84]	; 0x54
 80032b4:	e001      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
 80032b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d037      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d820      	bhi.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80032ce:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	08003317 	.word	0x08003317
 80032d8:	080032ed 	.word	0x080032ed
 80032dc:	080032ff 	.word	0x080032ff
 80032e0:	08003317 	.word	0x08003317
 80032e4:	08003317 	.word	0x08003317
 80032e8:	08003317 	.word	0x08003317
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3304      	adds	r3, #4
 80032f0:	2101      	movs	r1, #1
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fd96 	bl	8003e24 <RCCEx_PLL2_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80032fc:	e00c      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3324      	adds	r3, #36	; 0x24
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fe3f 	bl	8003f88 <RCCEx_PLL3_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800330e:	e003      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	75fb      	strb	r3, [r7, #23]
      break;
 8003314:	e000      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800331e:	4b13      	ldr	r3, [pc, #76]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	f023 0207 	bic.w	r2, r3, #7
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332a:	4910      	ldr	r1, [pc, #64]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	654b      	str	r3, [r1, #84]	; 0x54
 8003330:	e001      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d040      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	2b05      	cmp	r3, #5
 800334a:	d827      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800334c:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	080033a3 	.word	0x080033a3
 8003358:	08003379 	.word	0x08003379
 800335c:	0800338b 	.word	0x0800338b
 8003360:	080033a3 	.word	0x080033a3
 8003364:	080033a3 	.word	0x080033a3
 8003368:	080033a3 	.word	0x080033a3
 800336c:	58024400 	.word	0x58024400
 8003370:	58024800 	.word	0x58024800
 8003374:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fd50 	bl	8003e24 <RCCEx_PLL2_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003388:	e00c      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3324      	adds	r3, #36	; 0x24
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fdf9 	bl	8003f88 <RCCEx_PLL3_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800339a:	e003      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]
      break;
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80033a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033aa:	4bb3      	ldr	r3, [pc, #716]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	f023 0207 	bic.w	r2, r3, #7
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	49af      	ldr	r1, [pc, #700]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	658b      	str	r3, [r1, #88]	; 0x58
 80033be:	e001      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d044      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033da:	d01b      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80033dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033e0:	d805      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d022      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80033e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80033ec:	e01b      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f2:	d01d      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80033f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f8:	d01c      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80033fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033fe:	d01b      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003400:	e011      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fd0b 	bl	8003e24 <RCCEx_PLL2_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003412:	e012      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3324      	adds	r3, #36	; 0x24
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fdb4 	bl	8003f88 <RCCEx_PLL3_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003424:	e009      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
      break;
 800342a:	e006      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800342c:	bf00      	nop
 800342e:	e004      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003430:	bf00      	nop
 8003432:	e002      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003440:	4b8d      	ldr	r3, [pc, #564]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800344e:	498a      	ldr	r1, [pc, #552]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003450:	4313      	orrs	r3, r2
 8003452:	654b      	str	r3, [r1, #84]	; 0x54
 8003454:	e001      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d044      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800346c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003470:	d01b      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003476:	d805      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d022      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800347c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003482:	e01b      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003488:	d01d      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800348a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800348e:	d01c      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003494:	d01b      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003496:	e011      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fcc0 	bl	8003e24 <RCCEx_PLL2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80034a8:	e012      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3324      	adds	r3, #36	; 0x24
 80034ae:	2102      	movs	r1, #2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fd69 	bl	8003f88 <RCCEx_PLL3_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80034ba:	e009      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	75fb      	strb	r3, [r7, #23]
      break;
 80034c0:	e006      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80034c2:	bf00      	nop
 80034c4:	e004      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80034ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034d6:	4b68      	ldr	r3, [pc, #416]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034e4:	4964      	ldr	r1, [pc, #400]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	658b      	str	r3, [r1, #88]	; 0x58
 80034ea:	e001      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d044      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003506:	d01b      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800350c:	d805      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d022      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003518:	e01b      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800351a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351e:	d01d      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003520:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003524:	d01c      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003526:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800352a:	d01b      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800352c:	e011      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3304      	adds	r3, #4
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fc75 	bl	8003e24 <RCCEx_PLL2_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800353e:	e012      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3324      	adds	r3, #36	; 0x24
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fd1e 	bl	8003f88 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003550:	e009      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]
      break;
 8003556:	e006      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003558:	bf00      	nop
 800355a:	e004      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800355c:	bf00      	nop
 800355e:	e002      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003560:	bf00      	nop
 8003562:	e000      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800356c:	4b42      	ldr	r3, [pc, #264]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800357a:	493f      	ldr	r1, [pc, #252]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800357c:	4313      	orrs	r3, r2
 800357e:	658b      	str	r3, [r1, #88]	; 0x58
 8003580:	e001      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01b      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359c:	d10b      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3324      	adds	r3, #36	; 0x24
 80035a2:	2102      	movs	r1, #2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fcef 	bl	8003f88 <RCCEx_PLL3_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00c      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	75bb      	strb	r3, [r7, #22]
 80035b4:	e009      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80035b6:	4b30      	ldr	r3, [pc, #192]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c4:	492c      	ldr	r1, [pc, #176]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01b      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e0:	d10b      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3324      	adds	r3, #36	; 0x24
 80035e6:	2102      	movs	r1, #2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fccd 	bl	8003f88 <RCCEx_PLL3_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00c      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	75bb      	strb	r3, [r7, #22]
 80035f8:	e009      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003608:	491b      	ldr	r1, [pc, #108]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d032      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003624:	d00d      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8003626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800362a:	d016      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d111      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fbf4 	bl	8003e24 <RCCEx_PLL2_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003640:	e00c      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3324      	adds	r3, #36	; 0x24
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fc9d 	bl	8003f88 <RCCEx_PLL3_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003652:	e003      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	75fb      	strb	r3, [r7, #23]
      break;
 8003658:	e000      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 800365a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10c      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003666:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003670:	4901      	ldr	r1, [pc, #4]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003672:	4313      	orrs	r3, r2
 8003674:	658b      	str	r3, [r1, #88]	; 0x58
 8003676:	e003      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8003678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d02f      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003692:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003696:	d00c      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003698:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800369c:	d015      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800369e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a2:	d10f      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a4:	4b79      	ldr	r3, [pc, #484]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a78      	ldr	r2, [pc, #480]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80036b0:	e00c      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3324      	adds	r3, #36	; 0x24
 80036b6:	2101      	movs	r1, #1
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fc65 	bl	8003f88 <RCCEx_PLL3_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80036c2:	e003      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	75fb      	strb	r3, [r7, #23]
      break;
 80036c8:	e000      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 80036ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d2:	4b6e      	ldr	r3, [pc, #440]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e0:	496a      	ldr	r1, [pc, #424]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	654b      	str	r3, [r1, #84]	; 0x54
 80036e6:	e001      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d029      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003704:	d007      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8003706:	e00f      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003708:	4b60      	ldr	r3, [pc, #384]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	4a5f      	ldr	r2, [pc, #380]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800370e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003714:	e00b      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fb81 	bl	8003e24 <RCCEx_PLL2_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003726:	e002      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	75fb      	strb	r3, [r7, #23]
      break;
 800372c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003734:	4b55      	ldr	r3, [pc, #340]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003738:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003740:	4952      	ldr	r1, [pc, #328]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003746:	e001      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3324      	adds	r3, #36	; 0x24
 800375c:	2102      	movs	r1, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fc12 	bl	8003f88 <RCCEx_PLL3_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d02f      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003782:	d00c      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8003784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003788:	d802      	bhi.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d011      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800378e:	e00d      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8003790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003794:	d00f      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800379a:	d00e      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 800379c:	e006      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	4a3a      	ldr	r2, [pc, #232]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80037aa:	e007      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	75fb      	strb	r3, [r7, #23]
      break;
 80037b0:	e004      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80037b2:	bf00      	nop
 80037b4:	e002      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80037ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037c2:	4b32      	ldr	r3, [pc, #200]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ce:	492f      	ldr	r1, [pc, #188]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	654b      	str	r3, [r1, #84]	; 0x54
 80037d4:	e001      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037e6:	4b29      	ldr	r3, [pc, #164]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	4926      	ldr	r1, [pc, #152]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d009      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003804:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003812:	491e      	ldr	r1, [pc, #120]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003814:	4313      	orrs	r3, r2
 8003816:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003828:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003830:	4916      	ldr	r1, [pc, #88]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	4a11      	ldr	r2, [pc, #68]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003848:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800384c:	6113      	str	r3, [r2, #16]
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003858:	490c      	ldr	r1, [pc, #48]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	da08      	bge.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	4906      	ldr	r1, [pc, #24]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003874:	4313      	orrs	r3, r2
 8003876:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003878:	7dbb      	ldrb	r3, [r7, #22]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	58024400 	.word	0x58024400

08003890 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003894:	f7ff f8c4 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8003898:	4601      	mov	r1, r0
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	58024400 	.word	0x58024400
 80038b8:	08007ebc 	.word	0x08007ebc

080038bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	; 0x24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038c4:	4b9d      	ldr	r3, [pc, #628]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80038ce:	4b9b      	ldr	r3, [pc, #620]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	0b1b      	lsrs	r3, r3, #12
 80038d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d8:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80038da:	4b98      	ldr	r3, [pc, #608]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80038e4:	4b95      	ldr	r3, [pc, #596]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	08db      	lsrs	r3, r3, #3
 80038ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	fb02 f303 	mul.w	r3, r2, r3
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 810a 	beq.w	8003b1c <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d05a      	beq.n	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 800390e:	2b01      	cmp	r3, #1
 8003910:	d302      	bcc.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8003912:	2b02      	cmp	r3, #2
 8003914:	d078      	beq.n	8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8003916:	e099      	b.n	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003918:	4b88      	ldr	r3, [pc, #544]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02d      	beq.n	8003980 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003924:	4b85      	ldr	r3, [pc, #532]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	08db      	lsrs	r3, r3, #3
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	4a84      	ldr	r2, [pc, #528]	; (8003b40 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003930:	fa22 f303 	lsr.w	r3, r2, r3
 8003934:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b7b      	ldr	r3, [pc, #492]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003962:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800397e:	e087      	b.n	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039c2:	e065      	b.n	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80039d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d6:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80039ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a06:	e043      	b.n	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1a:	4b48      	ldr	r3, [pc, #288]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a4a:	e021      	b.n	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a5e:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003a90:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	0a5b      	lsrs	r3, r3, #9
 8003a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ab6:	ee17 2a90 	vmov	r2, s15
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003abe:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae4:	ee17 2a90 	vmov	r2, s15
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	0e1b      	lsrs	r3, r3, #24
 8003af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b12:	ee17 2a90 	vmov	r2, s15
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b1a:	e008      	b.n	8003b2e <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	609a      	str	r2, [r3, #8]
}
 8003b2e:	bf00      	nop
 8003b30:	3724      	adds	r7, #36	; 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	58024400 	.word	0x58024400
 8003b40:	03d09000 	.word	0x03d09000
 8003b44:	46000000 	.word	0x46000000
 8003b48:	4c742400 	.word	0x4c742400
 8003b4c:	4a742400 	.word	0x4a742400
 8003b50:	4af42400 	.word	0x4af42400

08003b54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b089      	sub	sp, #36	; 0x24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b5c:	4b9d      	ldr	r3, [pc, #628]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003b66:	4b9b      	ldr	r3, [pc, #620]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	0d1b      	lsrs	r3, r3, #20
 8003b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b70:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8003b72:	4b98      	ldr	r3, [pc, #608]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003b7c:	4b95      	ldr	r3, [pc, #596]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	ee07 3a90 	vmov	s15, r3
 8003b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 810a 	beq.w	8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d05a      	beq.n	8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d302      	bcc.n	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d078      	beq.n	8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8003bae:	e099      	b.n	8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bb0:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d02d      	beq.n	8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bbc:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	08db      	lsrs	r3, r3, #3
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	4a84      	ldr	r2, [pc, #528]	; (8003dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bcc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	ee07 3a90 	vmov	s15, r3
 8003bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003be6:	4b7b      	ldr	r3, [pc, #492]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003c16:	e087      	b.n	8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003de0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2a:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c5a:	e065      	b.n	8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6e:	4b59      	ldr	r3, [pc, #356]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c9e:	e043      	b.n	8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003caa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003de8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb2:	4b48      	ldr	r3, [pc, #288]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ce2:	e021      	b.n	8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf6:	4b37      	ldr	r3, [pc, #220]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003d28:	4b2a      	ldr	r3, [pc, #168]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	0a5b      	lsrs	r3, r3, #9
 8003d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d4e:	ee17 2a90 	vmov	r2, s15
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003d56:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	0c1b      	lsrs	r3, r3, #16
 8003d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d7c:	ee17 2a90 	vmov	r2, s15
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003d84:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	0e1b      	lsrs	r3, r3, #24
 8003d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003daa:	ee17 2a90 	vmov	r2, s15
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003db2:	e008      	b.n	8003dc6 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
}
 8003dc6:	bf00      	nop
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	03d09000 	.word	0x03d09000
 8003ddc:	46000000 	.word	0x46000000
 8003de0:	4c742400 	.word	0x4c742400
 8003de4:	4a742400 	.word	0x4a742400
 8003de8:	4af42400 	.word	0x4af42400

08003dec <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003df0:	f7fe fca4 	bl	800273c <HAL_RCC_GetSysClockFreq>
 8003df4:	4601      	mov	r1, r0
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	4a06      	ldr	r2, [pc, #24]	; (8003e1c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8003e02:	5cd3      	ldrb	r3, [r2, r3]
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	fa21 f303 	lsr.w	r3, r1, r3
 8003e0c:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003e0e:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	58024400 	.word	0x58024400
 8003e1c:	08007ebc 	.word	0x08007ebc
 8003e20:	24000010 	.word	0x24000010

08003e24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e32:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d101      	bne.n	8003e42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e099      	b.n	8003f76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e42:	4b4f      	ldr	r3, [pc, #316]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a4e      	ldr	r2, [pc, #312]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e4e:	f7fc fc45 	bl	80006dc <HAL_GetTick>
 8003e52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e56:	f7fc fc41 	bl	80006dc <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e086      	b.n	8003f76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e68:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e74:	4b42      	ldr	r3, [pc, #264]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	031b      	lsls	r3, r3, #12
 8003e82:	493f      	ldr	r1, [pc, #252]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	628b      	str	r3, [r1, #40]	; 0x28
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	025b      	lsls	r3, r3, #9
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003eb8:	4931      	ldr	r1, [pc, #196]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ebe:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	492d      	ldr	r1, [pc, #180]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f023 0220 	bic.w	r2, r3, #32
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	4928      	ldr	r1, [pc, #160]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ee2:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	4a26      	ldr	r2, [pc, #152]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ee8:	f023 0310 	bic.w	r3, r3, #16
 8003eec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef2:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <RCCEx_PLL2_Config+0x160>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	69d2      	ldr	r2, [r2, #28]
 8003efa:	00d2      	lsls	r2, r2, #3
 8003efc:	4920      	ldr	r1, [pc, #128]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f02:	4b1f      	ldr	r3, [pc, #124]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f08:	f043 0310 	orr.w	r3, r3, #16
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f20:	e00f      	b.n	8003f42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d106      	bne.n	8003f36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f28:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f34:	e005      	b.n	8003f42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	4a11      	ldr	r2, [pc, #68]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f42:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a0e      	ldr	r2, [pc, #56]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f4e:	f7fc fbc5 	bl	80006dc <HAL_GetTick>
 8003f52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f54:	e008      	b.n	8003f68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003f56:	f7fc fbc1 	bl	80006dc <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e006      	b.n	8003f76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	58024400 	.word	0x58024400
 8003f84:	ffff0007 	.word	0xffff0007

08003f88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f96:	4b53      	ldr	r3, [pc, #332]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d101      	bne.n	8003fa6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e099      	b.n	80040da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fa6:	4b4f      	ldr	r3, [pc, #316]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a4e      	ldr	r2, [pc, #312]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb2:	f7fc fb93 	bl	80006dc <HAL_GetTick>
 8003fb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fb8:	e008      	b.n	8003fcc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003fba:	f7fc fb8f 	bl	80006dc <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e086      	b.n	80040da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fcc:	4b45      	ldr	r3, [pc, #276]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fd8:	4b42      	ldr	r3, [pc, #264]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	051b      	lsls	r3, r3, #20
 8003fe6:	493f      	ldr	r1, [pc, #252]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	628b      	str	r3, [r1, #40]	; 0x28
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	025b      	lsls	r3, r3, #9
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	3b01      	subs	r3, #1
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	3b01      	subs	r3, #1
 8004016:	061b      	lsls	r3, r3, #24
 8004018:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800401c:	4931      	ldr	r1, [pc, #196]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800401e:	4313      	orrs	r3, r2
 8004020:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004022:	4b30      	ldr	r3, [pc, #192]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	492d      	ldr	r1, [pc, #180]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004034:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	4928      	ldr	r1, [pc, #160]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004046:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800404c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004050:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <RCCEx_PLL3_Config+0x160>)
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	69d2      	ldr	r2, [r2, #28]
 800405e:	00d2      	lsls	r2, r2, #3
 8004060:	4920      	ldr	r1, [pc, #128]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004062:	4313      	orrs	r3, r2
 8004064:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004066:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800407e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004082:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004084:	e00f      	b.n	80040a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800408c:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004092:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004098:	e005      	b.n	80040a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800409a:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	4a11      	ldr	r2, [pc, #68]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 80040a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040a6:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a0e      	ldr	r2, [pc, #56]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 80040ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b2:	f7fc fb13 	bl	80006dc <HAL_GetTick>
 80040b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040b8:	e008      	b.n	80040cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80040ba:	f7fc fb0f 	bl	80006dc <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e006      	b.n	80040da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	58024400 	.word	0x58024400
 80040e8:	ffff0007 	.word	0xffff0007

080040ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e042      	b.n	8004184 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f003 fd17 	bl	8007b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2224      	movs	r2, #36	; 0x24
 800411a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f82e 	bl	8004190 <UART_SetConfig>
 8004134:	4603      	mov	r3, r0
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e022      	b.n	8004184 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f002 f9a0 	bl	800648c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800415a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800416a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f002 fa27 	bl	80065d0 <UART_CheckIdleState>
 8004182:	4603      	mov	r3, r0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	0000      	movs	r0, r0
	...

08004190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004194:	b090      	sub	sp, #64	; 0x40
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800419a:	2300      	movs	r3, #0
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	4313      	orrs	r3, r2
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041c6:	4313      	orrs	r3, r2
 80041c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4bc1      	ldr	r3, [pc, #772]	; (80044d8 <UART_SetConfig+0x348>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041da:	430b      	orrs	r3, r1
 80041dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4ab7      	ldr	r2, [pc, #732]	; (80044dc <UART_SetConfig+0x34c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800420a:	4313      	orrs	r3, r2
 800420c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	4bb2      	ldr	r3, [pc, #712]	; (80044e0 <UART_SetConfig+0x350>)
 8004216:	4013      	ands	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800421e:	430b      	orrs	r3, r1
 8004220:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	f023 010f 	bic.w	r1, r3, #15
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4aa9      	ldr	r2, [pc, #676]	; (80044e4 <UART_SetConfig+0x354>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d177      	bne.n	8004332 <UART_SetConfig+0x1a2>
 8004242:	4ba9      	ldr	r3, [pc, #676]	; (80044e8 <UART_SetConfig+0x358>)
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800424a:	2b28      	cmp	r3, #40	; 0x28
 800424c:	d86c      	bhi.n	8004328 <UART_SetConfig+0x198>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <UART_SetConfig+0xc4>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	080042f9 	.word	0x080042f9
 8004258:	08004329 	.word	0x08004329
 800425c:	08004329 	.word	0x08004329
 8004260:	08004329 	.word	0x08004329
 8004264:	08004329 	.word	0x08004329
 8004268:	08004329 	.word	0x08004329
 800426c:	08004329 	.word	0x08004329
 8004270:	08004329 	.word	0x08004329
 8004274:	08004301 	.word	0x08004301
 8004278:	08004329 	.word	0x08004329
 800427c:	08004329 	.word	0x08004329
 8004280:	08004329 	.word	0x08004329
 8004284:	08004329 	.word	0x08004329
 8004288:	08004329 	.word	0x08004329
 800428c:	08004329 	.word	0x08004329
 8004290:	08004329 	.word	0x08004329
 8004294:	08004309 	.word	0x08004309
 8004298:	08004329 	.word	0x08004329
 800429c:	08004329 	.word	0x08004329
 80042a0:	08004329 	.word	0x08004329
 80042a4:	08004329 	.word	0x08004329
 80042a8:	08004329 	.word	0x08004329
 80042ac:	08004329 	.word	0x08004329
 80042b0:	08004329 	.word	0x08004329
 80042b4:	08004311 	.word	0x08004311
 80042b8:	08004329 	.word	0x08004329
 80042bc:	08004329 	.word	0x08004329
 80042c0:	08004329 	.word	0x08004329
 80042c4:	08004329 	.word	0x08004329
 80042c8:	08004329 	.word	0x08004329
 80042cc:	08004329 	.word	0x08004329
 80042d0:	08004329 	.word	0x08004329
 80042d4:	08004319 	.word	0x08004319
 80042d8:	08004329 	.word	0x08004329
 80042dc:	08004329 	.word	0x08004329
 80042e0:	08004329 	.word	0x08004329
 80042e4:	08004329 	.word	0x08004329
 80042e8:	08004329 	.word	0x08004329
 80042ec:	08004329 	.word	0x08004329
 80042f0:	08004329 	.word	0x08004329
 80042f4:	08004321 	.word	0x08004321
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042fe:	e233      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004300:	2304      	movs	r3, #4
 8004302:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004306:	e22f      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004308:	2308      	movs	r3, #8
 800430a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800430e:	e22b      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004310:	2310      	movs	r3, #16
 8004312:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004316:	e227      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004318:	2320      	movs	r3, #32
 800431a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800431e:	e223      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004320:	2340      	movs	r3, #64	; 0x40
 8004322:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004326:	e21f      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800432e:	bf00      	nop
 8004330:	e21a      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6d      	ldr	r2, [pc, #436]	; (80044ec <UART_SetConfig+0x35c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d132      	bne.n	80043a2 <UART_SetConfig+0x212>
 800433c:	4b6a      	ldr	r3, [pc, #424]	; (80044e8 <UART_SetConfig+0x358>)
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	2b05      	cmp	r3, #5
 8004346:	d827      	bhi.n	8004398 <UART_SetConfig+0x208>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <UART_SetConfig+0x1c0>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004369 	.word	0x08004369
 8004354:	08004371 	.word	0x08004371
 8004358:	08004379 	.word	0x08004379
 800435c:	08004381 	.word	0x08004381
 8004360:	08004389 	.word	0x08004389
 8004364:	08004391 	.word	0x08004391
 8004368:	2300      	movs	r3, #0
 800436a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800436e:	e1fb      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004370:	2304      	movs	r3, #4
 8004372:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004376:	e1f7      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004378:	2308      	movs	r3, #8
 800437a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800437e:	e1f3      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004380:	2310      	movs	r3, #16
 8004382:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004386:	e1ef      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004388:	2320      	movs	r3, #32
 800438a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800438e:	e1eb      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004390:	2340      	movs	r3, #64	; 0x40
 8004392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004396:	e1e7      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800439e:	bf00      	nop
 80043a0:	e1e2      	b.n	8004768 <UART_SetConfig+0x5d8>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <UART_SetConfig+0x360>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d132      	bne.n	8004412 <UART_SetConfig+0x282>
 80043ac:	4b4e      	ldr	r3, [pc, #312]	; (80044e8 <UART_SetConfig+0x358>)
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	d827      	bhi.n	8004408 <UART_SetConfig+0x278>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0x230>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043d9 	.word	0x080043d9
 80043c4:	080043e1 	.word	0x080043e1
 80043c8:	080043e9 	.word	0x080043e9
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	2300      	movs	r3, #0
 80043da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043de:	e1c3      	b.n	8004768 <UART_SetConfig+0x5d8>
 80043e0:	2304      	movs	r3, #4
 80043e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043e6:	e1bf      	b.n	8004768 <UART_SetConfig+0x5d8>
 80043e8:	2308      	movs	r3, #8
 80043ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043ee:	e1bb      	b.n	8004768 <UART_SetConfig+0x5d8>
 80043f0:	2310      	movs	r3, #16
 80043f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043f6:	e1b7      	b.n	8004768 <UART_SetConfig+0x5d8>
 80043f8:	2320      	movs	r3, #32
 80043fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043fe:	e1b3      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004406:	e1af      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800440e:	bf00      	nop
 8004410:	e1aa      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a37      	ldr	r2, [pc, #220]	; (80044f4 <UART_SetConfig+0x364>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d132      	bne.n	8004482 <UART_SetConfig+0x2f2>
 800441c:	4b32      	ldr	r3, [pc, #200]	; (80044e8 <UART_SetConfig+0x358>)
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	2b05      	cmp	r3, #5
 8004426:	d827      	bhi.n	8004478 <UART_SetConfig+0x2e8>
 8004428:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <UART_SetConfig+0x2a0>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004449 	.word	0x08004449
 8004434:	08004451 	.word	0x08004451
 8004438:	08004459 	.word	0x08004459
 800443c:	08004461 	.word	0x08004461
 8004440:	08004469 	.word	0x08004469
 8004444:	08004471 	.word	0x08004471
 8004448:	2300      	movs	r3, #0
 800444a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800444e:	e18b      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004450:	2304      	movs	r3, #4
 8004452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004456:	e187      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004458:	2308      	movs	r3, #8
 800445a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800445e:	e183      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004460:	2310      	movs	r3, #16
 8004462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004466:	e17f      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004468:	2320      	movs	r3, #32
 800446a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800446e:	e17b      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004470:	2340      	movs	r3, #64	; 0x40
 8004472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004476:	e177      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800447e:	bf00      	nop
 8004480:	e172      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1c      	ldr	r2, [pc, #112]	; (80044f8 <UART_SetConfig+0x368>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d144      	bne.n	8004516 <UART_SetConfig+0x386>
 800448c:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <UART_SetConfig+0x358>)
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	2b05      	cmp	r3, #5
 8004496:	d839      	bhi.n	800450c <UART_SetConfig+0x37c>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0x310>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044b9 	.word	0x080044b9
 80044a4:	080044c1 	.word	0x080044c1
 80044a8:	080044c9 	.word	0x080044c9
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044fd 	.word	0x080044fd
 80044b4:	08004505 	.word	0x08004505
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044be:	e153      	b.n	8004768 <UART_SetConfig+0x5d8>
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044c6:	e14f      	b.n	8004768 <UART_SetConfig+0x5d8>
 80044c8:	2308      	movs	r3, #8
 80044ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044ce:	e14b      	b.n	8004768 <UART_SetConfig+0x5d8>
 80044d0:	2310      	movs	r3, #16
 80044d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044d6:	e147      	b.n	8004768 <UART_SetConfig+0x5d8>
 80044d8:	cfff69f3 	.word	0xcfff69f3
 80044dc:	58000c00 	.word	0x58000c00
 80044e0:	11fff4ff 	.word	0x11fff4ff
 80044e4:	40011000 	.word	0x40011000
 80044e8:	58024400 	.word	0x58024400
 80044ec:	40004400 	.word	0x40004400
 80044f0:	40004800 	.word	0x40004800
 80044f4:	40004c00 	.word	0x40004c00
 80044f8:	40005000 	.word	0x40005000
 80044fc:	2320      	movs	r3, #32
 80044fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004502:	e131      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004504:	2340      	movs	r3, #64	; 0x40
 8004506:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800450a:	e12d      	b.n	8004768 <UART_SetConfig+0x5d8>
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004512:	bf00      	nop
 8004514:	e128      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4ac3      	ldr	r2, [pc, #780]	; (8004828 <UART_SetConfig+0x698>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d178      	bne.n	8004612 <UART_SetConfig+0x482>
 8004520:	4bc2      	ldr	r3, [pc, #776]	; (800482c <UART_SetConfig+0x69c>)
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004528:	2b28      	cmp	r3, #40	; 0x28
 800452a:	d86d      	bhi.n	8004608 <UART_SetConfig+0x478>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <UART_SetConfig+0x3a4>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	080045d9 	.word	0x080045d9
 8004538:	08004609 	.word	0x08004609
 800453c:	08004609 	.word	0x08004609
 8004540:	08004609 	.word	0x08004609
 8004544:	08004609 	.word	0x08004609
 8004548:	08004609 	.word	0x08004609
 800454c:	08004609 	.word	0x08004609
 8004550:	08004609 	.word	0x08004609
 8004554:	080045e1 	.word	0x080045e1
 8004558:	08004609 	.word	0x08004609
 800455c:	08004609 	.word	0x08004609
 8004560:	08004609 	.word	0x08004609
 8004564:	08004609 	.word	0x08004609
 8004568:	08004609 	.word	0x08004609
 800456c:	08004609 	.word	0x08004609
 8004570:	08004609 	.word	0x08004609
 8004574:	080045e9 	.word	0x080045e9
 8004578:	08004609 	.word	0x08004609
 800457c:	08004609 	.word	0x08004609
 8004580:	08004609 	.word	0x08004609
 8004584:	08004609 	.word	0x08004609
 8004588:	08004609 	.word	0x08004609
 800458c:	08004609 	.word	0x08004609
 8004590:	08004609 	.word	0x08004609
 8004594:	080045f1 	.word	0x080045f1
 8004598:	08004609 	.word	0x08004609
 800459c:	08004609 	.word	0x08004609
 80045a0:	08004609 	.word	0x08004609
 80045a4:	08004609 	.word	0x08004609
 80045a8:	08004609 	.word	0x08004609
 80045ac:	08004609 	.word	0x08004609
 80045b0:	08004609 	.word	0x08004609
 80045b4:	080045f9 	.word	0x080045f9
 80045b8:	08004609 	.word	0x08004609
 80045bc:	08004609 	.word	0x08004609
 80045c0:	08004609 	.word	0x08004609
 80045c4:	08004609 	.word	0x08004609
 80045c8:	08004609 	.word	0x08004609
 80045cc:	08004609 	.word	0x08004609
 80045d0:	08004609 	.word	0x08004609
 80045d4:	08004601 	.word	0x08004601
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045de:	e0c3      	b.n	8004768 <UART_SetConfig+0x5d8>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045e6:	e0bf      	b.n	8004768 <UART_SetConfig+0x5d8>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045ee:	e0bb      	b.n	8004768 <UART_SetConfig+0x5d8>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045f6:	e0b7      	b.n	8004768 <UART_SetConfig+0x5d8>
 80045f8:	2320      	movs	r3, #32
 80045fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045fe:	e0b3      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004600:	2340      	movs	r3, #64	; 0x40
 8004602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004606:	e0af      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800460e:	bf00      	nop
 8004610:	e0aa      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a86      	ldr	r2, [pc, #536]	; (8004830 <UART_SetConfig+0x6a0>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d132      	bne.n	8004682 <UART_SetConfig+0x4f2>
 800461c:	4b83      	ldr	r3, [pc, #524]	; (800482c <UART_SetConfig+0x69c>)
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	2b05      	cmp	r3, #5
 8004626:	d827      	bhi.n	8004678 <UART_SetConfig+0x4e8>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <UART_SetConfig+0x4a0>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004649 	.word	0x08004649
 8004634:	08004651 	.word	0x08004651
 8004638:	08004659 	.word	0x08004659
 800463c:	08004661 	.word	0x08004661
 8004640:	08004669 	.word	0x08004669
 8004644:	08004671 	.word	0x08004671
 8004648:	2300      	movs	r3, #0
 800464a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800464e:	e08b      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004650:	2304      	movs	r3, #4
 8004652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004656:	e087      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004658:	2308      	movs	r3, #8
 800465a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800465e:	e083      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004660:	2310      	movs	r3, #16
 8004662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004666:	e07f      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004668:	2320      	movs	r3, #32
 800466a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800466e:	e07b      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004670:	2340      	movs	r3, #64	; 0x40
 8004672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004676:	e077      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800467e:	bf00      	nop
 8004680:	e072      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6b      	ldr	r2, [pc, #428]	; (8004834 <UART_SetConfig+0x6a4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d132      	bne.n	80046f2 <UART_SetConfig+0x562>
 800468c:	4b67      	ldr	r3, [pc, #412]	; (800482c <UART_SetConfig+0x69c>)
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	2b05      	cmp	r3, #5
 8004696:	d827      	bhi.n	80046e8 <UART_SetConfig+0x558>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <UART_SetConfig+0x510>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046b9 	.word	0x080046b9
 80046a4:	080046c1 	.word	0x080046c1
 80046a8:	080046c9 	.word	0x080046c9
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046d9 	.word	0x080046d9
 80046b4:	080046e1 	.word	0x080046e1
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046be:	e053      	b.n	8004768 <UART_SetConfig+0x5d8>
 80046c0:	2304      	movs	r3, #4
 80046c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046c6:	e04f      	b.n	8004768 <UART_SetConfig+0x5d8>
 80046c8:	2308      	movs	r3, #8
 80046ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046ce:	e04b      	b.n	8004768 <UART_SetConfig+0x5d8>
 80046d0:	2310      	movs	r3, #16
 80046d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046d6:	e047      	b.n	8004768 <UART_SetConfig+0x5d8>
 80046d8:	2320      	movs	r3, #32
 80046da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046de:	e043      	b.n	8004768 <UART_SetConfig+0x5d8>
 80046e0:	2340      	movs	r3, #64	; 0x40
 80046e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046e6:	e03f      	b.n	8004768 <UART_SetConfig+0x5d8>
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046ee:	bf00      	nop
 80046f0:	e03a      	b.n	8004768 <UART_SetConfig+0x5d8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a50      	ldr	r2, [pc, #320]	; (8004838 <UART_SetConfig+0x6a8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d132      	bne.n	8004762 <UART_SetConfig+0x5d2>
 80046fc:	4b4b      	ldr	r3, [pc, #300]	; (800482c <UART_SetConfig+0x69c>)
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	2b05      	cmp	r3, #5
 8004706:	d827      	bhi.n	8004758 <UART_SetConfig+0x5c8>
 8004708:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <UART_SetConfig+0x580>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004729 	.word	0x08004729
 8004714:	08004731 	.word	0x08004731
 8004718:	08004739 	.word	0x08004739
 800471c:	08004741 	.word	0x08004741
 8004720:	08004749 	.word	0x08004749
 8004724:	08004751 	.word	0x08004751
 8004728:	2302      	movs	r3, #2
 800472a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800472e:	e01b      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004730:	2304      	movs	r3, #4
 8004732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004736:	e017      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004738:	2308      	movs	r3, #8
 800473a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800473e:	e013      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004740:	2310      	movs	r3, #16
 8004742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004746:	e00f      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004748:	2320      	movs	r3, #32
 800474a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800474e:	e00b      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004750:	2340      	movs	r3, #64	; 0x40
 8004752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004756:	e007      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800475e:	bf00      	nop
 8004760:	e002      	b.n	8004768 <UART_SetConfig+0x5d8>
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a32      	ldr	r2, [pc, #200]	; (8004838 <UART_SetConfig+0x6a8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	f040 86f7 	bne.w	8005562 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004774:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004778:	2b08      	cmp	r3, #8
 800477a:	f000 80c0 	beq.w	80048fe <UART_SetConfig+0x76e>
 800477e:	2b08      	cmp	r3, #8
 8004780:	dc04      	bgt.n	800478c <UART_SetConfig+0x5fc>
 8004782:	2b02      	cmp	r3, #2
 8004784:	d00c      	beq.n	80047a0 <UART_SetConfig+0x610>
 8004786:	2b04      	cmp	r3, #4
 8004788:	d065      	beq.n	8004856 <UART_SetConfig+0x6c6>
 800478a:	e27a      	b.n	8004c82 <UART_SetConfig+0xaf2>
 800478c:	2b20      	cmp	r3, #32
 800478e:	f000 81b0 	beq.w	8004af2 <UART_SetConfig+0x962>
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	f000 821e 	beq.w	8004bd4 <UART_SetConfig+0xa44>
 8004798:	2b10      	cmp	r3, #16
 800479a:	f000 8104 	beq.w	80049a6 <UART_SetConfig+0x816>
 800479e:	e270      	b.n	8004c82 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80047a0:	f7ff f876 	bl	8003890 <HAL_RCCEx_GetD3PCLK1Freq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d04e      	beq.n	800484c <UART_SetConfig+0x6bc>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d048      	beq.n	8004848 <UART_SetConfig+0x6b8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d042      	beq.n	8004844 <UART_SetConfig+0x6b4>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d03c      	beq.n	8004840 <UART_SetConfig+0x6b0>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d036      	beq.n	800483c <UART_SetConfig+0x6ac>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	d026      	beq.n	8004824 <UART_SetConfig+0x694>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	2b06      	cmp	r3, #6
 80047dc:	d020      	beq.n	8004820 <UART_SetConfig+0x690>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	2b07      	cmp	r3, #7
 80047e4:	d01a      	beq.n	800481c <UART_SetConfig+0x68c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d014      	beq.n	8004818 <UART_SetConfig+0x688>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2b09      	cmp	r3, #9
 80047f4:	d00e      	beq.n	8004814 <UART_SetConfig+0x684>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	2b0a      	cmp	r3, #10
 80047fc:	d008      	beq.n	8004810 <UART_SetConfig+0x680>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	2b0b      	cmp	r3, #11
 8004804:	d102      	bne.n	800480c <UART_SetConfig+0x67c>
 8004806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800480a:	e020      	b.n	800484e <UART_SetConfig+0x6be>
 800480c:	2301      	movs	r3, #1
 800480e:	e01e      	b.n	800484e <UART_SetConfig+0x6be>
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	e01c      	b.n	800484e <UART_SetConfig+0x6be>
 8004814:	2340      	movs	r3, #64	; 0x40
 8004816:	e01a      	b.n	800484e <UART_SetConfig+0x6be>
 8004818:	2320      	movs	r3, #32
 800481a:	e018      	b.n	800484e <UART_SetConfig+0x6be>
 800481c:	2310      	movs	r3, #16
 800481e:	e016      	b.n	800484e <UART_SetConfig+0x6be>
 8004820:	230c      	movs	r3, #12
 8004822:	e014      	b.n	800484e <UART_SetConfig+0x6be>
 8004824:	230a      	movs	r3, #10
 8004826:	e012      	b.n	800484e <UART_SetConfig+0x6be>
 8004828:	40011400 	.word	0x40011400
 800482c:	58024400 	.word	0x58024400
 8004830:	40007800 	.word	0x40007800
 8004834:	40007c00 	.word	0x40007c00
 8004838:	58000c00 	.word	0x58000c00
 800483c:	2308      	movs	r3, #8
 800483e:	e006      	b.n	800484e <UART_SetConfig+0x6be>
 8004840:	2306      	movs	r3, #6
 8004842:	e004      	b.n	800484e <UART_SetConfig+0x6be>
 8004844:	2304      	movs	r3, #4
 8004846:	e002      	b.n	800484e <UART_SetConfig+0x6be>
 8004848:	2302      	movs	r3, #2
 800484a:	e000      	b.n	800484e <UART_SetConfig+0x6be>
 800484c:	2301      	movs	r3, #1
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004854:	e219      	b.n	8004c8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004856:	f107 0318 	add.w	r3, r7, #24
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff f82e 	bl	80038bc <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b00      	cmp	r3, #0
 8004868:	d044      	beq.n	80048f4 <UART_SetConfig+0x764>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b01      	cmp	r3, #1
 8004870:	d03e      	beq.n	80048f0 <UART_SetConfig+0x760>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2b02      	cmp	r3, #2
 8004878:	d038      	beq.n	80048ec <UART_SetConfig+0x75c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b03      	cmp	r3, #3
 8004880:	d032      	beq.n	80048e8 <UART_SetConfig+0x758>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b04      	cmp	r3, #4
 8004888:	d02c      	beq.n	80048e4 <UART_SetConfig+0x754>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b05      	cmp	r3, #5
 8004890:	d026      	beq.n	80048e0 <UART_SetConfig+0x750>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2b06      	cmp	r3, #6
 8004898:	d020      	beq.n	80048dc <UART_SetConfig+0x74c>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	2b07      	cmp	r3, #7
 80048a0:	d01a      	beq.n	80048d8 <UART_SetConfig+0x748>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d014      	beq.n	80048d4 <UART_SetConfig+0x744>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	2b09      	cmp	r3, #9
 80048b0:	d00e      	beq.n	80048d0 <UART_SetConfig+0x740>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b0a      	cmp	r3, #10
 80048b8:	d008      	beq.n	80048cc <UART_SetConfig+0x73c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b0b      	cmp	r3, #11
 80048c0:	d102      	bne.n	80048c8 <UART_SetConfig+0x738>
 80048c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048c6:	e016      	b.n	80048f6 <UART_SetConfig+0x766>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e014      	b.n	80048f6 <UART_SetConfig+0x766>
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	e012      	b.n	80048f6 <UART_SetConfig+0x766>
 80048d0:	2340      	movs	r3, #64	; 0x40
 80048d2:	e010      	b.n	80048f6 <UART_SetConfig+0x766>
 80048d4:	2320      	movs	r3, #32
 80048d6:	e00e      	b.n	80048f6 <UART_SetConfig+0x766>
 80048d8:	2310      	movs	r3, #16
 80048da:	e00c      	b.n	80048f6 <UART_SetConfig+0x766>
 80048dc:	230c      	movs	r3, #12
 80048de:	e00a      	b.n	80048f6 <UART_SetConfig+0x766>
 80048e0:	230a      	movs	r3, #10
 80048e2:	e008      	b.n	80048f6 <UART_SetConfig+0x766>
 80048e4:	2308      	movs	r3, #8
 80048e6:	e006      	b.n	80048f6 <UART_SetConfig+0x766>
 80048e8:	2306      	movs	r3, #6
 80048ea:	e004      	b.n	80048f6 <UART_SetConfig+0x766>
 80048ec:	2304      	movs	r3, #4
 80048ee:	e002      	b.n	80048f6 <UART_SetConfig+0x766>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e000      	b.n	80048f6 <UART_SetConfig+0x766>
 80048f4:	2301      	movs	r3, #1
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048fc:	e1c5      	b.n	8004c8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048fe:	f107 030c 	add.w	r3, r7, #12
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff f926 	bl	8003b54 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2b00      	cmp	r3, #0
 8004910:	d044      	beq.n	800499c <UART_SetConfig+0x80c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b01      	cmp	r3, #1
 8004918:	d03e      	beq.n	8004998 <UART_SetConfig+0x808>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	2b02      	cmp	r3, #2
 8004920:	d038      	beq.n	8004994 <UART_SetConfig+0x804>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	2b03      	cmp	r3, #3
 8004928:	d032      	beq.n	8004990 <UART_SetConfig+0x800>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b04      	cmp	r3, #4
 8004930:	d02c      	beq.n	800498c <UART_SetConfig+0x7fc>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	2b05      	cmp	r3, #5
 8004938:	d026      	beq.n	8004988 <UART_SetConfig+0x7f8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	2b06      	cmp	r3, #6
 8004940:	d020      	beq.n	8004984 <UART_SetConfig+0x7f4>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	2b07      	cmp	r3, #7
 8004948:	d01a      	beq.n	8004980 <UART_SetConfig+0x7f0>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2b08      	cmp	r3, #8
 8004950:	d014      	beq.n	800497c <UART_SetConfig+0x7ec>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	2b09      	cmp	r3, #9
 8004958:	d00e      	beq.n	8004978 <UART_SetConfig+0x7e8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	2b0a      	cmp	r3, #10
 8004960:	d008      	beq.n	8004974 <UART_SetConfig+0x7e4>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b0b      	cmp	r3, #11
 8004968:	d102      	bne.n	8004970 <UART_SetConfig+0x7e0>
 800496a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800496e:	e016      	b.n	800499e <UART_SetConfig+0x80e>
 8004970:	2301      	movs	r3, #1
 8004972:	e014      	b.n	800499e <UART_SetConfig+0x80e>
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	e012      	b.n	800499e <UART_SetConfig+0x80e>
 8004978:	2340      	movs	r3, #64	; 0x40
 800497a:	e010      	b.n	800499e <UART_SetConfig+0x80e>
 800497c:	2320      	movs	r3, #32
 800497e:	e00e      	b.n	800499e <UART_SetConfig+0x80e>
 8004980:	2310      	movs	r3, #16
 8004982:	e00c      	b.n	800499e <UART_SetConfig+0x80e>
 8004984:	230c      	movs	r3, #12
 8004986:	e00a      	b.n	800499e <UART_SetConfig+0x80e>
 8004988:	230a      	movs	r3, #10
 800498a:	e008      	b.n	800499e <UART_SetConfig+0x80e>
 800498c:	2308      	movs	r3, #8
 800498e:	e006      	b.n	800499e <UART_SetConfig+0x80e>
 8004990:	2306      	movs	r3, #6
 8004992:	e004      	b.n	800499e <UART_SetConfig+0x80e>
 8004994:	2304      	movs	r3, #4
 8004996:	e002      	b.n	800499e <UART_SetConfig+0x80e>
 8004998:	2302      	movs	r3, #2
 800499a:	e000      	b.n	800499e <UART_SetConfig+0x80e>
 800499c:	2301      	movs	r3, #1
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049a4:	e171      	b.n	8004c8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a6:	4b7a      	ldr	r3, [pc, #488]	; (8004b90 <UART_SetConfig+0xa00>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d054      	beq.n	8004a5c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80049b2:	4b77      	ldr	r3, [pc, #476]	; (8004b90 <UART_SetConfig+0xa00>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	08db      	lsrs	r3, r3, #3
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	4a75      	ldr	r2, [pc, #468]	; (8004b94 <UART_SetConfig+0xa04>)
 80049be:	40da      	lsrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d044      	beq.n	8004a52 <UART_SetConfig+0x8c2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d03e      	beq.n	8004a4e <UART_SetConfig+0x8be>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d038      	beq.n	8004a4a <UART_SetConfig+0x8ba>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d032      	beq.n	8004a46 <UART_SetConfig+0x8b6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d02c      	beq.n	8004a42 <UART_SetConfig+0x8b2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d026      	beq.n	8004a3e <UART_SetConfig+0x8ae>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d020      	beq.n	8004a3a <UART_SetConfig+0x8aa>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2b07      	cmp	r3, #7
 80049fe:	d01a      	beq.n	8004a36 <UART_SetConfig+0x8a6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d014      	beq.n	8004a32 <UART_SetConfig+0x8a2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	2b09      	cmp	r3, #9
 8004a0e:	d00e      	beq.n	8004a2e <UART_SetConfig+0x89e>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b0a      	cmp	r3, #10
 8004a16:	d008      	beq.n	8004a2a <UART_SetConfig+0x89a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2b0b      	cmp	r3, #11
 8004a1e:	d102      	bne.n	8004a26 <UART_SetConfig+0x896>
 8004a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a24:	e016      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e014      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	e012      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a2e:	2340      	movs	r3, #64	; 0x40
 8004a30:	e010      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a32:	2320      	movs	r3, #32
 8004a34:	e00e      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a36:	2310      	movs	r3, #16
 8004a38:	e00c      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a3a:	230c      	movs	r3, #12
 8004a3c:	e00a      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a3e:	230a      	movs	r3, #10
 8004a40:	e008      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a42:	2308      	movs	r3, #8
 8004a44:	e006      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a46:	2306      	movs	r3, #6
 8004a48:	e004      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	e002      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e000      	b.n	8004a54 <UART_SetConfig+0x8c4>
 8004a52:	2301      	movs	r3, #1
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8004a5a:	e116      	b.n	8004c8a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d043      	beq.n	8004aec <UART_SetConfig+0x95c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d03d      	beq.n	8004ae8 <UART_SetConfig+0x958>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d037      	beq.n	8004ae4 <UART_SetConfig+0x954>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d031      	beq.n	8004ae0 <UART_SetConfig+0x950>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d02b      	beq.n	8004adc <UART_SetConfig+0x94c>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	2b05      	cmp	r3, #5
 8004a8a:	d025      	beq.n	8004ad8 <UART_SetConfig+0x948>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	2b06      	cmp	r3, #6
 8004a92:	d01f      	beq.n	8004ad4 <UART_SetConfig+0x944>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b07      	cmp	r3, #7
 8004a9a:	d019      	beq.n	8004ad0 <UART_SetConfig+0x940>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d013      	beq.n	8004acc <UART_SetConfig+0x93c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2b09      	cmp	r3, #9
 8004aaa:	d00d      	beq.n	8004ac8 <UART_SetConfig+0x938>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	2b0a      	cmp	r3, #10
 8004ab2:	d007      	beq.n	8004ac4 <UART_SetConfig+0x934>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	2b0b      	cmp	r3, #11
 8004aba:	d101      	bne.n	8004ac0 <UART_SetConfig+0x930>
 8004abc:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <UART_SetConfig+0xa08>)
 8004abe:	e016      	b.n	8004aee <UART_SetConfig+0x95e>
 8004ac0:	4b34      	ldr	r3, [pc, #208]	; (8004b94 <UART_SetConfig+0xa04>)
 8004ac2:	e014      	b.n	8004aee <UART_SetConfig+0x95e>
 8004ac4:	4b35      	ldr	r3, [pc, #212]	; (8004b9c <UART_SetConfig+0xa0c>)
 8004ac6:	e012      	b.n	8004aee <UART_SetConfig+0x95e>
 8004ac8:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <UART_SetConfig+0xa10>)
 8004aca:	e010      	b.n	8004aee <UART_SetConfig+0x95e>
 8004acc:	4b35      	ldr	r3, [pc, #212]	; (8004ba4 <UART_SetConfig+0xa14>)
 8004ace:	e00e      	b.n	8004aee <UART_SetConfig+0x95e>
 8004ad0:	4b35      	ldr	r3, [pc, #212]	; (8004ba8 <UART_SetConfig+0xa18>)
 8004ad2:	e00c      	b.n	8004aee <UART_SetConfig+0x95e>
 8004ad4:	4b35      	ldr	r3, [pc, #212]	; (8004bac <UART_SetConfig+0xa1c>)
 8004ad6:	e00a      	b.n	8004aee <UART_SetConfig+0x95e>
 8004ad8:	4b35      	ldr	r3, [pc, #212]	; (8004bb0 <UART_SetConfig+0xa20>)
 8004ada:	e008      	b.n	8004aee <UART_SetConfig+0x95e>
 8004adc:	4b35      	ldr	r3, [pc, #212]	; (8004bb4 <UART_SetConfig+0xa24>)
 8004ade:	e006      	b.n	8004aee <UART_SetConfig+0x95e>
 8004ae0:	4b35      	ldr	r3, [pc, #212]	; (8004bb8 <UART_SetConfig+0xa28>)
 8004ae2:	e004      	b.n	8004aee <UART_SetConfig+0x95e>
 8004ae4:	4b35      	ldr	r3, [pc, #212]	; (8004bbc <UART_SetConfig+0xa2c>)
 8004ae6:	e002      	b.n	8004aee <UART_SetConfig+0x95e>
 8004ae8:	4b35      	ldr	r3, [pc, #212]	; (8004bc0 <UART_SetConfig+0xa30>)
 8004aea:	e000      	b.n	8004aee <UART_SetConfig+0x95e>
 8004aec:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <UART_SetConfig+0xa04>)
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004af0:	e0cb      	b.n	8004c8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d046      	beq.n	8004b88 <UART_SetConfig+0x9f8>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d040      	beq.n	8004b84 <UART_SetConfig+0x9f4>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d03a      	beq.n	8004b80 <UART_SetConfig+0x9f0>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d034      	beq.n	8004b7c <UART_SetConfig+0x9ec>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d02e      	beq.n	8004b78 <UART_SetConfig+0x9e8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	d028      	beq.n	8004b74 <UART_SetConfig+0x9e4>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b06      	cmp	r3, #6
 8004b28:	d022      	beq.n	8004b70 <UART_SetConfig+0x9e0>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	2b07      	cmp	r3, #7
 8004b30:	d01c      	beq.n	8004b6c <UART_SetConfig+0x9dc>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d016      	beq.n	8004b68 <UART_SetConfig+0x9d8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2b09      	cmp	r3, #9
 8004b40:	d00f      	beq.n	8004b62 <UART_SetConfig+0x9d2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	2b0a      	cmp	r3, #10
 8004b48:	d008      	beq.n	8004b5c <UART_SetConfig+0x9cc>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	2b0b      	cmp	r3, #11
 8004b50:	d102      	bne.n	8004b58 <UART_SetConfig+0x9c8>
 8004b52:	f643 5309 	movw	r3, #15625	; 0x3d09
 8004b56:	e018      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b58:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <UART_SetConfig+0xa18>)
 8004b5a:	e016      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b5c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004b60:	e013      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b62:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004b66:	e010      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b68:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <UART_SetConfig+0xa34>)
 8004b6a:	e00e      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <UART_SetConfig+0xa08>)
 8004b6e:	e00c      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b70:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <UART_SetConfig+0xa38>)
 8004b72:	e00a      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b74:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <UART_SetConfig+0xa3c>)
 8004b76:	e008      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b78:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <UART_SetConfig+0xa0c>)
 8004b7a:	e006      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b7c:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <UART_SetConfig+0xa40>)
 8004b7e:	e004      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <UART_SetConfig+0xa10>)
 8004b82:	e002      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b84:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <UART_SetConfig+0xa14>)
 8004b86:	e000      	b.n	8004b8a <UART_SetConfig+0x9fa>
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <UART_SetConfig+0xa18>)
 8004b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b8c:	e07d      	b.n	8004c8a <UART_SetConfig+0xafa>
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400
 8004b94:	03d09000 	.word	0x03d09000
 8004b98:	0003d090 	.word	0x0003d090
 8004b9c:	0007a120 	.word	0x0007a120
 8004ba0:	000f4240 	.word	0x000f4240
 8004ba4:	001e8480 	.word	0x001e8480
 8004ba8:	003d0900 	.word	0x003d0900
 8004bac:	00516155 	.word	0x00516155
 8004bb0:	0061a800 	.word	0x0061a800
 8004bb4:	007a1200 	.word	0x007a1200
 8004bb8:	00a2c2aa 	.word	0x00a2c2aa
 8004bbc:	00f42400 	.word	0x00f42400
 8004bc0:	01e84800 	.word	0x01e84800
 8004bc4:	0001e848 	.word	0x0001e848
 8004bc8:	00051615 	.word	0x00051615
 8004bcc:	00061a80 	.word	0x00061a80
 8004bd0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d04e      	beq.n	8004c7a <UART_SetConfig+0xaea>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d047      	beq.n	8004c74 <UART_SetConfig+0xae4>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d040      	beq.n	8004c6e <UART_SetConfig+0xade>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d039      	beq.n	8004c68 <UART_SetConfig+0xad8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d032      	beq.n	8004c62 <UART_SetConfig+0xad2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	d02b      	beq.n	8004c5c <UART_SetConfig+0xacc>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2b06      	cmp	r3, #6
 8004c0a:	d024      	beq.n	8004c56 <UART_SetConfig+0xac6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b07      	cmp	r3, #7
 8004c12:	d01d      	beq.n	8004c50 <UART_SetConfig+0xac0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d016      	beq.n	8004c4a <UART_SetConfig+0xaba>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b09      	cmp	r3, #9
 8004c22:	d00f      	beq.n	8004c44 <UART_SetConfig+0xab4>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2b0a      	cmp	r3, #10
 8004c2a:	d008      	beq.n	8004c3e <UART_SetConfig+0xaae>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2b0b      	cmp	r3, #11
 8004c32:	d101      	bne.n	8004c38 <UART_SetConfig+0xaa8>
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	e022      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3c:	e01f      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c42:	e01c      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c48:	e019      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c4e:	e016      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c54:	e013      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c56:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004c5a:	e010      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c5c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004c60:	e00d      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c66:	e00a      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c68:	f241 5355 	movw	r3, #5461	; 0x1555
 8004c6c:	e007      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c72:	e004      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c78:	e001      	b.n	8004c7e <UART_SetConfig+0xaee>
 8004c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c80:	e003      	b.n	8004c8a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8004c88:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f001 83e8 	beq.w	8006462 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d305      	bcc.n	8004cae <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d904      	bls.n	8004cb8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cb4:	f001 bbd5 	b.w	8006462 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8004cb8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	f000 8154 	beq.w	8004f6a <UART_SetConfig+0xdda>
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	dc06      	bgt.n	8004cd4 <UART_SetConfig+0xb44>
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d00f      	beq.n	8004cea <UART_SetConfig+0xb5a>
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	f000 80ac 	beq.w	8004e28 <UART_SetConfig+0xc98>
 8004cd0:	f000 bc30 	b.w	8005534 <UART_SetConfig+0x13a4>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	f000 832d 	beq.w	8005334 <UART_SetConfig+0x11a4>
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	f000 83a5 	beq.w	800542a <UART_SetConfig+0x129a>
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	f000 81e3 	beq.w	80050ac <UART_SetConfig+0xf1c>
 8004ce6:	f000 bc25 	b.w	8005534 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004cea:	f7fe fdd1 	bl	8003890 <HAL_RCCEx_GetD3PCLK1Freq>
 8004cee:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f04f 0100 	mov.w	r1, #0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d067      	beq.n	8004dd0 <UART_SetConfig+0xc40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d05e      	beq.n	8004dc6 <UART_SetConfig+0xc36>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d055      	beq.n	8004dbc <UART_SetConfig+0xc2c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d04c      	beq.n	8004db2 <UART_SetConfig+0xc22>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d043      	beq.n	8004da8 <UART_SetConfig+0xc18>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	2b05      	cmp	r3, #5
 8004d26:	d03a      	beq.n	8004d9e <UART_SetConfig+0xc0e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2b06      	cmp	r3, #6
 8004d2e:	d031      	beq.n	8004d94 <UART_SetConfig+0xc04>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b07      	cmp	r3, #7
 8004d36:	d028      	beq.n	8004d8a <UART_SetConfig+0xbfa>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d01f      	beq.n	8004d80 <UART_SetConfig+0xbf0>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2b09      	cmp	r3, #9
 8004d46:	d016      	beq.n	8004d76 <UART_SetConfig+0xbe6>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2b0a      	cmp	r3, #10
 8004d4e:	d00d      	beq.n	8004d6c <UART_SetConfig+0xbdc>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b0b      	cmp	r3, #11
 8004d56:	d104      	bne.n	8004d62 <UART_SetConfig+0xbd2>
 8004d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d5c:	f04f 0400 	mov.w	r4, #0
 8004d60:	e03a      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004d62:	f04f 0301 	mov.w	r3, #1
 8004d66:	f04f 0400 	mov.w	r4, #0
 8004d6a:	e035      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004d6c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004d70:	f04f 0400 	mov.w	r4, #0
 8004d74:	e030      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004d76:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004d7a:	f04f 0400 	mov.w	r4, #0
 8004d7e:	e02b      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004d80:	f04f 0320 	mov.w	r3, #32
 8004d84:	f04f 0400 	mov.w	r4, #0
 8004d88:	e026      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004d8a:	f04f 0310 	mov.w	r3, #16
 8004d8e:	f04f 0400 	mov.w	r4, #0
 8004d92:	e021      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004d94:	f04f 030c 	mov.w	r3, #12
 8004d98:	f04f 0400 	mov.w	r4, #0
 8004d9c:	e01c      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004d9e:	f04f 030a 	mov.w	r3, #10
 8004da2:	f04f 0400 	mov.w	r4, #0
 8004da6:	e017      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004da8:	f04f 0308 	mov.w	r3, #8
 8004dac:	f04f 0400 	mov.w	r4, #0
 8004db0:	e012      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004db2:	f04f 0306 	mov.w	r3, #6
 8004db6:	f04f 0400 	mov.w	r4, #0
 8004dba:	e00d      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004dbc:	f04f 0304 	mov.w	r3, #4
 8004dc0:	f04f 0400 	mov.w	r4, #0
 8004dc4:	e008      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004dc6:	f04f 0302 	mov.w	r3, #2
 8004dca:	f04f 0400 	mov.w	r4, #0
 8004dce:	e003      	b.n	8004dd8 <UART_SetConfig+0xc48>
 8004dd0:	f04f 0301 	mov.w	r3, #1
 8004dd4:	f04f 0400 	mov.w	r4, #0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4623      	mov	r3, r4
 8004ddc:	f7fb fa7c 	bl	80002d8 <__aeabi_uldivmod>
 8004de0:	4603      	mov	r3, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	4619      	mov	r1, r3
 8004de6:	4622      	mov	r2, r4
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	f04f 0400 	mov.w	r4, #0
 8004df0:	0214      	lsls	r4, r2, #8
 8004df2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004df6:	020b      	lsls	r3, r1, #8
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6852      	ldr	r2, [r2, #4]
 8004dfc:	0852      	lsrs	r2, r2, #1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	eb13 0b01 	adds.w	fp, r3, r1
 8004e08:	eb44 0c02 	adc.w	ip, r4, r2
 8004e0c:	4658      	mov	r0, fp
 8004e0e:	4661      	mov	r1, ip
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f04f 0400 	mov.w	r4, #0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4623      	mov	r3, r4
 8004e1c:	f7fb fa5c 	bl	80002d8 <__aeabi_uldivmod>
 8004e20:	4603      	mov	r3, r0
 8004e22:	460c      	mov	r4, r1
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004e26:	e389      	b.n	800553c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e28:	f107 0318 	add.w	r3, r7, #24
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fe fd45 	bl	80038bc <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f04f 0100 	mov.w	r1, #0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d067      	beq.n	8004f12 <UART_SetConfig+0xd82>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d05e      	beq.n	8004f08 <UART_SetConfig+0xd78>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d055      	beq.n	8004efe <UART_SetConfig+0xd6e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d04c      	beq.n	8004ef4 <UART_SetConfig+0xd64>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d043      	beq.n	8004eea <UART_SetConfig+0xd5a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	2b05      	cmp	r3, #5
 8004e68:	d03a      	beq.n	8004ee0 <UART_SetConfig+0xd50>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	2b06      	cmp	r3, #6
 8004e70:	d031      	beq.n	8004ed6 <UART_SetConfig+0xd46>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2b07      	cmp	r3, #7
 8004e78:	d028      	beq.n	8004ecc <UART_SetConfig+0xd3c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d01f      	beq.n	8004ec2 <UART_SetConfig+0xd32>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2b09      	cmp	r3, #9
 8004e88:	d016      	beq.n	8004eb8 <UART_SetConfig+0xd28>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b0a      	cmp	r3, #10
 8004e90:	d00d      	beq.n	8004eae <UART_SetConfig+0xd1e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	2b0b      	cmp	r3, #11
 8004e98:	d104      	bne.n	8004ea4 <UART_SetConfig+0xd14>
 8004e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e9e:	f04f 0400 	mov.w	r4, #0
 8004ea2:	e03a      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004ea4:	f04f 0301 	mov.w	r3, #1
 8004ea8:	f04f 0400 	mov.w	r4, #0
 8004eac:	e035      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004eae:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004eb2:	f04f 0400 	mov.w	r4, #0
 8004eb6:	e030      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004eb8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004ebc:	f04f 0400 	mov.w	r4, #0
 8004ec0:	e02b      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004ec2:	f04f 0320 	mov.w	r3, #32
 8004ec6:	f04f 0400 	mov.w	r4, #0
 8004eca:	e026      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004ecc:	f04f 0310 	mov.w	r3, #16
 8004ed0:	f04f 0400 	mov.w	r4, #0
 8004ed4:	e021      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004ed6:	f04f 030c 	mov.w	r3, #12
 8004eda:	f04f 0400 	mov.w	r4, #0
 8004ede:	e01c      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004ee0:	f04f 030a 	mov.w	r3, #10
 8004ee4:	f04f 0400 	mov.w	r4, #0
 8004ee8:	e017      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004eea:	f04f 0308 	mov.w	r3, #8
 8004eee:	f04f 0400 	mov.w	r4, #0
 8004ef2:	e012      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004ef4:	f04f 0306 	mov.w	r3, #6
 8004ef8:	f04f 0400 	mov.w	r4, #0
 8004efc:	e00d      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004efe:	f04f 0304 	mov.w	r3, #4
 8004f02:	f04f 0400 	mov.w	r4, #0
 8004f06:	e008      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004f08:	f04f 0302 	mov.w	r3, #2
 8004f0c:	f04f 0400 	mov.w	r4, #0
 8004f10:	e003      	b.n	8004f1a <UART_SetConfig+0xd8a>
 8004f12:	f04f 0301 	mov.w	r3, #1
 8004f16:	f04f 0400 	mov.w	r4, #0
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4623      	mov	r3, r4
 8004f1e:	f7fb f9db 	bl	80002d8 <__aeabi_uldivmod>
 8004f22:	4603      	mov	r3, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	4619      	mov	r1, r3
 8004f28:	4622      	mov	r2, r4
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	f04f 0400 	mov.w	r4, #0
 8004f32:	0214      	lsls	r4, r2, #8
 8004f34:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004f38:	020b      	lsls	r3, r1, #8
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6852      	ldr	r2, [r2, #4]
 8004f3e:	0852      	lsrs	r2, r2, #1
 8004f40:	4611      	mov	r1, r2
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	eb13 0b01 	adds.w	fp, r3, r1
 8004f4a:	eb44 0c02 	adc.w	ip, r4, r2
 8004f4e:	4658      	mov	r0, fp
 8004f50:	4661      	mov	r1, ip
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f04f 0400 	mov.w	r4, #0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	f7fb f9bb 	bl	80002d8 <__aeabi_uldivmod>
 8004f62:	4603      	mov	r3, r0
 8004f64:	460c      	mov	r4, r1
 8004f66:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004f68:	e2e8      	b.n	800553c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f6a:	f107 030c 	add.w	r3, r7, #12
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fdf0 	bl	8003b54 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f04f 0100 	mov.w	r1, #0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d067      	beq.n	8005054 <UART_SetConfig+0xec4>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d05e      	beq.n	800504a <UART_SetConfig+0xeba>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d055      	beq.n	8005040 <UART_SetConfig+0xeb0>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d04c      	beq.n	8005036 <UART_SetConfig+0xea6>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d043      	beq.n	800502c <UART_SetConfig+0xe9c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	d03a      	beq.n	8005022 <UART_SetConfig+0xe92>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	2b06      	cmp	r3, #6
 8004fb2:	d031      	beq.n	8005018 <UART_SetConfig+0xe88>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	2b07      	cmp	r3, #7
 8004fba:	d028      	beq.n	800500e <UART_SetConfig+0xe7e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d01f      	beq.n	8005004 <UART_SetConfig+0xe74>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	2b09      	cmp	r3, #9
 8004fca:	d016      	beq.n	8004ffa <UART_SetConfig+0xe6a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	2b0a      	cmp	r3, #10
 8004fd2:	d00d      	beq.n	8004ff0 <UART_SetConfig+0xe60>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	2b0b      	cmp	r3, #11
 8004fda:	d104      	bne.n	8004fe6 <UART_SetConfig+0xe56>
 8004fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fe0:	f04f 0400 	mov.w	r4, #0
 8004fe4:	e03a      	b.n	800505c <UART_SetConfig+0xecc>
 8004fe6:	f04f 0301 	mov.w	r3, #1
 8004fea:	f04f 0400 	mov.w	r4, #0
 8004fee:	e035      	b.n	800505c <UART_SetConfig+0xecc>
 8004ff0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004ff4:	f04f 0400 	mov.w	r4, #0
 8004ff8:	e030      	b.n	800505c <UART_SetConfig+0xecc>
 8004ffa:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004ffe:	f04f 0400 	mov.w	r4, #0
 8005002:	e02b      	b.n	800505c <UART_SetConfig+0xecc>
 8005004:	f04f 0320 	mov.w	r3, #32
 8005008:	f04f 0400 	mov.w	r4, #0
 800500c:	e026      	b.n	800505c <UART_SetConfig+0xecc>
 800500e:	f04f 0310 	mov.w	r3, #16
 8005012:	f04f 0400 	mov.w	r4, #0
 8005016:	e021      	b.n	800505c <UART_SetConfig+0xecc>
 8005018:	f04f 030c 	mov.w	r3, #12
 800501c:	f04f 0400 	mov.w	r4, #0
 8005020:	e01c      	b.n	800505c <UART_SetConfig+0xecc>
 8005022:	f04f 030a 	mov.w	r3, #10
 8005026:	f04f 0400 	mov.w	r4, #0
 800502a:	e017      	b.n	800505c <UART_SetConfig+0xecc>
 800502c:	f04f 0308 	mov.w	r3, #8
 8005030:	f04f 0400 	mov.w	r4, #0
 8005034:	e012      	b.n	800505c <UART_SetConfig+0xecc>
 8005036:	f04f 0306 	mov.w	r3, #6
 800503a:	f04f 0400 	mov.w	r4, #0
 800503e:	e00d      	b.n	800505c <UART_SetConfig+0xecc>
 8005040:	f04f 0304 	mov.w	r3, #4
 8005044:	f04f 0400 	mov.w	r4, #0
 8005048:	e008      	b.n	800505c <UART_SetConfig+0xecc>
 800504a:	f04f 0302 	mov.w	r3, #2
 800504e:	f04f 0400 	mov.w	r4, #0
 8005052:	e003      	b.n	800505c <UART_SetConfig+0xecc>
 8005054:	f04f 0301 	mov.w	r3, #1
 8005058:	f04f 0400 	mov.w	r4, #0
 800505c:	461a      	mov	r2, r3
 800505e:	4623      	mov	r3, r4
 8005060:	f7fb f93a 	bl	80002d8 <__aeabi_uldivmod>
 8005064:	4603      	mov	r3, r0
 8005066:	460c      	mov	r4, r1
 8005068:	4619      	mov	r1, r3
 800506a:	4622      	mov	r2, r4
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	f04f 0400 	mov.w	r4, #0
 8005074:	0214      	lsls	r4, r2, #8
 8005076:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800507a:	020b      	lsls	r3, r1, #8
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6852      	ldr	r2, [r2, #4]
 8005080:	0852      	lsrs	r2, r2, #1
 8005082:	4611      	mov	r1, r2
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	eb13 0b01 	adds.w	fp, r3, r1
 800508c:	eb44 0c02 	adc.w	ip, r4, r2
 8005090:	4658      	mov	r0, fp
 8005092:	4661      	mov	r1, ip
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f04f 0400 	mov.w	r4, #0
 800509c:	461a      	mov	r2, r3
 800509e:	4623      	mov	r3, r4
 80050a0:	f7fb f91a 	bl	80002d8 <__aeabi_uldivmod>
 80050a4:	4603      	mov	r3, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80050aa:	e247      	b.n	800553c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050ac:	4b96      	ldr	r3, [pc, #600]	; (8005308 <UART_SetConfig+0x1178>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80a3 	beq.w	8005200 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050ba:	4b93      	ldr	r3, [pc, #588]	; (8005308 <UART_SetConfig+0x1178>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	08db      	lsrs	r3, r3, #3
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	4a91      	ldr	r2, [pc, #580]	; (800530c <UART_SetConfig+0x117c>)
 80050c6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ca:	4618      	mov	r0, r3
 80050cc:	f04f 0100 	mov.w	r1, #0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d067      	beq.n	80051a8 <UART_SetConfig+0x1018>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d05e      	beq.n	800519e <UART_SetConfig+0x100e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d055      	beq.n	8005194 <UART_SetConfig+0x1004>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d04c      	beq.n	800518a <UART_SetConfig+0xffa>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d043      	beq.n	8005180 <UART_SetConfig+0xff0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b05      	cmp	r3, #5
 80050fe:	d03a      	beq.n	8005176 <UART_SetConfig+0xfe6>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2b06      	cmp	r3, #6
 8005106:	d031      	beq.n	800516c <UART_SetConfig+0xfdc>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	2b07      	cmp	r3, #7
 800510e:	d028      	beq.n	8005162 <UART_SetConfig+0xfd2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	2b08      	cmp	r3, #8
 8005116:	d01f      	beq.n	8005158 <UART_SetConfig+0xfc8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	2b09      	cmp	r3, #9
 800511e:	d016      	beq.n	800514e <UART_SetConfig+0xfbe>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b0a      	cmp	r3, #10
 8005126:	d00d      	beq.n	8005144 <UART_SetConfig+0xfb4>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	2b0b      	cmp	r3, #11
 800512e:	d104      	bne.n	800513a <UART_SetConfig+0xfaa>
 8005130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005134:	f04f 0400 	mov.w	r4, #0
 8005138:	e03a      	b.n	80051b0 <UART_SetConfig+0x1020>
 800513a:	f04f 0301 	mov.w	r3, #1
 800513e:	f04f 0400 	mov.w	r4, #0
 8005142:	e035      	b.n	80051b0 <UART_SetConfig+0x1020>
 8005144:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005148:	f04f 0400 	mov.w	r4, #0
 800514c:	e030      	b.n	80051b0 <UART_SetConfig+0x1020>
 800514e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005152:	f04f 0400 	mov.w	r4, #0
 8005156:	e02b      	b.n	80051b0 <UART_SetConfig+0x1020>
 8005158:	f04f 0320 	mov.w	r3, #32
 800515c:	f04f 0400 	mov.w	r4, #0
 8005160:	e026      	b.n	80051b0 <UART_SetConfig+0x1020>
 8005162:	f04f 0310 	mov.w	r3, #16
 8005166:	f04f 0400 	mov.w	r4, #0
 800516a:	e021      	b.n	80051b0 <UART_SetConfig+0x1020>
 800516c:	f04f 030c 	mov.w	r3, #12
 8005170:	f04f 0400 	mov.w	r4, #0
 8005174:	e01c      	b.n	80051b0 <UART_SetConfig+0x1020>
 8005176:	f04f 030a 	mov.w	r3, #10
 800517a:	f04f 0400 	mov.w	r4, #0
 800517e:	e017      	b.n	80051b0 <UART_SetConfig+0x1020>
 8005180:	f04f 0308 	mov.w	r3, #8
 8005184:	f04f 0400 	mov.w	r4, #0
 8005188:	e012      	b.n	80051b0 <UART_SetConfig+0x1020>
 800518a:	f04f 0306 	mov.w	r3, #6
 800518e:	f04f 0400 	mov.w	r4, #0
 8005192:	e00d      	b.n	80051b0 <UART_SetConfig+0x1020>
 8005194:	f04f 0304 	mov.w	r3, #4
 8005198:	f04f 0400 	mov.w	r4, #0
 800519c:	e008      	b.n	80051b0 <UART_SetConfig+0x1020>
 800519e:	f04f 0302 	mov.w	r3, #2
 80051a2:	f04f 0400 	mov.w	r4, #0
 80051a6:	e003      	b.n	80051b0 <UART_SetConfig+0x1020>
 80051a8:	f04f 0301 	mov.w	r3, #1
 80051ac:	f04f 0400 	mov.w	r4, #0
 80051b0:	461a      	mov	r2, r3
 80051b2:	4623      	mov	r3, r4
 80051b4:	f7fb f890 	bl	80002d8 <__aeabi_uldivmod>
 80051b8:	4603      	mov	r3, r0
 80051ba:	460c      	mov	r4, r1
 80051bc:	4619      	mov	r1, r3
 80051be:	4622      	mov	r2, r4
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	0214      	lsls	r4, r2, #8
 80051ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80051ce:	020b      	lsls	r3, r1, #8
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6852      	ldr	r2, [r2, #4]
 80051d4:	0852      	lsrs	r2, r2, #1
 80051d6:	4611      	mov	r1, r2
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	eb13 0b01 	adds.w	fp, r3, r1
 80051e0:	eb44 0c02 	adc.w	ip, r4, r2
 80051e4:	4658      	mov	r0, fp
 80051e6:	4661      	mov	r1, ip
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f04f 0400 	mov.w	r4, #0
 80051f0:	461a      	mov	r2, r3
 80051f2:	4623      	mov	r3, r4
 80051f4:	f7fb f870 	bl	80002d8 <__aeabi_uldivmod>
 80051f8:	4603      	mov	r3, r0
 80051fa:	460c      	mov	r4, r1
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80051fe:	e19d      	b.n	800553c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d05b      	beq.n	80052c0 <UART_SetConfig+0x1130>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	2b01      	cmp	r3, #1
 800520e:	d053      	beq.n	80052b8 <UART_SetConfig+0x1128>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	2b02      	cmp	r3, #2
 8005216:	d04b      	beq.n	80052b0 <UART_SetConfig+0x1120>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2b03      	cmp	r3, #3
 800521e:	d043      	beq.n	80052a8 <UART_SetConfig+0x1118>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	2b04      	cmp	r3, #4
 8005226:	d03b      	beq.n	80052a0 <UART_SetConfig+0x1110>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2b05      	cmp	r3, #5
 800522e:	d033      	beq.n	8005298 <UART_SetConfig+0x1108>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b06      	cmp	r3, #6
 8005236:	d02b      	beq.n	8005290 <UART_SetConfig+0x1100>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	2b07      	cmp	r3, #7
 800523e:	d023      	beq.n	8005288 <UART_SetConfig+0x10f8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	2b08      	cmp	r3, #8
 8005246:	d01b      	beq.n	8005280 <UART_SetConfig+0x10f0>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	2b09      	cmp	r3, #9
 800524e:	d013      	beq.n	8005278 <UART_SetConfig+0x10e8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	2b0a      	cmp	r3, #10
 8005256:	d00b      	beq.n	8005270 <UART_SetConfig+0x10e0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	2b0b      	cmp	r3, #11
 800525e:	d103      	bne.n	8005268 <UART_SetConfig+0x10d8>
 8005260:	4b2a      	ldr	r3, [pc, #168]	; (800530c <UART_SetConfig+0x117c>)
 8005262:	f04f 0400 	mov.w	r4, #0
 8005266:	e02e      	b.n	80052c6 <UART_SetConfig+0x1136>
 8005268:	4b29      	ldr	r3, [pc, #164]	; (8005310 <UART_SetConfig+0x1180>)
 800526a:	f04f 0403 	mov.w	r4, #3
 800526e:	e02a      	b.n	80052c6 <UART_SetConfig+0x1136>
 8005270:	4b28      	ldr	r3, [pc, #160]	; (8005314 <UART_SetConfig+0x1184>)
 8005272:	f04f 0400 	mov.w	r4, #0
 8005276:	e026      	b.n	80052c6 <UART_SetConfig+0x1136>
 8005278:	4b27      	ldr	r3, [pc, #156]	; (8005318 <UART_SetConfig+0x1188>)
 800527a:	f04f 0400 	mov.w	r4, #0
 800527e:	e022      	b.n	80052c6 <UART_SetConfig+0x1136>
 8005280:	4b26      	ldr	r3, [pc, #152]	; (800531c <UART_SetConfig+0x118c>)
 8005282:	f04f 0400 	mov.w	r4, #0
 8005286:	e01e      	b.n	80052c6 <UART_SetConfig+0x1136>
 8005288:	4b25      	ldr	r3, [pc, #148]	; (8005320 <UART_SetConfig+0x1190>)
 800528a:	f04f 0400 	mov.w	r4, #0
 800528e:	e01a      	b.n	80052c6 <UART_SetConfig+0x1136>
 8005290:	a419      	add	r4, pc, #100	; (adr r4, 80052f8 <UART_SetConfig+0x1168>)
 8005292:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005296:	e016      	b.n	80052c6 <UART_SetConfig+0x1136>
 8005298:	4b22      	ldr	r3, [pc, #136]	; (8005324 <UART_SetConfig+0x1194>)
 800529a:	f04f 0400 	mov.w	r4, #0
 800529e:	e012      	b.n	80052c6 <UART_SetConfig+0x1136>
 80052a0:	4b21      	ldr	r3, [pc, #132]	; (8005328 <UART_SetConfig+0x1198>)
 80052a2:	f04f 0400 	mov.w	r4, #0
 80052a6:	e00e      	b.n	80052c6 <UART_SetConfig+0x1136>
 80052a8:	a415      	add	r4, pc, #84	; (adr r4, 8005300 <UART_SetConfig+0x1170>)
 80052aa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80052ae:	e00a      	b.n	80052c6 <UART_SetConfig+0x1136>
 80052b0:	4b1e      	ldr	r3, [pc, #120]	; (800532c <UART_SetConfig+0x119c>)
 80052b2:	f04f 0400 	mov.w	r4, #0
 80052b6:	e006      	b.n	80052c6 <UART_SetConfig+0x1136>
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <UART_SetConfig+0x11a0>)
 80052ba:	f04f 0401 	mov.w	r4, #1
 80052be:	e002      	b.n	80052c6 <UART_SetConfig+0x1136>
 80052c0:	4b13      	ldr	r3, [pc, #76]	; (8005310 <UART_SetConfig+0x1180>)
 80052c2:	f04f 0403 	mov.w	r4, #3
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6852      	ldr	r2, [r2, #4]
 80052ca:	0852      	lsrs	r2, r2, #1
 80052cc:	4611      	mov	r1, r2
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	eb13 0b01 	adds.w	fp, r3, r1
 80052d6:	eb44 0c02 	adc.w	ip, r4, r2
 80052da:	4658      	mov	r0, fp
 80052dc:	4661      	mov	r1, ip
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f04f 0400 	mov.w	r4, #0
 80052e6:	461a      	mov	r2, r3
 80052e8:	4623      	mov	r3, r4
 80052ea:	f7fa fff5 	bl	80002d8 <__aeabi_uldivmod>
 80052ee:	4603      	mov	r3, r0
 80052f0:	460c      	mov	r4, r1
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80052f4:	e122      	b.n	800553c <UART_SetConfig+0x13ac>
 80052f6:	bf00      	nop
 80052f8:	51615500 	.word	0x51615500
 80052fc:	00000000 	.word	0x00000000
 8005300:	a2c2aa00 	.word	0xa2c2aa00
 8005304:	00000000 	.word	0x00000000
 8005308:	58024400 	.word	0x58024400
 800530c:	03d09000 	.word	0x03d09000
 8005310:	d0900000 	.word	0xd0900000
 8005314:	07a12000 	.word	0x07a12000
 8005318:	0f424000 	.word	0x0f424000
 800531c:	1e848000 	.word	0x1e848000
 8005320:	3d090000 	.word	0x3d090000
 8005324:	61a80000 	.word	0x61a80000
 8005328:	7a120000 	.word	0x7a120000
 800532c:	f4240000 	.word	0xf4240000
 8005330:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	2b00      	cmp	r3, #0
 800533a:	d05b      	beq.n	80053f4 <UART_SetConfig+0x1264>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	2b01      	cmp	r3, #1
 8005342:	d053      	beq.n	80053ec <UART_SetConfig+0x125c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	2b02      	cmp	r3, #2
 800534a:	d04b      	beq.n	80053e4 <UART_SetConfig+0x1254>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	2b03      	cmp	r3, #3
 8005352:	d043      	beq.n	80053dc <UART_SetConfig+0x124c>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	2b04      	cmp	r3, #4
 800535a:	d03b      	beq.n	80053d4 <UART_SetConfig+0x1244>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	2b05      	cmp	r3, #5
 8005362:	d033      	beq.n	80053cc <UART_SetConfig+0x123c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2b06      	cmp	r3, #6
 800536a:	d02b      	beq.n	80053c4 <UART_SetConfig+0x1234>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	2b07      	cmp	r3, #7
 8005372:	d023      	beq.n	80053bc <UART_SetConfig+0x122c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b08      	cmp	r3, #8
 800537a:	d01b      	beq.n	80053b4 <UART_SetConfig+0x1224>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	2b09      	cmp	r3, #9
 8005382:	d013      	beq.n	80053ac <UART_SetConfig+0x121c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2b0a      	cmp	r3, #10
 800538a:	d00b      	beq.n	80053a4 <UART_SetConfig+0x1214>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b0b      	cmp	r3, #11
 8005392:	d103      	bne.n	800539c <UART_SetConfig+0x120c>
 8005394:	4bc0      	ldr	r3, [pc, #768]	; (8005698 <UART_SetConfig+0x1508>)
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	e02e      	b.n	80053fa <UART_SetConfig+0x126a>
 800539c:	4bbf      	ldr	r3, [pc, #764]	; (800569c <UART_SetConfig+0x150c>)
 800539e:	f04f 0400 	mov.w	r4, #0
 80053a2:	e02a      	b.n	80053fa <UART_SetConfig+0x126a>
 80053a4:	4bbe      	ldr	r3, [pc, #760]	; (80056a0 <UART_SetConfig+0x1510>)
 80053a6:	f04f 0400 	mov.w	r4, #0
 80053aa:	e026      	b.n	80053fa <UART_SetConfig+0x126a>
 80053ac:	4bbd      	ldr	r3, [pc, #756]	; (80056a4 <UART_SetConfig+0x1514>)
 80053ae:	f04f 0400 	mov.w	r4, #0
 80053b2:	e022      	b.n	80053fa <UART_SetConfig+0x126a>
 80053b4:	4bbc      	ldr	r3, [pc, #752]	; (80056a8 <UART_SetConfig+0x1518>)
 80053b6:	f04f 0400 	mov.w	r4, #0
 80053ba:	e01e      	b.n	80053fa <UART_SetConfig+0x126a>
 80053bc:	4bbb      	ldr	r3, [pc, #748]	; (80056ac <UART_SetConfig+0x151c>)
 80053be:	f04f 0400 	mov.w	r4, #0
 80053c2:	e01a      	b.n	80053fa <UART_SetConfig+0x126a>
 80053c4:	a4b0      	add	r4, pc, #704	; (adr r4, 8005688 <UART_SetConfig+0x14f8>)
 80053c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80053ca:	e016      	b.n	80053fa <UART_SetConfig+0x126a>
 80053cc:	4bb8      	ldr	r3, [pc, #736]	; (80056b0 <UART_SetConfig+0x1520>)
 80053ce:	f04f 0400 	mov.w	r4, #0
 80053d2:	e012      	b.n	80053fa <UART_SetConfig+0x126a>
 80053d4:	4bb7      	ldr	r3, [pc, #732]	; (80056b4 <UART_SetConfig+0x1524>)
 80053d6:	f04f 0400 	mov.w	r4, #0
 80053da:	e00e      	b.n	80053fa <UART_SetConfig+0x126a>
 80053dc:	a4ac      	add	r4, pc, #688	; (adr r4, 8005690 <UART_SetConfig+0x1500>)
 80053de:	e9d4 3400 	ldrd	r3, r4, [r4]
 80053e2:	e00a      	b.n	80053fa <UART_SetConfig+0x126a>
 80053e4:	4bb4      	ldr	r3, [pc, #720]	; (80056b8 <UART_SetConfig+0x1528>)
 80053e6:	f04f 0400 	mov.w	r4, #0
 80053ea:	e006      	b.n	80053fa <UART_SetConfig+0x126a>
 80053ec:	4bb3      	ldr	r3, [pc, #716]	; (80056bc <UART_SetConfig+0x152c>)
 80053ee:	f04f 0400 	mov.w	r4, #0
 80053f2:	e002      	b.n	80053fa <UART_SetConfig+0x126a>
 80053f4:	4ba9      	ldr	r3, [pc, #676]	; (800569c <UART_SetConfig+0x150c>)
 80053f6:	f04f 0400 	mov.w	r4, #0
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6852      	ldr	r2, [r2, #4]
 80053fe:	0852      	lsrs	r2, r2, #1
 8005400:	4611      	mov	r1, r2
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	eb13 0b01 	adds.w	fp, r3, r1
 800540a:	eb44 0c02 	adc.w	ip, r4, r2
 800540e:	4658      	mov	r0, fp
 8005410:	4661      	mov	r1, ip
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f04f 0400 	mov.w	r4, #0
 800541a:	461a      	mov	r2, r3
 800541c:	4623      	mov	r3, r4
 800541e:	f7fa ff5b 	bl	80002d8 <__aeabi_uldivmod>
 8005422:	4603      	mov	r3, r0
 8005424:	460c      	mov	r4, r1
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005428:	e088      	b.n	800553c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	d064      	beq.n	80054fc <UART_SetConfig+0x136c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b01      	cmp	r3, #1
 8005438:	d05b      	beq.n	80054f2 <UART_SetConfig+0x1362>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b02      	cmp	r3, #2
 8005440:	d052      	beq.n	80054e8 <UART_SetConfig+0x1358>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b03      	cmp	r3, #3
 8005448:	d04a      	beq.n	80054e0 <UART_SetConfig+0x1350>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b04      	cmp	r3, #4
 8005450:	d041      	beq.n	80054d6 <UART_SetConfig+0x1346>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b05      	cmp	r3, #5
 8005458:	d039      	beq.n	80054ce <UART_SetConfig+0x133e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b06      	cmp	r3, #6
 8005460:	d031      	beq.n	80054c6 <UART_SetConfig+0x1336>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b07      	cmp	r3, #7
 8005468:	d028      	beq.n	80054bc <UART_SetConfig+0x132c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b08      	cmp	r3, #8
 8005470:	d01f      	beq.n	80054b2 <UART_SetConfig+0x1322>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b09      	cmp	r3, #9
 8005478:	d016      	beq.n	80054a8 <UART_SetConfig+0x1318>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b0a      	cmp	r3, #10
 8005480:	d00d      	beq.n	800549e <UART_SetConfig+0x130e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b0b      	cmp	r3, #11
 8005488:	d104      	bne.n	8005494 <UART_SetConfig+0x1304>
 800548a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548e:	f04f 0400 	mov.w	r4, #0
 8005492:	e037      	b.n	8005504 <UART_SetConfig+0x1374>
 8005494:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005498:	f04f 0400 	mov.w	r4, #0
 800549c:	e032      	b.n	8005504 <UART_SetConfig+0x1374>
 800549e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054a2:	f04f 0400 	mov.w	r4, #0
 80054a6:	e02d      	b.n	8005504 <UART_SetConfig+0x1374>
 80054a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054ac:	f04f 0400 	mov.w	r4, #0
 80054b0:	e028      	b.n	8005504 <UART_SetConfig+0x1374>
 80054b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054b6:	f04f 0400 	mov.w	r4, #0
 80054ba:	e023      	b.n	8005504 <UART_SetConfig+0x1374>
 80054bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80054c0:	f04f 0400 	mov.w	r4, #0
 80054c4:	e01e      	b.n	8005504 <UART_SetConfig+0x1374>
 80054c6:	4b7e      	ldr	r3, [pc, #504]	; (80056c0 <UART_SetConfig+0x1530>)
 80054c8:	f04f 0400 	mov.w	r4, #0
 80054cc:	e01a      	b.n	8005504 <UART_SetConfig+0x1374>
 80054ce:	4b7d      	ldr	r3, [pc, #500]	; (80056c4 <UART_SetConfig+0x1534>)
 80054d0:	f04f 0400 	mov.w	r4, #0
 80054d4:	e016      	b.n	8005504 <UART_SetConfig+0x1374>
 80054d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80054da:	f04f 0400 	mov.w	r4, #0
 80054de:	e011      	b.n	8005504 <UART_SetConfig+0x1374>
 80054e0:	4b79      	ldr	r3, [pc, #484]	; (80056c8 <UART_SetConfig+0x1538>)
 80054e2:	f04f 0400 	mov.w	r4, #0
 80054e6:	e00d      	b.n	8005504 <UART_SetConfig+0x1374>
 80054e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054ec:	f04f 0400 	mov.w	r4, #0
 80054f0:	e008      	b.n	8005504 <UART_SetConfig+0x1374>
 80054f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054f6:	f04f 0400 	mov.w	r4, #0
 80054fa:	e003      	b.n	8005504 <UART_SetConfig+0x1374>
 80054fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6852      	ldr	r2, [r2, #4]
 8005508:	0852      	lsrs	r2, r2, #1
 800550a:	4611      	mov	r1, r2
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	eb13 0b01 	adds.w	fp, r3, r1
 8005514:	eb44 0c02 	adc.w	ip, r4, r2
 8005518:	4658      	mov	r0, fp
 800551a:	4661      	mov	r1, ip
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	461a      	mov	r2, r3
 8005526:	4623      	mov	r3, r4
 8005528:	f7fa fed6 	bl	80002d8 <__aeabi_uldivmod>
 800552c:	4603      	mov	r3, r0
 800552e:	460c      	mov	r4, r1
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005532:	e003      	b.n	800553c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800553a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005542:	d309      	bcc.n	8005558 <UART_SetConfig+0x13c8>
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554a:	d205      	bcs.n	8005558 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005552:	60da      	str	r2, [r3, #12]
 8005554:	f000 bf85 	b.w	8006462 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555e:	f000 bf80 	b.w	8006462 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556a:	f040 83da 	bne.w	8005d22 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800556e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	f200 83b3 	bhi.w	8005cde <UART_SetConfig+0x1b4e>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <UART_SetConfig+0x13f0>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080056cd 	.word	0x080056cd
 8005584:	08005785 	.word	0x08005785
 8005588:	08005cdf 	.word	0x08005cdf
 800558c:	08005cdf 	.word	0x08005cdf
 8005590:	0800583d 	.word	0x0800583d
 8005594:	08005cdf 	.word	0x08005cdf
 8005598:	08005cdf 	.word	0x08005cdf
 800559c:	08005cdf 	.word	0x08005cdf
 80055a0:	080058f9 	.word	0x080058f9
 80055a4:	08005cdf 	.word	0x08005cdf
 80055a8:	08005cdf 	.word	0x08005cdf
 80055ac:	08005cdf 	.word	0x08005cdf
 80055b0:	08005cdf 	.word	0x08005cdf
 80055b4:	08005cdf 	.word	0x08005cdf
 80055b8:	08005cdf 	.word	0x08005cdf
 80055bc:	08005cdf 	.word	0x08005cdf
 80055c0:	080059b5 	.word	0x080059b5
 80055c4:	08005cdf 	.word	0x08005cdf
 80055c8:	08005cdf 	.word	0x08005cdf
 80055cc:	08005cdf 	.word	0x08005cdf
 80055d0:	08005cdf 	.word	0x08005cdf
 80055d4:	08005cdf 	.word	0x08005cdf
 80055d8:	08005cdf 	.word	0x08005cdf
 80055dc:	08005cdf 	.word	0x08005cdf
 80055e0:	08005cdf 	.word	0x08005cdf
 80055e4:	08005cdf 	.word	0x08005cdf
 80055e8:	08005cdf 	.word	0x08005cdf
 80055ec:	08005cdf 	.word	0x08005cdf
 80055f0:	08005cdf 	.word	0x08005cdf
 80055f4:	08005cdf 	.word	0x08005cdf
 80055f8:	08005cdf 	.word	0x08005cdf
 80055fc:	08005cdf 	.word	0x08005cdf
 8005600:	08005b27 	.word	0x08005b27
 8005604:	08005cdf 	.word	0x08005cdf
 8005608:	08005cdf 	.word	0x08005cdf
 800560c:	08005cdf 	.word	0x08005cdf
 8005610:	08005cdf 	.word	0x08005cdf
 8005614:	08005cdf 	.word	0x08005cdf
 8005618:	08005cdf 	.word	0x08005cdf
 800561c:	08005cdf 	.word	0x08005cdf
 8005620:	08005cdf 	.word	0x08005cdf
 8005624:	08005cdf 	.word	0x08005cdf
 8005628:	08005cdf 	.word	0x08005cdf
 800562c:	08005cdf 	.word	0x08005cdf
 8005630:	08005cdf 	.word	0x08005cdf
 8005634:	08005cdf 	.word	0x08005cdf
 8005638:	08005cdf 	.word	0x08005cdf
 800563c:	08005cdf 	.word	0x08005cdf
 8005640:	08005cdf 	.word	0x08005cdf
 8005644:	08005cdf 	.word	0x08005cdf
 8005648:	08005cdf 	.word	0x08005cdf
 800564c:	08005cdf 	.word	0x08005cdf
 8005650:	08005cdf 	.word	0x08005cdf
 8005654:	08005cdf 	.word	0x08005cdf
 8005658:	08005cdf 	.word	0x08005cdf
 800565c:	08005cdf 	.word	0x08005cdf
 8005660:	08005cdf 	.word	0x08005cdf
 8005664:	08005cdf 	.word	0x08005cdf
 8005668:	08005cdf 	.word	0x08005cdf
 800566c:	08005cdf 	.word	0x08005cdf
 8005670:	08005cdf 	.word	0x08005cdf
 8005674:	08005cdf 	.word	0x08005cdf
 8005678:	08005cdf 	.word	0x08005cdf
 800567c:	08005cdf 	.word	0x08005cdf
 8005680:	08005c1d 	.word	0x08005c1d
 8005684:	f3af 8000 	nop.w
 8005688:	05161500 	.word	0x05161500
 800568c:	00000000 	.word	0x00000000
 8005690:	0a2c2a00 	.word	0x0a2c2a00
 8005694:	00000000 	.word	0x00000000
 8005698:	003d0900 	.word	0x003d0900
 800569c:	3d090000 	.word	0x3d090000
 80056a0:	007a1200 	.word	0x007a1200
 80056a4:	00f42400 	.word	0x00f42400
 80056a8:	01e84800 	.word	0x01e84800
 80056ac:	03d09000 	.word	0x03d09000
 80056b0:	061a8000 	.word	0x061a8000
 80056b4:	07a12000 	.word	0x07a12000
 80056b8:	0f424000 	.word	0x0f424000
 80056bc:	1e848000 	.word	0x1e848000
 80056c0:	000aaa00 	.word	0x000aaa00
 80056c4:	000ccc00 	.word	0x000ccc00
 80056c8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056cc:	f7fd f9c4 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 80056d0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d044      	beq.n	8005764 <UART_SetConfig+0x15d4>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d03e      	beq.n	8005760 <UART_SetConfig+0x15d0>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d038      	beq.n	800575c <UART_SetConfig+0x15cc>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d032      	beq.n	8005758 <UART_SetConfig+0x15c8>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d02c      	beq.n	8005754 <UART_SetConfig+0x15c4>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	2b05      	cmp	r3, #5
 8005700:	d026      	beq.n	8005750 <UART_SetConfig+0x15c0>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	2b06      	cmp	r3, #6
 8005708:	d020      	beq.n	800574c <UART_SetConfig+0x15bc>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	2b07      	cmp	r3, #7
 8005710:	d01a      	beq.n	8005748 <UART_SetConfig+0x15b8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	2b08      	cmp	r3, #8
 8005718:	d014      	beq.n	8005744 <UART_SetConfig+0x15b4>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	2b09      	cmp	r3, #9
 8005720:	d00e      	beq.n	8005740 <UART_SetConfig+0x15b0>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2b0a      	cmp	r3, #10
 8005728:	d008      	beq.n	800573c <UART_SetConfig+0x15ac>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	2b0b      	cmp	r3, #11
 8005730:	d102      	bne.n	8005738 <UART_SetConfig+0x15a8>
 8005732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005736:	e016      	b.n	8005766 <UART_SetConfig+0x15d6>
 8005738:	2301      	movs	r3, #1
 800573a:	e014      	b.n	8005766 <UART_SetConfig+0x15d6>
 800573c:	2380      	movs	r3, #128	; 0x80
 800573e:	e012      	b.n	8005766 <UART_SetConfig+0x15d6>
 8005740:	2340      	movs	r3, #64	; 0x40
 8005742:	e010      	b.n	8005766 <UART_SetConfig+0x15d6>
 8005744:	2320      	movs	r3, #32
 8005746:	e00e      	b.n	8005766 <UART_SetConfig+0x15d6>
 8005748:	2310      	movs	r3, #16
 800574a:	e00c      	b.n	8005766 <UART_SetConfig+0x15d6>
 800574c:	230c      	movs	r3, #12
 800574e:	e00a      	b.n	8005766 <UART_SetConfig+0x15d6>
 8005750:	230a      	movs	r3, #10
 8005752:	e008      	b.n	8005766 <UART_SetConfig+0x15d6>
 8005754:	2308      	movs	r3, #8
 8005756:	e006      	b.n	8005766 <UART_SetConfig+0x15d6>
 8005758:	2306      	movs	r3, #6
 800575a:	e004      	b.n	8005766 <UART_SetConfig+0x15d6>
 800575c:	2304      	movs	r3, #4
 800575e:	e002      	b.n	8005766 <UART_SetConfig+0x15d6>
 8005760:	2302      	movs	r3, #2
 8005762:	e000      	b.n	8005766 <UART_SetConfig+0x15d6>
 8005764:	2301      	movs	r3, #1
 8005766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	005a      	lsls	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	441a      	add	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	b29b      	uxth	r3, r3
 8005780:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005782:	e2b0      	b.n	8005ce6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005784:	f7fd f97e 	bl	8002a84 <HAL_RCC_GetPCLK2Freq>
 8005788:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	2b00      	cmp	r3, #0
 8005790:	d044      	beq.n	800581c <UART_SetConfig+0x168c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	2b01      	cmp	r3, #1
 8005798:	d03e      	beq.n	8005818 <UART_SetConfig+0x1688>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d038      	beq.n	8005814 <UART_SetConfig+0x1684>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d032      	beq.n	8005810 <UART_SetConfig+0x1680>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d02c      	beq.n	800580c <UART_SetConfig+0x167c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	2b05      	cmp	r3, #5
 80057b8:	d026      	beq.n	8005808 <UART_SetConfig+0x1678>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	2b06      	cmp	r3, #6
 80057c0:	d020      	beq.n	8005804 <UART_SetConfig+0x1674>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	2b07      	cmp	r3, #7
 80057c8:	d01a      	beq.n	8005800 <UART_SetConfig+0x1670>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d014      	beq.n	80057fc <UART_SetConfig+0x166c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	2b09      	cmp	r3, #9
 80057d8:	d00e      	beq.n	80057f8 <UART_SetConfig+0x1668>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	2b0a      	cmp	r3, #10
 80057e0:	d008      	beq.n	80057f4 <UART_SetConfig+0x1664>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	2b0b      	cmp	r3, #11
 80057e8:	d102      	bne.n	80057f0 <UART_SetConfig+0x1660>
 80057ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ee:	e016      	b.n	800581e <UART_SetConfig+0x168e>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e014      	b.n	800581e <UART_SetConfig+0x168e>
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	e012      	b.n	800581e <UART_SetConfig+0x168e>
 80057f8:	2340      	movs	r3, #64	; 0x40
 80057fa:	e010      	b.n	800581e <UART_SetConfig+0x168e>
 80057fc:	2320      	movs	r3, #32
 80057fe:	e00e      	b.n	800581e <UART_SetConfig+0x168e>
 8005800:	2310      	movs	r3, #16
 8005802:	e00c      	b.n	800581e <UART_SetConfig+0x168e>
 8005804:	230c      	movs	r3, #12
 8005806:	e00a      	b.n	800581e <UART_SetConfig+0x168e>
 8005808:	230a      	movs	r3, #10
 800580a:	e008      	b.n	800581e <UART_SetConfig+0x168e>
 800580c:	2308      	movs	r3, #8
 800580e:	e006      	b.n	800581e <UART_SetConfig+0x168e>
 8005810:	2306      	movs	r3, #6
 8005812:	e004      	b.n	800581e <UART_SetConfig+0x168e>
 8005814:	2304      	movs	r3, #4
 8005816:	e002      	b.n	800581e <UART_SetConfig+0x168e>
 8005818:	2302      	movs	r3, #2
 800581a:	e000      	b.n	800581e <UART_SetConfig+0x168e>
 800581c:	2301      	movs	r3, #1
 800581e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005820:	fbb2 f3f3 	udiv	r3, r2, r3
 8005824:	005a      	lsls	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	441a      	add	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	b29b      	uxth	r3, r3
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800583a:	e254      	b.n	8005ce6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800583c:	f107 0318 	add.w	r3, r7, #24
 8005840:	4618      	mov	r0, r3
 8005842:	f7fe f83b 	bl	80038bc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	2b00      	cmp	r3, #0
 800584e:	d044      	beq.n	80058da <UART_SetConfig+0x174a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b01      	cmp	r3, #1
 8005856:	d03e      	beq.n	80058d6 <UART_SetConfig+0x1746>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2b02      	cmp	r3, #2
 800585e:	d038      	beq.n	80058d2 <UART_SetConfig+0x1742>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	2b03      	cmp	r3, #3
 8005866:	d032      	beq.n	80058ce <UART_SetConfig+0x173e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2b04      	cmp	r3, #4
 800586e:	d02c      	beq.n	80058ca <UART_SetConfig+0x173a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	2b05      	cmp	r3, #5
 8005876:	d026      	beq.n	80058c6 <UART_SetConfig+0x1736>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	2b06      	cmp	r3, #6
 800587e:	d020      	beq.n	80058c2 <UART_SetConfig+0x1732>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	2b07      	cmp	r3, #7
 8005886:	d01a      	beq.n	80058be <UART_SetConfig+0x172e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	2b08      	cmp	r3, #8
 800588e:	d014      	beq.n	80058ba <UART_SetConfig+0x172a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	2b09      	cmp	r3, #9
 8005896:	d00e      	beq.n	80058b6 <UART_SetConfig+0x1726>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	2b0a      	cmp	r3, #10
 800589e:	d008      	beq.n	80058b2 <UART_SetConfig+0x1722>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2b0b      	cmp	r3, #11
 80058a6:	d102      	bne.n	80058ae <UART_SetConfig+0x171e>
 80058a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058ac:	e016      	b.n	80058dc <UART_SetConfig+0x174c>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e014      	b.n	80058dc <UART_SetConfig+0x174c>
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	e012      	b.n	80058dc <UART_SetConfig+0x174c>
 80058b6:	2340      	movs	r3, #64	; 0x40
 80058b8:	e010      	b.n	80058dc <UART_SetConfig+0x174c>
 80058ba:	2320      	movs	r3, #32
 80058bc:	e00e      	b.n	80058dc <UART_SetConfig+0x174c>
 80058be:	2310      	movs	r3, #16
 80058c0:	e00c      	b.n	80058dc <UART_SetConfig+0x174c>
 80058c2:	230c      	movs	r3, #12
 80058c4:	e00a      	b.n	80058dc <UART_SetConfig+0x174c>
 80058c6:	230a      	movs	r3, #10
 80058c8:	e008      	b.n	80058dc <UART_SetConfig+0x174c>
 80058ca:	2308      	movs	r3, #8
 80058cc:	e006      	b.n	80058dc <UART_SetConfig+0x174c>
 80058ce:	2306      	movs	r3, #6
 80058d0:	e004      	b.n	80058dc <UART_SetConfig+0x174c>
 80058d2:	2304      	movs	r3, #4
 80058d4:	e002      	b.n	80058dc <UART_SetConfig+0x174c>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e000      	b.n	80058dc <UART_SetConfig+0x174c>
 80058da:	2301      	movs	r3, #1
 80058dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e0:	005a      	lsls	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	441a      	add	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058f6:	e1f6      	b.n	8005ce6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058f8:	f107 030c 	add.w	r3, r7, #12
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe f929 	bl	8003b54 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	2b00      	cmp	r3, #0
 800590a:	d044      	beq.n	8005996 <UART_SetConfig+0x1806>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	2b01      	cmp	r3, #1
 8005912:	d03e      	beq.n	8005992 <UART_SetConfig+0x1802>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	2b02      	cmp	r3, #2
 800591a:	d038      	beq.n	800598e <UART_SetConfig+0x17fe>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	2b03      	cmp	r3, #3
 8005922:	d032      	beq.n	800598a <UART_SetConfig+0x17fa>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	2b04      	cmp	r3, #4
 800592a:	d02c      	beq.n	8005986 <UART_SetConfig+0x17f6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	2b05      	cmp	r3, #5
 8005932:	d026      	beq.n	8005982 <UART_SetConfig+0x17f2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	2b06      	cmp	r3, #6
 800593a:	d020      	beq.n	800597e <UART_SetConfig+0x17ee>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	2b07      	cmp	r3, #7
 8005942:	d01a      	beq.n	800597a <UART_SetConfig+0x17ea>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	2b08      	cmp	r3, #8
 800594a:	d014      	beq.n	8005976 <UART_SetConfig+0x17e6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	2b09      	cmp	r3, #9
 8005952:	d00e      	beq.n	8005972 <UART_SetConfig+0x17e2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	2b0a      	cmp	r3, #10
 800595a:	d008      	beq.n	800596e <UART_SetConfig+0x17de>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	2b0b      	cmp	r3, #11
 8005962:	d102      	bne.n	800596a <UART_SetConfig+0x17da>
 8005964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005968:	e016      	b.n	8005998 <UART_SetConfig+0x1808>
 800596a:	2301      	movs	r3, #1
 800596c:	e014      	b.n	8005998 <UART_SetConfig+0x1808>
 800596e:	2380      	movs	r3, #128	; 0x80
 8005970:	e012      	b.n	8005998 <UART_SetConfig+0x1808>
 8005972:	2340      	movs	r3, #64	; 0x40
 8005974:	e010      	b.n	8005998 <UART_SetConfig+0x1808>
 8005976:	2320      	movs	r3, #32
 8005978:	e00e      	b.n	8005998 <UART_SetConfig+0x1808>
 800597a:	2310      	movs	r3, #16
 800597c:	e00c      	b.n	8005998 <UART_SetConfig+0x1808>
 800597e:	230c      	movs	r3, #12
 8005980:	e00a      	b.n	8005998 <UART_SetConfig+0x1808>
 8005982:	230a      	movs	r3, #10
 8005984:	e008      	b.n	8005998 <UART_SetConfig+0x1808>
 8005986:	2308      	movs	r3, #8
 8005988:	e006      	b.n	8005998 <UART_SetConfig+0x1808>
 800598a:	2306      	movs	r3, #6
 800598c:	e004      	b.n	8005998 <UART_SetConfig+0x1808>
 800598e:	2304      	movs	r3, #4
 8005990:	e002      	b.n	8005998 <UART_SetConfig+0x1808>
 8005992:	2302      	movs	r3, #2
 8005994:	e000      	b.n	8005998 <UART_SetConfig+0x1808>
 8005996:	2301      	movs	r3, #1
 8005998:	fbb2 f3f3 	udiv	r3, r2, r3
 800599c:	005a      	lsls	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	441a      	add	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059b2:	e198      	b.n	8005ce6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b4:	4b87      	ldr	r3, [pc, #540]	; (8005bd4 <UART_SetConfig+0x1a44>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d05e      	beq.n	8005a7e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c0:	4b84      	ldr	r3, [pc, #528]	; (8005bd4 <UART_SetConfig+0x1a44>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	08db      	lsrs	r3, r3, #3
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	4a83      	ldr	r2, [pc, #524]	; (8005bd8 <UART_SetConfig+0x1a48>)
 80059cc:	40da      	lsrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d044      	beq.n	8005a60 <UART_SetConfig+0x18d0>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d03e      	beq.n	8005a5c <UART_SetConfig+0x18cc>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d038      	beq.n	8005a58 <UART_SetConfig+0x18c8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d032      	beq.n	8005a54 <UART_SetConfig+0x18c4>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d02c      	beq.n	8005a50 <UART_SetConfig+0x18c0>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	2b05      	cmp	r3, #5
 80059fc:	d026      	beq.n	8005a4c <UART_SetConfig+0x18bc>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d020      	beq.n	8005a48 <UART_SetConfig+0x18b8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2b07      	cmp	r3, #7
 8005a0c:	d01a      	beq.n	8005a44 <UART_SetConfig+0x18b4>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d014      	beq.n	8005a40 <UART_SetConfig+0x18b0>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b09      	cmp	r3, #9
 8005a1c:	d00e      	beq.n	8005a3c <UART_SetConfig+0x18ac>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b0a      	cmp	r3, #10
 8005a24:	d008      	beq.n	8005a38 <UART_SetConfig+0x18a8>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b0b      	cmp	r3, #11
 8005a2c:	d102      	bne.n	8005a34 <UART_SetConfig+0x18a4>
 8005a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a32:	e016      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e014      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a38:	2380      	movs	r3, #128	; 0x80
 8005a3a:	e012      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a3c:	2340      	movs	r3, #64	; 0x40
 8005a3e:	e010      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a40:	2320      	movs	r3, #32
 8005a42:	e00e      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a44:	2310      	movs	r3, #16
 8005a46:	e00c      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a48:	230c      	movs	r3, #12
 8005a4a:	e00a      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a4c:	230a      	movs	r3, #10
 8005a4e:	e008      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a50:	2308      	movs	r3, #8
 8005a52:	e006      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a54:	2306      	movs	r3, #6
 8005a56:	e004      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	e002      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e000      	b.n	8005a62 <UART_SetConfig+0x18d2>
 8005a60:	2301      	movs	r3, #1
 8005a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a66:	005a      	lsls	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	441a      	add	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005a7c:	e133      	b.n	8005ce6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d043      	beq.n	8005b0e <UART_SetConfig+0x197e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d03d      	beq.n	8005b0a <UART_SetConfig+0x197a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d037      	beq.n	8005b06 <UART_SetConfig+0x1976>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d031      	beq.n	8005b02 <UART_SetConfig+0x1972>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d02b      	beq.n	8005afe <UART_SetConfig+0x196e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d025      	beq.n	8005afa <UART_SetConfig+0x196a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d01f      	beq.n	8005af6 <UART_SetConfig+0x1966>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b07      	cmp	r3, #7
 8005abc:	d019      	beq.n	8005af2 <UART_SetConfig+0x1962>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d013      	beq.n	8005aee <UART_SetConfig+0x195e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	2b09      	cmp	r3, #9
 8005acc:	d00d      	beq.n	8005aea <UART_SetConfig+0x195a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2b0a      	cmp	r3, #10
 8005ad4:	d007      	beq.n	8005ae6 <UART_SetConfig+0x1956>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	2b0b      	cmp	r3, #11
 8005adc:	d101      	bne.n	8005ae2 <UART_SetConfig+0x1952>
 8005ade:	4b3f      	ldr	r3, [pc, #252]	; (8005bdc <UART_SetConfig+0x1a4c>)
 8005ae0:	e016      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005ae2:	4b3f      	ldr	r3, [pc, #252]	; (8005be0 <UART_SetConfig+0x1a50>)
 8005ae4:	e014      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005ae6:	4b3f      	ldr	r3, [pc, #252]	; (8005be4 <UART_SetConfig+0x1a54>)
 8005ae8:	e012      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005aea:	4b3f      	ldr	r3, [pc, #252]	; (8005be8 <UART_SetConfig+0x1a58>)
 8005aec:	e010      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005aee:	4b3f      	ldr	r3, [pc, #252]	; (8005bec <UART_SetConfig+0x1a5c>)
 8005af0:	e00e      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005af2:	4b3f      	ldr	r3, [pc, #252]	; (8005bf0 <UART_SetConfig+0x1a60>)
 8005af4:	e00c      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005af6:	4b3f      	ldr	r3, [pc, #252]	; (8005bf4 <UART_SetConfig+0x1a64>)
 8005af8:	e00a      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005afa:	4b3f      	ldr	r3, [pc, #252]	; (8005bf8 <UART_SetConfig+0x1a68>)
 8005afc:	e008      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005afe:	4b3f      	ldr	r3, [pc, #252]	; (8005bfc <UART_SetConfig+0x1a6c>)
 8005b00:	e006      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005b02:	4b3f      	ldr	r3, [pc, #252]	; (8005c00 <UART_SetConfig+0x1a70>)
 8005b04:	e004      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005b06:	4b3f      	ldr	r3, [pc, #252]	; (8005c04 <UART_SetConfig+0x1a74>)
 8005b08:	e002      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005b0a:	4b33      	ldr	r3, [pc, #204]	; (8005bd8 <UART_SetConfig+0x1a48>)
 8005b0c:	e000      	b.n	8005b10 <UART_SetConfig+0x1980>
 8005b0e:	4b34      	ldr	r3, [pc, #208]	; (8005be0 <UART_SetConfig+0x1a50>)
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6852      	ldr	r2, [r2, #4]
 8005b14:	0852      	lsrs	r2, r2, #1
 8005b16:	441a      	add	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b24:	e0df      	b.n	8005ce6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d045      	beq.n	8005bba <UART_SetConfig+0x1a2a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d03f      	beq.n	8005bb6 <UART_SetConfig+0x1a26>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d039      	beq.n	8005bb2 <UART_SetConfig+0x1a22>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d033      	beq.n	8005bae <UART_SetConfig+0x1a1e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d02d      	beq.n	8005baa <UART_SetConfig+0x1a1a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b05      	cmp	r3, #5
 8005b54:	d027      	beq.n	8005ba6 <UART_SetConfig+0x1a16>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2b06      	cmp	r3, #6
 8005b5c:	d021      	beq.n	8005ba2 <UART_SetConfig+0x1a12>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	2b07      	cmp	r3, #7
 8005b64:	d01b      	beq.n	8005b9e <UART_SetConfig+0x1a0e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d015      	beq.n	8005b9a <UART_SetConfig+0x1a0a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b09      	cmp	r3, #9
 8005b74:	d00f      	beq.n	8005b96 <UART_SetConfig+0x1a06>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b0a      	cmp	r3, #10
 8005b7c:	d008      	beq.n	8005b90 <UART_SetConfig+0x1a00>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b0b      	cmp	r3, #11
 8005b84:	d102      	bne.n	8005b8c <UART_SetConfig+0x19fc>
 8005b86:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005b8a:	e017      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005b8c:	4b18      	ldr	r3, [pc, #96]	; (8005bf0 <UART_SetConfig+0x1a60>)
 8005b8e:	e015      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005b90:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005b94:	e012      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005b96:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <UART_SetConfig+0x1a78>)
 8005b98:	e010      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005b9a:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <UART_SetConfig+0x1a7c>)
 8005b9c:	e00e      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <UART_SetConfig+0x1a4c>)
 8005ba0:	e00c      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <UART_SetConfig+0x1a80>)
 8005ba4:	e00a      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005ba6:	4b1b      	ldr	r3, [pc, #108]	; (8005c14 <UART_SetConfig+0x1a84>)
 8005ba8:	e008      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005baa:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <UART_SetConfig+0x1a54>)
 8005bac:	e006      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005bae:	4b1a      	ldr	r3, [pc, #104]	; (8005c18 <UART_SetConfig+0x1a88>)
 8005bb0:	e004      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <UART_SetConfig+0x1a58>)
 8005bb4:	e002      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	; (8005bec <UART_SetConfig+0x1a5c>)
 8005bb8:	e000      	b.n	8005bbc <UART_SetConfig+0x1a2c>
 8005bba:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <UART_SetConfig+0x1a60>)
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6852      	ldr	r2, [r2, #4]
 8005bc0:	0852      	lsrs	r2, r2, #1
 8005bc2:	441a      	add	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bd0:	e089      	b.n	8005ce6 <UART_SetConfig+0x1b56>
 8005bd2:	bf00      	nop
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	03d09000 	.word	0x03d09000
 8005bdc:	0007a120 	.word	0x0007a120
 8005be0:	07a12000 	.word	0x07a12000
 8005be4:	000f4240 	.word	0x000f4240
 8005be8:	001e8480 	.word	0x001e8480
 8005bec:	003d0900 	.word	0x003d0900
 8005bf0:	007a1200 	.word	0x007a1200
 8005bf4:	00a2c2aa 	.word	0x00a2c2aa
 8005bf8:	00c35000 	.word	0x00c35000
 8005bfc:	00f42400 	.word	0x00f42400
 8005c00:	01458554 	.word	0x01458554
 8005c04:	01e84800 	.word	0x01e84800
 8005c08:	0001e848 	.word	0x0001e848
 8005c0c:	0003d090 	.word	0x0003d090
 8005c10:	000a2c2a 	.word	0x000a2c2a
 8005c14:	000c3500 	.word	0x000c3500
 8005c18:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d04f      	beq.n	8005cc4 <UART_SetConfig+0x1b34>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d048      	beq.n	8005cbe <UART_SetConfig+0x1b2e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d041      	beq.n	8005cb8 <UART_SetConfig+0x1b28>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d03a      	beq.n	8005cb2 <UART_SetConfig+0x1b22>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d033      	beq.n	8005cac <UART_SetConfig+0x1b1c>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	2b05      	cmp	r3, #5
 8005c4a:	d02c      	beq.n	8005ca6 <UART_SetConfig+0x1b16>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2b06      	cmp	r3, #6
 8005c52:	d025      	beq.n	8005ca0 <UART_SetConfig+0x1b10>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2b07      	cmp	r3, #7
 8005c5a:	d01e      	beq.n	8005c9a <UART_SetConfig+0x1b0a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d017      	beq.n	8005c94 <UART_SetConfig+0x1b04>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b09      	cmp	r3, #9
 8005c6a:	d010      	beq.n	8005c8e <UART_SetConfig+0x1afe>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b0a      	cmp	r3, #10
 8005c72:	d009      	beq.n	8005c88 <UART_SetConfig+0x1af8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	2b0b      	cmp	r3, #11
 8005c7a:	d102      	bne.n	8005c82 <UART_SetConfig+0x1af2>
 8005c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c80:	e022      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c86:	e01f      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c8c:	e01c      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c92:	e019      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005c94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c98:	e016      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c9e:	e013      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005ca0:	f241 5354 	movw	r3, #5460	; 0x1554
 8005ca4:	e010      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005ca6:	f641 1398 	movw	r3, #6552	; 0x1998
 8005caa:	e00d      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cb0:	e00a      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005cb2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005cb6:	e007      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005cb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005cbc:	e004      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc2:	e001      	b.n	8005cc8 <UART_SetConfig+0x1b38>
 8005cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6852      	ldr	r2, [r2, #4]
 8005ccc:	0852      	lsrs	r2, r2, #1
 8005cce:	441a      	add	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cdc:	e003      	b.n	8005ce6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce8:	2b0f      	cmp	r3, #15
 8005cea:	d916      	bls.n	8005d1a <UART_SetConfig+0x1b8a>
 8005cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf2:	d212      	bcs.n	8005d1a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f023 030f 	bic.w	r3, r3, #15
 8005cfc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d16:	60da      	str	r2, [r3, #12]
 8005d18:	e3a3      	b.n	8006462 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d20:	e39f      	b.n	8006462 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8005d22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005d26:	2b40      	cmp	r3, #64	; 0x40
 8005d28:	f200 8388 	bhi.w	800643c <UART_SetConfig+0x22ac>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <UART_SetConfig+0x1ba4>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005e39 	.word	0x08005e39
 8005d38:	08005eef 	.word	0x08005eef
 8005d3c:	0800643d 	.word	0x0800643d
 8005d40:	0800643d 	.word	0x0800643d
 8005d44:	08005fa5 	.word	0x08005fa5
 8005d48:	0800643d 	.word	0x0800643d
 8005d4c:	0800643d 	.word	0x0800643d
 8005d50:	0800643d 	.word	0x0800643d
 8005d54:	0800605f 	.word	0x0800605f
 8005d58:	0800643d 	.word	0x0800643d
 8005d5c:	0800643d 	.word	0x0800643d
 8005d60:	0800643d 	.word	0x0800643d
 8005d64:	0800643d 	.word	0x0800643d
 8005d68:	0800643d 	.word	0x0800643d
 8005d6c:	0800643d 	.word	0x0800643d
 8005d70:	0800643d 	.word	0x0800643d
 8005d74:	08006119 	.word	0x08006119
 8005d78:	0800643d 	.word	0x0800643d
 8005d7c:	0800643d 	.word	0x0800643d
 8005d80:	0800643d 	.word	0x0800643d
 8005d84:	0800643d 	.word	0x0800643d
 8005d88:	0800643d 	.word	0x0800643d
 8005d8c:	0800643d 	.word	0x0800643d
 8005d90:	0800643d 	.word	0x0800643d
 8005d94:	0800643d 	.word	0x0800643d
 8005d98:	0800643d 	.word	0x0800643d
 8005d9c:	0800643d 	.word	0x0800643d
 8005da0:	0800643d 	.word	0x0800643d
 8005da4:	0800643d 	.word	0x0800643d
 8005da8:	0800643d 	.word	0x0800643d
 8005dac:	0800643d 	.word	0x0800643d
 8005db0:	0800643d 	.word	0x0800643d
 8005db4:	08006289 	.word	0x08006289
 8005db8:	0800643d 	.word	0x0800643d
 8005dbc:	0800643d 	.word	0x0800643d
 8005dc0:	0800643d 	.word	0x0800643d
 8005dc4:	0800643d 	.word	0x0800643d
 8005dc8:	0800643d 	.word	0x0800643d
 8005dcc:	0800643d 	.word	0x0800643d
 8005dd0:	0800643d 	.word	0x0800643d
 8005dd4:	0800643d 	.word	0x0800643d
 8005dd8:	0800643d 	.word	0x0800643d
 8005ddc:	0800643d 	.word	0x0800643d
 8005de0:	0800643d 	.word	0x0800643d
 8005de4:	0800643d 	.word	0x0800643d
 8005de8:	0800643d 	.word	0x0800643d
 8005dec:	0800643d 	.word	0x0800643d
 8005df0:	0800643d 	.word	0x0800643d
 8005df4:	0800643d 	.word	0x0800643d
 8005df8:	0800643d 	.word	0x0800643d
 8005dfc:	0800643d 	.word	0x0800643d
 8005e00:	0800643d 	.word	0x0800643d
 8005e04:	0800643d 	.word	0x0800643d
 8005e08:	0800643d 	.word	0x0800643d
 8005e0c:	0800643d 	.word	0x0800643d
 8005e10:	0800643d 	.word	0x0800643d
 8005e14:	0800643d 	.word	0x0800643d
 8005e18:	0800643d 	.word	0x0800643d
 8005e1c:	0800643d 	.word	0x0800643d
 8005e20:	0800643d 	.word	0x0800643d
 8005e24:	0800643d 	.word	0x0800643d
 8005e28:	0800643d 	.word	0x0800643d
 8005e2c:	0800643d 	.word	0x0800643d
 8005e30:	0800643d 	.word	0x0800643d
 8005e34:	0800637d 	.word	0x0800637d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e38:	f7fc fe0e 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 8005e3c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d044      	beq.n	8005ed0 <UART_SetConfig+0x1d40>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d03e      	beq.n	8005ecc <UART_SetConfig+0x1d3c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d038      	beq.n	8005ec8 <UART_SetConfig+0x1d38>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d032      	beq.n	8005ec4 <UART_SetConfig+0x1d34>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d02c      	beq.n	8005ec0 <UART_SetConfig+0x1d30>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d026      	beq.n	8005ebc <UART_SetConfig+0x1d2c>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	2b06      	cmp	r3, #6
 8005e74:	d020      	beq.n	8005eb8 <UART_SetConfig+0x1d28>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	2b07      	cmp	r3, #7
 8005e7c:	d01a      	beq.n	8005eb4 <UART_SetConfig+0x1d24>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d014      	beq.n	8005eb0 <UART_SetConfig+0x1d20>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	2b09      	cmp	r3, #9
 8005e8c:	d00e      	beq.n	8005eac <UART_SetConfig+0x1d1c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	2b0a      	cmp	r3, #10
 8005e94:	d008      	beq.n	8005ea8 <UART_SetConfig+0x1d18>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	2b0b      	cmp	r3, #11
 8005e9c:	d102      	bne.n	8005ea4 <UART_SetConfig+0x1d14>
 8005e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ea2:	e016      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e014      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	e012      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005eac:	2340      	movs	r3, #64	; 0x40
 8005eae:	e010      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	e00e      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	e00c      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005eb8:	230c      	movs	r3, #12
 8005eba:	e00a      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005ebc:	230a      	movs	r3, #10
 8005ebe:	e008      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	e006      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005ec4:	2306      	movs	r3, #6
 8005ec6:	e004      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	e002      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e000      	b.n	8005ed2 <UART_SetConfig+0x1d42>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	441a      	add	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eec:	e2aa      	b.n	8006444 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eee:	f7fc fdc9 	bl	8002a84 <HAL_RCC_GetPCLK2Freq>
 8005ef2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d044      	beq.n	8005f86 <UART_SetConfig+0x1df6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d03e      	beq.n	8005f82 <UART_SetConfig+0x1df2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d038      	beq.n	8005f7e <UART_SetConfig+0x1dee>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d032      	beq.n	8005f7a <UART_SetConfig+0x1dea>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d02c      	beq.n	8005f76 <UART_SetConfig+0x1de6>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	2b05      	cmp	r3, #5
 8005f22:	d026      	beq.n	8005f72 <UART_SetConfig+0x1de2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b06      	cmp	r3, #6
 8005f2a:	d020      	beq.n	8005f6e <UART_SetConfig+0x1dde>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	2b07      	cmp	r3, #7
 8005f32:	d01a      	beq.n	8005f6a <UART_SetConfig+0x1dda>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d014      	beq.n	8005f66 <UART_SetConfig+0x1dd6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b09      	cmp	r3, #9
 8005f42:	d00e      	beq.n	8005f62 <UART_SetConfig+0x1dd2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b0a      	cmp	r3, #10
 8005f4a:	d008      	beq.n	8005f5e <UART_SetConfig+0x1dce>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	2b0b      	cmp	r3, #11
 8005f52:	d102      	bne.n	8005f5a <UART_SetConfig+0x1dca>
 8005f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f58:	e016      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e014      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f5e:	2380      	movs	r3, #128	; 0x80
 8005f60:	e012      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f62:	2340      	movs	r3, #64	; 0x40
 8005f64:	e010      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f66:	2320      	movs	r3, #32
 8005f68:	e00e      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f6a:	2310      	movs	r3, #16
 8005f6c:	e00c      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f6e:	230c      	movs	r3, #12
 8005f70:	e00a      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f72:	230a      	movs	r3, #10
 8005f74:	e008      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f76:	2308      	movs	r3, #8
 8005f78:	e006      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f7a:	2306      	movs	r3, #6
 8005f7c:	e004      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f7e:	2304      	movs	r3, #4
 8005f80:	e002      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e000      	b.n	8005f88 <UART_SetConfig+0x1df8>
 8005f86:	2301      	movs	r3, #1
 8005f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	085b      	lsrs	r3, r3, #1
 8005f94:	441a      	add	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fa2:	e24f      	b.n	8006444 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fa4:	f107 0318 	add.w	r3, r7, #24
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fd fc87 	bl	80038bc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d044      	beq.n	8006042 <UART_SetConfig+0x1eb2>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d03e      	beq.n	800603e <UART_SetConfig+0x1eae>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d038      	beq.n	800603a <UART_SetConfig+0x1eaa>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d032      	beq.n	8006036 <UART_SetConfig+0x1ea6>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d02c      	beq.n	8006032 <UART_SetConfig+0x1ea2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	2b05      	cmp	r3, #5
 8005fde:	d026      	beq.n	800602e <UART_SetConfig+0x1e9e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	2b06      	cmp	r3, #6
 8005fe6:	d020      	beq.n	800602a <UART_SetConfig+0x1e9a>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	2b07      	cmp	r3, #7
 8005fee:	d01a      	beq.n	8006026 <UART_SetConfig+0x1e96>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d014      	beq.n	8006022 <UART_SetConfig+0x1e92>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2b09      	cmp	r3, #9
 8005ffe:	d00e      	beq.n	800601e <UART_SetConfig+0x1e8e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	2b0a      	cmp	r3, #10
 8006006:	d008      	beq.n	800601a <UART_SetConfig+0x1e8a>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b0b      	cmp	r3, #11
 800600e:	d102      	bne.n	8006016 <UART_SetConfig+0x1e86>
 8006010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006014:	e016      	b.n	8006044 <UART_SetConfig+0x1eb4>
 8006016:	2301      	movs	r3, #1
 8006018:	e014      	b.n	8006044 <UART_SetConfig+0x1eb4>
 800601a:	2380      	movs	r3, #128	; 0x80
 800601c:	e012      	b.n	8006044 <UART_SetConfig+0x1eb4>
 800601e:	2340      	movs	r3, #64	; 0x40
 8006020:	e010      	b.n	8006044 <UART_SetConfig+0x1eb4>
 8006022:	2320      	movs	r3, #32
 8006024:	e00e      	b.n	8006044 <UART_SetConfig+0x1eb4>
 8006026:	2310      	movs	r3, #16
 8006028:	e00c      	b.n	8006044 <UART_SetConfig+0x1eb4>
 800602a:	230c      	movs	r3, #12
 800602c:	e00a      	b.n	8006044 <UART_SetConfig+0x1eb4>
 800602e:	230a      	movs	r3, #10
 8006030:	e008      	b.n	8006044 <UART_SetConfig+0x1eb4>
 8006032:	2308      	movs	r3, #8
 8006034:	e006      	b.n	8006044 <UART_SetConfig+0x1eb4>
 8006036:	2306      	movs	r3, #6
 8006038:	e004      	b.n	8006044 <UART_SetConfig+0x1eb4>
 800603a:	2304      	movs	r3, #4
 800603c:	e002      	b.n	8006044 <UART_SetConfig+0x1eb4>
 800603e:	2302      	movs	r3, #2
 8006040:	e000      	b.n	8006044 <UART_SetConfig+0x1eb4>
 8006042:	2301      	movs	r3, #1
 8006044:	fbb2 f2f3 	udiv	r2, r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	085b      	lsrs	r3, r3, #1
 800604e:	441a      	add	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	fbb2 f3f3 	udiv	r3, r2, r3
 8006058:	b29b      	uxth	r3, r3
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800605c:	e1f2      	b.n	8006444 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800605e:	f107 030c 	add.w	r3, r7, #12
 8006062:	4618      	mov	r0, r3
 8006064:	f7fd fd76 	bl	8003b54 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	2b00      	cmp	r3, #0
 8006070:	d044      	beq.n	80060fc <UART_SetConfig+0x1f6c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	2b01      	cmp	r3, #1
 8006078:	d03e      	beq.n	80060f8 <UART_SetConfig+0x1f68>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	2b02      	cmp	r3, #2
 8006080:	d038      	beq.n	80060f4 <UART_SetConfig+0x1f64>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	2b03      	cmp	r3, #3
 8006088:	d032      	beq.n	80060f0 <UART_SetConfig+0x1f60>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	2b04      	cmp	r3, #4
 8006090:	d02c      	beq.n	80060ec <UART_SetConfig+0x1f5c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	2b05      	cmp	r3, #5
 8006098:	d026      	beq.n	80060e8 <UART_SetConfig+0x1f58>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	2b06      	cmp	r3, #6
 80060a0:	d020      	beq.n	80060e4 <UART_SetConfig+0x1f54>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	2b07      	cmp	r3, #7
 80060a8:	d01a      	beq.n	80060e0 <UART_SetConfig+0x1f50>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d014      	beq.n	80060dc <UART_SetConfig+0x1f4c>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	2b09      	cmp	r3, #9
 80060b8:	d00e      	beq.n	80060d8 <UART_SetConfig+0x1f48>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	2b0a      	cmp	r3, #10
 80060c0:	d008      	beq.n	80060d4 <UART_SetConfig+0x1f44>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	2b0b      	cmp	r3, #11
 80060c8:	d102      	bne.n	80060d0 <UART_SetConfig+0x1f40>
 80060ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060ce:	e016      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e014      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060d4:	2380      	movs	r3, #128	; 0x80
 80060d6:	e012      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060d8:	2340      	movs	r3, #64	; 0x40
 80060da:	e010      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060dc:	2320      	movs	r3, #32
 80060de:	e00e      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060e0:	2310      	movs	r3, #16
 80060e2:	e00c      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060e4:	230c      	movs	r3, #12
 80060e6:	e00a      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060e8:	230a      	movs	r3, #10
 80060ea:	e008      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060ec:	2308      	movs	r3, #8
 80060ee:	e006      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060f0:	2306      	movs	r3, #6
 80060f2:	e004      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060f4:	2304      	movs	r3, #4
 80060f6:	e002      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e000      	b.n	80060fe <UART_SetConfig+0x1f6e>
 80060fc:	2301      	movs	r3, #1
 80060fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	441a      	add	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	b29b      	uxth	r3, r3
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006116:	e195      	b.n	8006444 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006118:	4b87      	ldr	r3, [pc, #540]	; (8006338 <UART_SetConfig+0x21a8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d05d      	beq.n	80061e0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006124:	4b84      	ldr	r3, [pc, #528]	; (8006338 <UART_SetConfig+0x21a8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	08db      	lsrs	r3, r3, #3
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	4a83      	ldr	r2, [pc, #524]	; (800633c <UART_SetConfig+0x21ac>)
 8006130:	40da      	lsrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	2b00      	cmp	r3, #0
 8006138:	d044      	beq.n	80061c4 <UART_SetConfig+0x2034>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	2b01      	cmp	r3, #1
 8006140:	d03e      	beq.n	80061c0 <UART_SetConfig+0x2030>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b02      	cmp	r3, #2
 8006148:	d038      	beq.n	80061bc <UART_SetConfig+0x202c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	2b03      	cmp	r3, #3
 8006150:	d032      	beq.n	80061b8 <UART_SetConfig+0x2028>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	2b04      	cmp	r3, #4
 8006158:	d02c      	beq.n	80061b4 <UART_SetConfig+0x2024>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	2b05      	cmp	r3, #5
 8006160:	d026      	beq.n	80061b0 <UART_SetConfig+0x2020>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	2b06      	cmp	r3, #6
 8006168:	d020      	beq.n	80061ac <UART_SetConfig+0x201c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	2b07      	cmp	r3, #7
 8006170:	d01a      	beq.n	80061a8 <UART_SetConfig+0x2018>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	2b08      	cmp	r3, #8
 8006178:	d014      	beq.n	80061a4 <UART_SetConfig+0x2014>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b09      	cmp	r3, #9
 8006180:	d00e      	beq.n	80061a0 <UART_SetConfig+0x2010>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	2b0a      	cmp	r3, #10
 8006188:	d008      	beq.n	800619c <UART_SetConfig+0x200c>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2b0b      	cmp	r3, #11
 8006190:	d102      	bne.n	8006198 <UART_SetConfig+0x2008>
 8006192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006196:	e016      	b.n	80061c6 <UART_SetConfig+0x2036>
 8006198:	2301      	movs	r3, #1
 800619a:	e014      	b.n	80061c6 <UART_SetConfig+0x2036>
 800619c:	2380      	movs	r3, #128	; 0x80
 800619e:	e012      	b.n	80061c6 <UART_SetConfig+0x2036>
 80061a0:	2340      	movs	r3, #64	; 0x40
 80061a2:	e010      	b.n	80061c6 <UART_SetConfig+0x2036>
 80061a4:	2320      	movs	r3, #32
 80061a6:	e00e      	b.n	80061c6 <UART_SetConfig+0x2036>
 80061a8:	2310      	movs	r3, #16
 80061aa:	e00c      	b.n	80061c6 <UART_SetConfig+0x2036>
 80061ac:	230c      	movs	r3, #12
 80061ae:	e00a      	b.n	80061c6 <UART_SetConfig+0x2036>
 80061b0:	230a      	movs	r3, #10
 80061b2:	e008      	b.n	80061c6 <UART_SetConfig+0x2036>
 80061b4:	2308      	movs	r3, #8
 80061b6:	e006      	b.n	80061c6 <UART_SetConfig+0x2036>
 80061b8:	2306      	movs	r3, #6
 80061ba:	e004      	b.n	80061c6 <UART_SetConfig+0x2036>
 80061bc:	2304      	movs	r3, #4
 80061be:	e002      	b.n	80061c6 <UART_SetConfig+0x2036>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e000      	b.n	80061c6 <UART_SetConfig+0x2036>
 80061c4:	2301      	movs	r3, #1
 80061c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	441a      	add	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	b29b      	uxth	r3, r3
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80061de:	e131      	b.n	8006444 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d043      	beq.n	8006270 <UART_SetConfig+0x20e0>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d03d      	beq.n	800626c <UART_SetConfig+0x20dc>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d037      	beq.n	8006268 <UART_SetConfig+0x20d8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d031      	beq.n	8006264 <UART_SetConfig+0x20d4>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	2b04      	cmp	r3, #4
 8006206:	d02b      	beq.n	8006260 <UART_SetConfig+0x20d0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	2b05      	cmp	r3, #5
 800620e:	d025      	beq.n	800625c <UART_SetConfig+0x20cc>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	2b06      	cmp	r3, #6
 8006216:	d01f      	beq.n	8006258 <UART_SetConfig+0x20c8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	2b07      	cmp	r3, #7
 800621e:	d019      	beq.n	8006254 <UART_SetConfig+0x20c4>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	2b08      	cmp	r3, #8
 8006226:	d013      	beq.n	8006250 <UART_SetConfig+0x20c0>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	2b09      	cmp	r3, #9
 800622e:	d00d      	beq.n	800624c <UART_SetConfig+0x20bc>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	2b0a      	cmp	r3, #10
 8006236:	d007      	beq.n	8006248 <UART_SetConfig+0x20b8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	2b0b      	cmp	r3, #11
 800623e:	d101      	bne.n	8006244 <UART_SetConfig+0x20b4>
 8006240:	4b3f      	ldr	r3, [pc, #252]	; (8006340 <UART_SetConfig+0x21b0>)
 8006242:	e016      	b.n	8006272 <UART_SetConfig+0x20e2>
 8006244:	4b3d      	ldr	r3, [pc, #244]	; (800633c <UART_SetConfig+0x21ac>)
 8006246:	e014      	b.n	8006272 <UART_SetConfig+0x20e2>
 8006248:	4b3e      	ldr	r3, [pc, #248]	; (8006344 <UART_SetConfig+0x21b4>)
 800624a:	e012      	b.n	8006272 <UART_SetConfig+0x20e2>
 800624c:	4b3e      	ldr	r3, [pc, #248]	; (8006348 <UART_SetConfig+0x21b8>)
 800624e:	e010      	b.n	8006272 <UART_SetConfig+0x20e2>
 8006250:	4b3e      	ldr	r3, [pc, #248]	; (800634c <UART_SetConfig+0x21bc>)
 8006252:	e00e      	b.n	8006272 <UART_SetConfig+0x20e2>
 8006254:	4b3e      	ldr	r3, [pc, #248]	; (8006350 <UART_SetConfig+0x21c0>)
 8006256:	e00c      	b.n	8006272 <UART_SetConfig+0x20e2>
 8006258:	4b3e      	ldr	r3, [pc, #248]	; (8006354 <UART_SetConfig+0x21c4>)
 800625a:	e00a      	b.n	8006272 <UART_SetConfig+0x20e2>
 800625c:	4b3e      	ldr	r3, [pc, #248]	; (8006358 <UART_SetConfig+0x21c8>)
 800625e:	e008      	b.n	8006272 <UART_SetConfig+0x20e2>
 8006260:	4b3e      	ldr	r3, [pc, #248]	; (800635c <UART_SetConfig+0x21cc>)
 8006262:	e006      	b.n	8006272 <UART_SetConfig+0x20e2>
 8006264:	4b3e      	ldr	r3, [pc, #248]	; (8006360 <UART_SetConfig+0x21d0>)
 8006266:	e004      	b.n	8006272 <UART_SetConfig+0x20e2>
 8006268:	4b3e      	ldr	r3, [pc, #248]	; (8006364 <UART_SetConfig+0x21d4>)
 800626a:	e002      	b.n	8006272 <UART_SetConfig+0x20e2>
 800626c:	4b3e      	ldr	r3, [pc, #248]	; (8006368 <UART_SetConfig+0x21d8>)
 800626e:	e000      	b.n	8006272 <UART_SetConfig+0x20e2>
 8006270:	4b32      	ldr	r3, [pc, #200]	; (800633c <UART_SetConfig+0x21ac>)
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6852      	ldr	r2, [r2, #4]
 8006276:	0852      	lsrs	r2, r2, #1
 8006278:	441a      	add	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006282:	b29b      	uxth	r3, r3
 8006284:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006286:	e0dd      	b.n	8006444 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	2b00      	cmp	r3, #0
 800628e:	d046      	beq.n	800631e <UART_SetConfig+0x218e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	2b01      	cmp	r3, #1
 8006296:	d040      	beq.n	800631a <UART_SetConfig+0x218a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	2b02      	cmp	r3, #2
 800629e:	d03a      	beq.n	8006316 <UART_SetConfig+0x2186>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d034      	beq.n	8006312 <UART_SetConfig+0x2182>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d02e      	beq.n	800630e <UART_SetConfig+0x217e>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	2b05      	cmp	r3, #5
 80062b6:	d028      	beq.n	800630a <UART_SetConfig+0x217a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	2b06      	cmp	r3, #6
 80062be:	d022      	beq.n	8006306 <UART_SetConfig+0x2176>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	2b07      	cmp	r3, #7
 80062c6:	d01c      	beq.n	8006302 <UART_SetConfig+0x2172>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d016      	beq.n	80062fe <UART_SetConfig+0x216e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	2b09      	cmp	r3, #9
 80062d6:	d00f      	beq.n	80062f8 <UART_SetConfig+0x2168>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	2b0a      	cmp	r3, #10
 80062de:	d008      	beq.n	80062f2 <UART_SetConfig+0x2162>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	2b0b      	cmp	r3, #11
 80062e6:	d102      	bne.n	80062ee <UART_SetConfig+0x215e>
 80062e8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80062ec:	e018      	b.n	8006320 <UART_SetConfig+0x2190>
 80062ee:	4b18      	ldr	r3, [pc, #96]	; (8006350 <UART_SetConfig+0x21c0>)
 80062f0:	e016      	b.n	8006320 <UART_SetConfig+0x2190>
 80062f2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80062f6:	e013      	b.n	8006320 <UART_SetConfig+0x2190>
 80062f8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80062fc:	e010      	b.n	8006320 <UART_SetConfig+0x2190>
 80062fe:	4b1b      	ldr	r3, [pc, #108]	; (800636c <UART_SetConfig+0x21dc>)
 8006300:	e00e      	b.n	8006320 <UART_SetConfig+0x2190>
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <UART_SetConfig+0x21b0>)
 8006304:	e00c      	b.n	8006320 <UART_SetConfig+0x2190>
 8006306:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <UART_SetConfig+0x21e0>)
 8006308:	e00a      	b.n	8006320 <UART_SetConfig+0x2190>
 800630a:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <UART_SetConfig+0x21e4>)
 800630c:	e008      	b.n	8006320 <UART_SetConfig+0x2190>
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <UART_SetConfig+0x21b4>)
 8006310:	e006      	b.n	8006320 <UART_SetConfig+0x2190>
 8006312:	4b19      	ldr	r3, [pc, #100]	; (8006378 <UART_SetConfig+0x21e8>)
 8006314:	e004      	b.n	8006320 <UART_SetConfig+0x2190>
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <UART_SetConfig+0x21b8>)
 8006318:	e002      	b.n	8006320 <UART_SetConfig+0x2190>
 800631a:	4b0c      	ldr	r3, [pc, #48]	; (800634c <UART_SetConfig+0x21bc>)
 800631c:	e000      	b.n	8006320 <UART_SetConfig+0x2190>
 800631e:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <UART_SetConfig+0x21c0>)
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6852      	ldr	r2, [r2, #4]
 8006324:	0852      	lsrs	r2, r2, #1
 8006326:	441a      	add	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	b29b      	uxth	r3, r3
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006334:	e086      	b.n	8006444 <UART_SetConfig+0x22b4>
 8006336:	bf00      	nop
 8006338:	58024400 	.word	0x58024400
 800633c:	03d09000 	.word	0x03d09000
 8006340:	0003d090 	.word	0x0003d090
 8006344:	0007a120 	.word	0x0007a120
 8006348:	000f4240 	.word	0x000f4240
 800634c:	001e8480 	.word	0x001e8480
 8006350:	003d0900 	.word	0x003d0900
 8006354:	00516155 	.word	0x00516155
 8006358:	0061a800 	.word	0x0061a800
 800635c:	007a1200 	.word	0x007a1200
 8006360:	00a2c2aa 	.word	0x00a2c2aa
 8006364:	00f42400 	.word	0x00f42400
 8006368:	01e84800 	.word	0x01e84800
 800636c:	0001e848 	.word	0x0001e848
 8006370:	00051615 	.word	0x00051615
 8006374:	00061a80 	.word	0x00061a80
 8006378:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b00      	cmp	r3, #0
 8006382:	d04e      	beq.n	8006422 <UART_SetConfig+0x2292>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	2b01      	cmp	r3, #1
 800638a:	d047      	beq.n	800641c <UART_SetConfig+0x228c>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b02      	cmp	r3, #2
 8006392:	d040      	beq.n	8006416 <UART_SetConfig+0x2286>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	2b03      	cmp	r3, #3
 800639a:	d039      	beq.n	8006410 <UART_SetConfig+0x2280>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d032      	beq.n	800640a <UART_SetConfig+0x227a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b05      	cmp	r3, #5
 80063aa:	d02b      	beq.n	8006404 <UART_SetConfig+0x2274>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b06      	cmp	r3, #6
 80063b2:	d024      	beq.n	80063fe <UART_SetConfig+0x226e>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b07      	cmp	r3, #7
 80063ba:	d01d      	beq.n	80063f8 <UART_SetConfig+0x2268>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d016      	beq.n	80063f2 <UART_SetConfig+0x2262>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	2b09      	cmp	r3, #9
 80063ca:	d00f      	beq.n	80063ec <UART_SetConfig+0x225c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	2b0a      	cmp	r3, #10
 80063d2:	d008      	beq.n	80063e6 <UART_SetConfig+0x2256>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	2b0b      	cmp	r3, #11
 80063da:	d101      	bne.n	80063e0 <UART_SetConfig+0x2250>
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	e022      	b.n	8006426 <UART_SetConfig+0x2296>
 80063e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e4:	e01f      	b.n	8006426 <UART_SetConfig+0x2296>
 80063e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063ea:	e01c      	b.n	8006426 <UART_SetConfig+0x2296>
 80063ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063f0:	e019      	b.n	8006426 <UART_SetConfig+0x2296>
 80063f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063f6:	e016      	b.n	8006426 <UART_SetConfig+0x2296>
 80063f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063fc:	e013      	b.n	8006426 <UART_SetConfig+0x2296>
 80063fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006402:	e010      	b.n	8006426 <UART_SetConfig+0x2296>
 8006404:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006408:	e00d      	b.n	8006426 <UART_SetConfig+0x2296>
 800640a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800640e:	e00a      	b.n	8006426 <UART_SetConfig+0x2296>
 8006410:	f241 5355 	movw	r3, #5461	; 0x1555
 8006414:	e007      	b.n	8006426 <UART_SetConfig+0x2296>
 8006416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800641a:	e004      	b.n	8006426 <UART_SetConfig+0x2296>
 800641c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006420:	e001      	b.n	8006426 <UART_SetConfig+0x2296>
 8006422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6852      	ldr	r2, [r2, #4]
 800642a:	0852      	lsrs	r2, r2, #1
 800642c:	441a      	add	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	fbb2 f3f3 	udiv	r3, r2, r3
 8006436:	b29b      	uxth	r3, r3
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800643a:	e003      	b.n	8006444 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006442:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	2b0f      	cmp	r3, #15
 8006448:	d908      	bls.n	800645c <UART_SetConfig+0x22cc>
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006450:	d204      	bcs.n	800645c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	e002      	b.n	8006462 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800647e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006482:	4618      	mov	r0, r3
 8006484:	3740      	adds	r7, #64	; 0x40
 8006486:	46bd      	mov	sp, r7
 8006488:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800648c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01a      	beq.n	80065a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800658a:	d10a      	bne.n	80065a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80065e0:	f7fa f87c 	bl	80006dc <HAL_GetTick>
 80065e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d10e      	bne.n	8006612 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f82c 	bl	8006660 <UART_WaitOnFlagUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e022      	b.n	8006658 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b04      	cmp	r3, #4
 800661e:	d10e      	bne.n	800663e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f816 	bl	8006660 <UART_WaitOnFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e00c      	b.n	8006658 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	4613      	mov	r3, r2
 800666e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006670:	e062      	b.n	8006738 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d05e      	beq.n	8006738 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667a:	f7fa f82f 	bl	80006dc <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	429a      	cmp	r2, r3
 8006688:	d302      	bcc.n	8006690 <UART_WaitOnFlagUntilTimeout+0x30>
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d11d      	bne.n	80066cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800669e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e045      	b.n	8006758 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d02e      	beq.n	8006738 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e8:	d126      	bne.n	8006738 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066f2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006702:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0201 	bic.w	r2, r2, #1
 8006712:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e00f      	b.n	8006758 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69da      	ldr	r2, [r3, #28]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	4013      	ands	r3, r2
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	429a      	cmp	r2, r3
 8006746:	bf0c      	ite	eq
 8006748:	2301      	moveq	r3, #1
 800674a:	2300      	movne	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	461a      	mov	r2, r3
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	429a      	cmp	r2, r3
 8006754:	d08d      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_UARTEx_DisableFifoMode+0x16>
 8006772:	2302      	movs	r3, #2
 8006774:	e027      	b.n	80067c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2224      	movs	r2, #36	; 0x24
 8006782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e02d      	b.n	8006846 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2224      	movs	r2, #36	; 0x24
 80067f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f850 	bl	80068cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800685e:	2b01      	cmp	r3, #1
 8006860:	d101      	bne.n	8006866 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006862:	2302      	movs	r3, #2
 8006864:	e02d      	b.n	80068c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2224      	movs	r2, #36	; 0x24
 8006872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0201 	bic.w	r2, r2, #1
 800688c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f812 	bl	80068cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b089      	sub	sp, #36	; 0x24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80068d4:	4a2f      	ldr	r2, [pc, #188]	; (8006994 <UARTEx_SetNbDataToProcess+0xc8>)
 80068d6:	f107 0314 	add.w	r3, r7, #20
 80068da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068de:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80068e2:	4a2d      	ldr	r2, [pc, #180]	; (8006998 <UARTEx_SetNbDataToProcess+0xcc>)
 80068e4:	f107 030c 	add.w	r3, r7, #12
 80068e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068ec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d108      	bne.n	800690a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006908:	e03d      	b.n	8006986 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800690a:	2308      	movs	r3, #8
 800690c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800690e:	2308      	movs	r3, #8
 8006910:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	0e5b      	lsrs	r3, r3, #25
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	0f5b      	lsrs	r3, r3, #29
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006932:	7fbb      	ldrb	r3, [r7, #30]
 8006934:	7f3a      	ldrb	r2, [r7, #28]
 8006936:	f107 0120 	add.w	r1, r7, #32
 800693a:	440a      	add	r2, r1
 800693c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006940:	fb02 f303 	mul.w	r3, r2, r3
 8006944:	7f3a      	ldrb	r2, [r7, #28]
 8006946:	f107 0120 	add.w	r1, r7, #32
 800694a:	440a      	add	r2, r1
 800694c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006950:	fb93 f3f2 	sdiv	r3, r3, r2
 8006954:	b29a      	uxth	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800695c:	7ffb      	ldrb	r3, [r7, #31]
 800695e:	7f7a      	ldrb	r2, [r7, #29]
 8006960:	f107 0120 	add.w	r1, r7, #32
 8006964:	440a      	add	r2, r1
 8006966:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800696a:	fb02 f303 	mul.w	r3, r2, r3
 800696e:	7f7a      	ldrb	r2, [r7, #29]
 8006970:	f107 0120 	add.w	r1, r7, #32
 8006974:	440a      	add	r2, r1
 8006976:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800697a:	fb93 f3f2 	sdiv	r3, r3, r2
 800697e:	b29a      	uxth	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006986:	bf00      	nop
 8006988:	3724      	adds	r7, #36	; 0x24
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	08007e6c 	.word	0x08007e6c
 8006998:	08007e74 	.word	0x08007e74

0800699c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800699c:	b084      	sub	sp, #16
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	f107 001c 	add.w	r0, r7, #28
 80069aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d120      	bne.n	80069f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	4b25      	ldr	r3, [pc, #148]	; (8006a5c <USB_CoreInit+0xc0>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d105      	bne.n	80069ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa5a 	bl	8006ea4 <USB_CoreReset>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73fb      	strb	r3, [r7, #15]
 80069f4:	e01a      	b.n	8006a2c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa4e 	bl	8006ea4 <USB_CoreReset>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8006a1e:	e005      	b.n	8006a2c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d10b      	bne.n	8006a4a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f043 0208 	orr.w	r2, r3, #8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f043 0220 	orr.w	r2, r3, #32
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a56:	b004      	add	sp, #16
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	ffbdffbf 	.word	0xffbdffbf

08006a60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f023 0201 	bic.w	r2, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d106      	bne.n	8006aae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	60da      	str	r2, [r3, #12]
 8006aac:	e00b      	b.n	8006ac6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006aae:	78fb      	ldrb	r3, [r7, #3]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d106      	bne.n	8006ac2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60da      	str	r2, [r3, #12]
 8006ac0:	e001      	b.n	8006ac6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e003      	b.n	8006ace <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006ac6:	2032      	movs	r0, #50	; 0x32
 8006ac8:	f7f9 fe14 	bl	80006f4 <HAL_Delay>

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ad8:	b084      	sub	sp, #16
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006af2:	2300      	movs	r3, #0
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	e009      	b.n	8006b0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3340      	adds	r3, #64	; 0x40
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	2200      	movs	r2, #0
 8006b04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b0e      	cmp	r3, #14
 8006b10:	d9f2      	bls.n	8006af8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d112      	bne.n	8006b3e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	e005      	b.n	8006b4a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b50:	461a      	mov	r2, r3
 8006b52:	2300      	movs	r3, #0
 8006b54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b64:	461a      	mov	r2, r3
 8006b66:	680b      	ldr	r3, [r1, #0]
 8006b68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d10c      	bne.n	8006b8a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d104      	bne.n	8006b80 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b76:	2100      	movs	r1, #0
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f961 	bl	8006e40 <USB_SetDevSpeed>
 8006b7e:	e008      	b.n	8006b92 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b80:	2101      	movs	r1, #1
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f95c 	bl	8006e40 <USB_SetDevSpeed>
 8006b88:	e003      	b.n	8006b92 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b8a:	2103      	movs	r1, #3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f957 	bl	8006e40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b92:	2110      	movs	r1, #16
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f90b 	bl	8006db0 <USB_FlushTxFifo>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f929 	bl	8006dfc <USB_FlushRxFifo>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bba:	461a      	mov	r2, r3
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	2300      	movs	r3, #0
 8006bca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	613b      	str	r3, [r7, #16]
 8006bdc:	e043      	b.n	8006c66 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf4:	d118      	bne.n	8006c28 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	e013      	b.n	8006c3a <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e008      	b.n	8006c3a <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	461a      	mov	r2, r3
 8006c36:	2300      	movs	r3, #0
 8006c38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c46:	461a      	mov	r2, r3
 8006c48:	2300      	movs	r3, #0
 8006c4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	3301      	adds	r3, #1
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d3b7      	bcc.n	8006bde <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c6e:	2300      	movs	r3, #0
 8006c70:	613b      	str	r3, [r7, #16]
 8006c72:	e043      	b.n	8006cfc <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c8a:	d118      	bne.n	8006cbe <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	e013      	b.n	8006cd0 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	e008      	b.n	8006cd0 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	461a      	mov	r2, r3
 8006ccc:	2300      	movs	r3, #0
 8006cce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cdc:	461a      	mov	r2, r3
 8006cde:	2300      	movs	r3, #0
 8006ce0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d3b7      	bcc.n	8006c74 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d16:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d110      	bne.n	8006d40 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d24:	461a      	mov	r2, r3
 8006d26:	4b1e      	ldr	r3, [pc, #120]	; (8006da0 <USB_DevInit+0x2c8>)
 8006d28:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4b1a      	ldr	r3, [pc, #104]	; (8006da4 <USB_DevInit+0x2cc>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d105      	bne.n	8006d60 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f043 0210 	orr.w	r2, r3, #16
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699a      	ldr	r2, [r3, #24]
 8006d64:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <USB_DevInit+0x2d0>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	f043 0208 	orr.w	r2, r3, #8
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d105      	bne.n	8006d90 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699a      	ldr	r2, [r3, #24]
 8006d88:	4b08      	ldr	r3, [pc, #32]	; (8006dac <USB_DevInit+0x2d4>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d9c:	b004      	add	sp, #16
 8006d9e:	4770      	bx	lr
 8006da0:	00800100 	.word	0x00800100
 8006da4:	00010003 	.word	0x00010003
 8006da8:	803c3800 	.word	0x803c3800
 8006dac:	40000004 	.word	0x40000004

08006db0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	019b      	lsls	r3, r3, #6
 8006dc2:	f043 0220 	orr.w	r2, r3, #32
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4a09      	ldr	r2, [pc, #36]	; (8006df8 <USB_FlushTxFifo+0x48>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d901      	bls.n	8006ddc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e006      	b.n	8006dea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d0f0      	beq.n	8006dca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	00030d40 	.word	0x00030d40

08006dfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2210      	movs	r2, #16
 8006e0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4a09      	ldr	r2, [pc, #36]	; (8006e3c <USB_FlushRxFifo+0x40>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d901      	bls.n	8006e20 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e006      	b.n	8006e2e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b10      	cmp	r3, #16
 8006e2a:	d0f0      	beq.n	8006e0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	00030d40 	.word	0x00030d40

08006e40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	68f9      	ldr	r1, [r7, #12]
 8006e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e60:	4313      	orrs	r3, r2
 8006e62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e8c:	f043 0302 	orr.w	r3, r3, #2
 8006e90:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006e92:	2003      	movs	r0, #3
 8006e94:	f7f9 fc2e 	bl	80006f4 <HAL_Delay>

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4a13      	ldr	r2, [pc, #76]	; (8006f08 <USB_CoreReset+0x64>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d901      	bls.n	8006ec2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e01b      	b.n	8006efa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	daf2      	bge.n	8006eb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f043 0201 	orr.w	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4a09      	ldr	r2, [pc, #36]	; (8006f08 <USB_CoreReset+0x64>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d901      	bls.n	8006eec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e006      	b.n	8006efa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d0f0      	beq.n	8006eda <USB_CoreReset+0x36>

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	00030d40 	.word	0x00030d40

08006f0c <LCD_SendInternal>:

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USER CODE BEGIN PV */
HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	4603      	mov	r3, r0
 8006f14:	71fb      	strb	r3, [r7, #7]
 8006f16:	460b      	mov	r3, r1
 8006f18:	71bb      	strb	r3, [r7, #6]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;)
    {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	b299      	uxth	r1, r3
 8006f22:	f04f 33ff 	mov.w	r3, #4294967295
 8006f26:	2201      	movs	r2, #1
 8006f28:	4822      	ldr	r0, [pc, #136]	; (8006fb4 <LCD_SendInternal+0xa8>)
 8006f2a:	f7fa fa07 	bl	800133c <HAL_I2C_IsDeviceReady>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d000      	beq.n	8006f3a <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8006f38:	e7f1      	b.n	8006f1e <LCD_SendInternal+0x12>
            break;
 8006f3a:	bf00      	nop
    }
    uint8_t up = data & 0xF0;
 8006f3c:	79bb      	ldrb	r3, [r7, #6]
 8006f3e:	f023 030f 	bic.w	r3, r3, #15
 8006f42:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8006f44:	79bb      	ldrb	r3, [r7, #6]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8006f4a:	7bba      	ldrb	r2, [r7, #14]
 8006f4c:	797b      	ldrb	r3, [r7, #5]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	f043 030c 	orr.w	r3, r3, #12
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8006f5a:	7bba      	ldrb	r2, [r7, #14]
 8006f5c:	797b      	ldrb	r3, [r7, #5]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	f043 0308 	orr.w	r3, r3, #8
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8006f6a:	7b7a      	ldrb	r2, [r7, #13]
 8006f6c:	797b      	ldrb	r3, [r7, #5]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	f043 030c 	orr.w	r3, r3, #12
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8006f7a:	7b7a      	ldrb	r2, [r7, #13]
 8006f7c:	797b      	ldrb	r3, [r7, #5]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f043 0308 	orr.w	r3, r3, #8
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	b299      	uxth	r1, r3
 8006f8e:	f107 0208 	add.w	r2, r7, #8
 8006f92:	f04f 33ff 	mov.w	r3, #4294967295
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	2304      	movs	r3, #4
 8006f9a:	4806      	ldr	r0, [pc, #24]	; (8006fb4 <LCD_SendInternal+0xa8>)
 8006f9c:	f7fa f8da 	bl	8001154 <HAL_I2C_Master_Transmit>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8006fa4:	2005      	movs	r0, #5
 8006fa6:	f7f9 fba5 	bl	80006f4 <HAL_Delay>
    return res;
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	240000d8 	.word	0x240000d8

08006fb8 <LCD_SendCommand>:




void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	460a      	mov	r2, r1
 8006fc2:	71fb      	strb	r3, [r7, #7]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8006fc8:	79b9      	ldrb	r1, [r7, #6]
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff ff9c 	bl	8006f0c <LCD_SendInternal>
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	460a      	mov	r2, r1
 8006fe6:	71fb      	strb	r3, [r7, #7]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8006fec:	79b9      	ldrb	r1, [r7, #6]
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff ff8a 	bl	8006f0c <LCD_SendInternal>
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	2130      	movs	r1, #48	; 0x30
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff ffd2 	bl	8006fb8 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	2102      	movs	r1, #2
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff ffcd 	bl	8006fb8 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	210c      	movs	r1, #12
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff ffc8 	bl	8006fb8 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	2101      	movs	r1, #1
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff ffc3 	bl	8006fb8 <LCD_SendCommand>
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	4603      	mov	r3, r0
 8007042:	6039      	str	r1, [r7, #0]
 8007044:	71fb      	strb	r3, [r7, #7]
    while(*str)
 8007046:	e009      	b.n	800705c <LCD_SendString+0x22>
    {
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781a      	ldrb	r2, [r3, #0]
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	4611      	mov	r1, r2
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff ffc3 	bl	8006fdc <LCD_SendData>
        str++;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	3301      	adds	r3, #1
 800705a:	603b      	str	r3, [r7, #0]
    while(*str)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1f1      	bne.n	8007048 <LCD_SendString+0xe>
    }
}
 8007064:	bf00      	nop
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <Send>:

void Send()//Функция вывода данных на дисплей
{
 800706c:	b590      	push	{r4, r7, lr}
 800706e:	b089      	sub	sp, #36	; 0x24
 8007070:	af00      	add	r7, sp, #0
	float Vdac;//Переменная, отвечающая за получение данных с ЦАП, в которой хранится численное значение с ЦАП
	char Vlcd[]=" Voltage:0000mV";//Массив для вывода значения напряжения на дисплей
 8007072:	4b68      	ldr	r3, [pc, #416]	; (8007214 <Send+0x1a8>)
 8007074:	f107 040c 	add.w	r4, r7, #12
 8007078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800707a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Vdac=HAL_DAC_GetValue(&hdac1,DAC_CHANNEL_1);//Функция получения значения с ЦАП
 800707e:	2100      	movs	r1, #0
 8007080:	4865      	ldr	r0, [pc, #404]	; (8007218 <Send+0x1ac>)
 8007082:	f7f9 fcdc 	bl	8000a3e <HAL_DAC_GetValue>
 8007086:	ee07 0a90 	vmov	s15, r0
 800708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708e:	edc7 7a07 	vstr	s15, [r7, #28]
	//Vdac=4095-Vdac;//�?з-за инвертированной работы ЦАП из 4095 вычитаем полученное значение с ЦАП для рассчета нужного напряжения
	Vdac=Vdac*1000/1260+5;//Рассчет текущего напряжения на выходе с ЦАП, где 1000 - перевод в мВ, 896 - коэффициент преобразования из пропорции, 5 - смещение выводимого на дисплей значения т.к. минимальное значение на выводе ЦАП 5 мВ
 8007092:	edd7 7a07 	vldr	s15, [r7, #28]
 8007096:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800721c <Send+0x1b0>
 800709a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800709e:	eddf 6a60 	vldr	s13, [pc, #384]	; 8007220 <Send+0x1b4>
 80070a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070a6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80070aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]
	Vlcd[9]=((int)Vdac/1000);//Преобразование численных значений в символы ascii
 80070b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80070b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070ba:	ee17 1a90 	vmov	r1, s15
 80070be:	4b59      	ldr	r3, [pc, #356]	; (8007224 <Send+0x1b8>)
 80070c0:	fb83 2301 	smull	r2, r3, r3, r1
 80070c4:	119a      	asrs	r2, r3, #6
 80070c6:	17cb      	asrs	r3, r1, #31
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	757b      	strb	r3, [r7, #21]
	Vlcd[10]=(int)Vdac/100-Vlcd[9]*10;//Преобразование численных значений в символы ascii
 80070ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80070d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070d6:	ee17 1a90 	vmov	r1, s15
 80070da:	4b53      	ldr	r3, [pc, #332]	; (8007228 <Send+0x1bc>)
 80070dc:	fb83 2301 	smull	r2, r3, r3, r1
 80070e0:	115a      	asrs	r2, r3, #5
 80070e2:	17cb      	asrs	r3, r1, #31
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	7d7b      	ldrb	r3, [r7, #21]
 80070ea:	4619      	mov	r1, r3
 80070ec:	0149      	lsls	r1, r1, #5
 80070ee:	1ac9      	subs	r1, r1, r3
 80070f0:	0089      	lsls	r1, r1, #2
 80070f2:	1acb      	subs	r3, r1, r3
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	4413      	add	r3, r2
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	75bb      	strb	r3, [r7, #22]
	Vlcd[11]=(int)Vdac/10-Vlcd[9]*100-Vlcd[10]*10;//Преобразование численных значений в символы ascii
 80070fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8007102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007106:	ee17 1a90 	vmov	r1, s15
 800710a:	4b48      	ldr	r3, [pc, #288]	; (800722c <Send+0x1c0>)
 800710c:	fb83 2301 	smull	r2, r3, r3, r1
 8007110:	109a      	asrs	r2, r3, #2
 8007112:	17cb      	asrs	r3, r1, #31
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	b2da      	uxtb	r2, r3
 8007118:	7dbb      	ldrb	r3, [r7, #22]
 800711a:	4619      	mov	r1, r3
 800711c:	0149      	lsls	r1, r1, #5
 800711e:	1ac9      	subs	r1, r1, r3
 8007120:	0089      	lsls	r1, r1, #2
 8007122:	1acb      	subs	r3, r1, r3
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	b2d9      	uxtb	r1, r3
 8007128:	7d7b      	ldrb	r3, [r7, #21]
 800712a:	4618      	mov	r0, r3
 800712c:	0080      	lsls	r0, r0, #2
 800712e:	4418      	add	r0, r3
 8007130:	00c0      	lsls	r0, r0, #3
 8007132:	1ac3      	subs	r3, r0, r3
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	b2db      	uxtb	r3, r3
 8007138:	440b      	add	r3, r1
 800713a:	b2db      	uxtb	r3, r3
 800713c:	4413      	add	r3, r2
 800713e:	b2db      	uxtb	r3, r3
 8007140:	75fb      	strb	r3, [r7, #23]
	Vlcd[12]=(int)Vdac-Vlcd[9]*1000-Vlcd[10]*100-Vlcd[11]*10;//Преобразование численных значений в символы ascii
 8007142:	edd7 7a07 	vldr	s15, [r7, #28]
 8007146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800714a:	edc7 7a01 	vstr	s15, [r7, #4]
 800714e:	793a      	ldrb	r2, [r7, #4]
 8007150:	7dbb      	ldrb	r3, [r7, #22]
 8007152:	4619      	mov	r1, r3
 8007154:	0089      	lsls	r1, r1, #2
 8007156:	4419      	add	r1, r3
 8007158:	00c9      	lsls	r1, r1, #3
 800715a:	1acb      	subs	r3, r1, r3
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	b2d9      	uxtb	r1, r3
 8007160:	7d7b      	ldrb	r3, [r7, #21]
 8007162:	4618      	mov	r0, r3
 8007164:	0040      	lsls	r0, r0, #1
 8007166:	4403      	add	r3, r0
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	b2db      	uxtb	r3, r3
 800716c:	440b      	add	r3, r1
 800716e:	b2db      	uxtb	r3, r3
 8007170:	4413      	add	r3, r2
 8007172:	b2da      	uxtb	r2, r3
 8007174:	7dfb      	ldrb	r3, [r7, #23]
 8007176:	4619      	mov	r1, r3
 8007178:	0149      	lsls	r1, r1, #5
 800717a:	1ac9      	subs	r1, r1, r3
 800717c:	0089      	lsls	r1, r1, #2
 800717e:	1acb      	subs	r3, r1, r3
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	b2db      	uxtb	r3, r3
 8007184:	4413      	add	r3, r2
 8007186:	b2db      	uxtb	r3, r3
 8007188:	763b      	strb	r3, [r7, #24]
	Vlcd[9]=Vlcd[9]+48;//Преобразование численных значений в символы ascii
 800718a:	7d7b      	ldrb	r3, [r7, #21]
 800718c:	3330      	adds	r3, #48	; 0x30
 800718e:	b2db      	uxtb	r3, r3
 8007190:	757b      	strb	r3, [r7, #21]
	Vlcd[10]=Vlcd[10]+48;//Преобразование численных значений в символы ascii
 8007192:	7dbb      	ldrb	r3, [r7, #22]
 8007194:	3330      	adds	r3, #48	; 0x30
 8007196:	b2db      	uxtb	r3, r3
 8007198:	75bb      	strb	r3, [r7, #22]
	Vlcd[11]=Vlcd[11]+48;//Преобразование численных значений в символы ascii
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	3330      	adds	r3, #48	; 0x30
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	75fb      	strb	r3, [r7, #23]
	Vlcd[12]=Vlcd[12]+48;//Преобразование численных значений в символы ascii
 80071a2:	7e3b      	ldrb	r3, [r7, #24]
 80071a4:	3330      	adds	r3, #48	; 0x30
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	763b      	strb	r3, [r7, #24]
    LCD_Init(LCD_ADDR);//�?нициализация lcd
 80071aa:	204e      	movs	r0, #78	; 0x4e
 80071ac:	f7ff ff28 	bl	8007000 <LCD_Init>
    // set address to 0x00
    LCD_SendCommand(LCD_ADDR, 0b10000000);//Отправка данных в 1ую строку
 80071b0:	2180      	movs	r1, #128	; 0x80
 80071b2:	204e      	movs	r0, #78	; 0x4e
 80071b4:	f7ff ff00 	bl	8006fb8 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, Vlcd);//В 1ой строке - текущее значение напряжения на выводе ЦАП
 80071b8:	f107 030c 	add.w	r3, r7, #12
 80071bc:	4619      	mov	r1, r3
 80071be:	204e      	movs	r0, #78	; 0x4e
 80071c0:	f7ff ff3b 	bl	800703a <LCD_SendString>
    if(f==1)//Условие для проверки значения шага для вывода на дисплей
 80071c4:	4b1a      	ldr	r3, [pc, #104]	; (8007230 <Send+0x1c4>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d107      	bne.n	80071dc <Send+0x170>
    {
    	LCD_SendCommand(LCD_ADDR, 0b11000000);//Функция отправки данных во 2ую строку
 80071cc:	21c0      	movs	r1, #192	; 0xc0
 80071ce:	204e      	movs	r0, #78	; 0x4e
 80071d0:	f7ff fef2 	bl	8006fb8 <LCD_SendCommand>
    	LCD_SendString(LCD_ADDR, "    Step:1mV");
 80071d4:	4917      	ldr	r1, [pc, #92]	; (8007234 <Send+0x1c8>)
 80071d6:	204e      	movs	r0, #78	; 0x4e
 80071d8:	f7ff ff2f 	bl	800703a <LCD_SendString>
    }
    if(f==2)//Аналогично предыдущему условию
 80071dc:	4b14      	ldr	r3, [pc, #80]	; (8007230 <Send+0x1c4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d107      	bne.n	80071f4 <Send+0x188>
    {
    // set address to 0x40
    LCD_SendCommand(LCD_ADDR, 0b11000000);
 80071e4:	21c0      	movs	r1, #192	; 0xc0
 80071e6:	204e      	movs	r0, #78	; 0x4e
 80071e8:	f7ff fee6 	bl	8006fb8 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "   Step:10mV");
 80071ec:	4912      	ldr	r1, [pc, #72]	; (8007238 <Send+0x1cc>)
 80071ee:	204e      	movs	r0, #78	; 0x4e
 80071f0:	f7ff ff23 	bl	800703a <LCD_SendString>
    }
    if(f==3)//Аналогично предыдущему условию
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <Send+0x1c4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d107      	bne.n	800720c <Send+0x1a0>
    {
        // set address to 0x40
        LCD_SendCommand(LCD_ADDR, 0b11000000);
 80071fc:	21c0      	movs	r1, #192	; 0xc0
 80071fe:	204e      	movs	r0, #78	; 0x4e
 8007200:	f7ff feda 	bl	8006fb8 <LCD_SendCommand>
        LCD_SendString(LCD_ADDR, "   Step:100mV");
 8007204:	490d      	ldr	r1, [pc, #52]	; (800723c <Send+0x1d0>)
 8007206:	204e      	movs	r0, #78	; 0x4e
 8007208:	f7ff ff17 	bl	800703a <LCD_SendString>
    }
}
 800720c:	bf00      	nop
 800720e:	3724      	adds	r7, #36	; 0x24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd90      	pop	{r4, r7, pc}
 8007214:	08007eac 	.word	0x08007eac
 8007218:	24000038 	.word	0x24000038
 800721c:	447a0000 	.word	0x447a0000
 8007220:	449d8000 	.word	0x449d8000
 8007224:	10624dd3 	.word	0x10624dd3
 8007228:	51eb851f 	.word	0x51eb851f
 800722c:	66666667 	.word	0x66666667
 8007230:	24000008 	.word	0x24000008
 8007234:	08007e7c 	.word	0x08007e7c
 8007238:	08007e8c 	.word	0x08007e8c
 800723c:	08007e9c 	.word	0x08007e9c

08007240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float V,i;
	int Vd=0;//Значение напряжения на выходе ЦАП
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
	i=1.26;//коэффициент преобразования напряжения из пропорции i=4095/5, где 4095 - разрядность ЦАП, 5 - максимально выдаваемое напряжение, В
 800724a:	4b8b      	ldr	r3, [pc, #556]	; (8007478 <main+0x238>)
 800724c:	60bb      	str	r3, [r7, #8]
	V=0;
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007254:	f7f9 f9c0 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007258:	f000 f91c 	bl	8007494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800725c:	f000 faca 	bl	80077f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8007260:	f000 fa4a 	bl	80076f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8007264:	f000 fa94 	bl	8007790 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC1_Init();
 8007268:	f000 f9d4 	bl	8007614 <MX_DAC1_Init>
  MX_I2C1_Init();
 800726c:	f000 fa04 	bl	8007678 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 8007270:	2100      	movs	r1, #0
 8007272:	4882      	ldr	r0, [pc, #520]	; (800747c <main+0x23c>)
 8007274:	f7f9 fb71 	bl	800095a <HAL_DAC_Start>

  HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1,DAC_ALIGN_12B_R,0);
 8007278:	2300      	movs	r3, #0
 800727a:	2200      	movs	r2, #0
 800727c:	2100      	movs	r1, #0
 800727e:	487f      	ldr	r0, [pc, #508]	; (800747c <main+0x23c>)
 8007280:	f7f9 fbb8 	bl	80009f4 <HAL_DAC_SetValue>

  HAL_GPIO_WritePin(GPIOB, LD3_Pin,1);
 8007284:	2201      	movs	r2, #1
 8007286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800728a:	487d      	ldr	r0, [pc, #500]	; (8007480 <main+0x240>)
 800728c:	f7f9 feb8 	bl	8001000 <HAL_GPIO_WritePin>
  Send();
 8007290:	f7ff feec 	bl	800706c <Send>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((GPIOD->IDR & (1<<13))==0)//Условие для замыкания пина PC0, который обнуляет напряжение на выводе ЦАП
 8007294:	4b7b      	ldr	r3, [pc, #492]	; (8007484 <main+0x244>)
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d120      	bne.n	80072e2 <main+0xa2>
	 	  {
	 		  HAL_Delay(500);//Защита от дребезга клавиш
 80072a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072a4:	f7f9 fa26 	bl	80006f4 <HAL_Delay>
	 		  if((GPIOD->IDR & (1<<13))==0)
 80072a8:	4b76      	ldr	r3, [pc, #472]	; (8007484 <main+0x244>)
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d116      	bne.n	80072e2 <main+0xa2>
	 		  {
	 			  Vd=0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
	 			  HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1,DAC_ALIGN_12B_R,0);
 80072b8:	2300      	movs	r3, #0
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	486f      	ldr	r0, [pc, #444]	; (800747c <main+0x23c>)
 80072c0:	f7f9 fb98 	bl	80009f4 <HAL_DAC_SetValue>
	 			  HAL_GPIO_WritePin(GPIOB, LD1_Pin,1);
 80072c4:	2201      	movs	r2, #1
 80072c6:	2101      	movs	r1, #1
 80072c8:	486d      	ldr	r0, [pc, #436]	; (8007480 <main+0x240>)
 80072ca:	f7f9 fe99 	bl	8001000 <HAL_GPIO_WritePin>
	 			  HAL_Delay(250);
 80072ce:	20fa      	movs	r0, #250	; 0xfa
 80072d0:	f7f9 fa10 	bl	80006f4 <HAL_Delay>
	 			  HAL_GPIO_WritePin(GPIOB, LD1_Pin,0);
 80072d4:	2200      	movs	r2, #0
 80072d6:	2101      	movs	r1, #1
 80072d8:	4869      	ldr	r0, [pc, #420]	; (8007480 <main+0x240>)
 80072da:	f7f9 fe91 	bl	8001000 <HAL_GPIO_WritePin>
	 			  Send();
 80072de:	f7ff fec5 	bl	800706c <Send>
	 		  }
	 	  }
	 	  if((GPIOD->IDR & (1<<12))==0)//Условие для замыкания пина PC1, который изменяет шаг изменения напряжения на выводе ЦАП
 80072e2:	4b68      	ldr	r3, [pc, #416]	; (8007484 <main+0x244>)
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d150      	bne.n	8007390 <main+0x150>
	 	  	  {
	 	  		  HAL_Delay(500);
 80072ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072f2:	f7f9 f9ff 	bl	80006f4 <HAL_Delay>
	 	  		  f++;//�?нкриментация флага
 80072f6:	4b64      	ldr	r3, [pc, #400]	; (8007488 <main+0x248>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3301      	adds	r3, #1
 80072fc:	4a62      	ldr	r2, [pc, #392]	; (8007488 <main+0x248>)
 80072fe:	6013      	str	r3, [r2, #0]
	 	  		  if(f>3)//Условие для цикличности изменения шага
 8007300:	4b61      	ldr	r3, [pc, #388]	; (8007488 <main+0x248>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b03      	cmp	r3, #3
 8007306:	dd02      	ble.n	800730e <main+0xce>
	 	  		  {
	 	  			  f=1;
 8007308:	4b5f      	ldr	r3, [pc, #380]	; (8007488 <main+0x248>)
 800730a:	2201      	movs	r2, #1
 800730c:	601a      	str	r2, [r3, #0]
	 	  		  }
	 	  		  switch(f)//Конструкция switch для выбора текущего значения f и, соответственно, выбора шага
 800730e:	4b5e      	ldr	r3, [pc, #376]	; (8007488 <main+0x248>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d016      	beq.n	8007344 <main+0x104>
 8007316:	2b03      	cmp	r3, #3
 8007318:	d027      	beq.n	800736a <main+0x12a>
 800731a:	2b01      	cmp	r3, #1
 800731c:	d138      	bne.n	8007390 <main+0x150>
	 	  		  {
	 	  		  	  case 1://Шаг 1мВ
	 	  		  	  {
	 	  		  		  j=1;
 800731e:	4b5b      	ldr	r3, [pc, #364]	; (800748c <main+0x24c>)
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]
	 	  		  		  HAL_GPIO_WritePin(GPIOB, LD1_Pin,1);
 8007324:	2201      	movs	r2, #1
 8007326:	2101      	movs	r1, #1
 8007328:	4855      	ldr	r0, [pc, #340]	; (8007480 <main+0x240>)
 800732a:	f7f9 fe69 	bl	8001000 <HAL_GPIO_WritePin>
	 	  		  		  HAL_Delay(200);
 800732e:	20c8      	movs	r0, #200	; 0xc8
 8007330:	f7f9 f9e0 	bl	80006f4 <HAL_Delay>
	 	  		  		  HAL_GPIO_WritePin(GPIOB, LD1_Pin,0);
 8007334:	2200      	movs	r2, #0
 8007336:	2101      	movs	r1, #1
 8007338:	4851      	ldr	r0, [pc, #324]	; (8007480 <main+0x240>)
 800733a:	f7f9 fe61 	bl	8001000 <HAL_GPIO_WritePin>
	 	  		  		  Send();
 800733e:	f7ff fe95 	bl	800706c <Send>
	 	  		  		  break;
 8007342:	e025      	b.n	8007390 <main+0x150>
	 	  		  	  }
	 	  		  	  case 2://Шаг 10мВ
	 	  		  	  {
	 	  		  		  j=10;
 8007344:	4b51      	ldr	r3, [pc, #324]	; (800748c <main+0x24c>)
 8007346:	220a      	movs	r2, #10
 8007348:	601a      	str	r2, [r3, #0]
	 	  		  		  HAL_GPIO_WritePin(GPIOB, LD1_Pin,1);
 800734a:	2201      	movs	r2, #1
 800734c:	2101      	movs	r1, #1
 800734e:	484c      	ldr	r0, [pc, #304]	; (8007480 <main+0x240>)
 8007350:	f7f9 fe56 	bl	8001000 <HAL_GPIO_WritePin>
	 	  		  		  HAL_Delay(200);
 8007354:	20c8      	movs	r0, #200	; 0xc8
 8007356:	f7f9 f9cd 	bl	80006f4 <HAL_Delay>
	 	  		  		  HAL_GPIO_WritePin(GPIOB, LD1_Pin,0);
 800735a:	2200      	movs	r2, #0
 800735c:	2101      	movs	r1, #1
 800735e:	4848      	ldr	r0, [pc, #288]	; (8007480 <main+0x240>)
 8007360:	f7f9 fe4e 	bl	8001000 <HAL_GPIO_WritePin>
	 	  		  		  Send();
 8007364:	f7ff fe82 	bl	800706c <Send>
	 	  		  		  break;
 8007368:	e012      	b.n	8007390 <main+0x150>
	 	  		  	  }
	 	  		  	  case 3://Шаг 100мВ
	 	  		  	  {
	 	  		  		  j=100;
 800736a:	4b48      	ldr	r3, [pc, #288]	; (800748c <main+0x24c>)
 800736c:	2264      	movs	r2, #100	; 0x64
 800736e:	601a      	str	r2, [r3, #0]
	 	  		  		  HAL_GPIO_WritePin(GPIOB, LD1_Pin,1);
 8007370:	2201      	movs	r2, #1
 8007372:	2101      	movs	r1, #1
 8007374:	4842      	ldr	r0, [pc, #264]	; (8007480 <main+0x240>)
 8007376:	f7f9 fe43 	bl	8001000 <HAL_GPIO_WritePin>
	 	  		  		  HAL_Delay(200);
 800737a:	20c8      	movs	r0, #200	; 0xc8
 800737c:	f7f9 f9ba 	bl	80006f4 <HAL_Delay>
	 	  		  		  HAL_GPIO_WritePin(GPIOB, LD1_Pin,0);
 8007380:	2200      	movs	r2, #0
 8007382:	2101      	movs	r1, #1
 8007384:	483e      	ldr	r0, [pc, #248]	; (8007480 <main+0x240>)
 8007386:	f7f9 fe3b 	bl	8001000 <HAL_GPIO_WritePin>
	 	  		  		  Send();
 800738a:	f7ff fe6f 	bl	800706c <Send>
	 	  		  		  break;
 800738e:	bf00      	nop
	 	  		  	  }
	 	  		  }
	 	  	  }
	 	  if((GPIOD->IDR & (1<<11))==0)//Увеличение напряжения на выводе ЦАП
 8007390:	4b3c      	ldr	r3, [pc, #240]	; (8007484 <main+0x244>)
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007398:	2b00      	cmp	r3, #0
 800739a:	d131      	bne.n	8007400 <main+0x1c0>
	 	  {
	 		  Vd=Vd+j;//Vd - буффер для запоминания значения напряжения, прибавляя к нему величину j, которая зависит от выбранного шага, управляем выдаваемым напряжениием
 800739c:	4b3b      	ldr	r3, [pc, #236]	; (800748c <main+0x24c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]
	 		  if(Vd>250)//Ограничение по максимуму - 250мВ
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2bfa      	cmp	r3, #250	; 0xfa
 80073aa:	dd01      	ble.n	80073b0 <main+0x170>
	 		  {
	 			  Vd=0;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
	 		  }
	 		  V=i*Vd;//Преобразование значения напряжения в значение для ЦАП(без инвертирования просто i*Vd)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80073be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c2:	edc7 7a01 	vstr	s15, [r7, #4]
	 		  HAL_Delay(200);
 80073c6:	20c8      	movs	r0, #200	; 0xc8
 80073c8:	f7f9 f994 	bl	80006f4 <HAL_Delay>
	 		  HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1,DAC_ALIGN_12B_R,V);//Установка полученного напряжения
 80073cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80073d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073d4:	ee17 3a90 	vmov	r3, s15
 80073d8:	2200      	movs	r2, #0
 80073da:	2100      	movs	r1, #0
 80073dc:	4827      	ldr	r0, [pc, #156]	; (800747c <main+0x23c>)
 80073de:	f7f9 fb09 	bl	80009f4 <HAL_DAC_SetValue>
	 		  HAL_GPIO_WritePin(GPIOE, LD2_Pin,1);
 80073e2:	2201      	movs	r2, #1
 80073e4:	2102      	movs	r1, #2
 80073e6:	482a      	ldr	r0, [pc, #168]	; (8007490 <main+0x250>)
 80073e8:	f7f9 fe0a 	bl	8001000 <HAL_GPIO_WritePin>
	 		  HAL_Delay(200);
 80073ec:	20c8      	movs	r0, #200	; 0xc8
 80073ee:	f7f9 f981 	bl	80006f4 <HAL_Delay>
	 		  HAL_GPIO_WritePin(GPIOE, LD2_Pin,0);
 80073f2:	2200      	movs	r2, #0
 80073f4:	2102      	movs	r1, #2
 80073f6:	4826      	ldr	r0, [pc, #152]	; (8007490 <main+0x250>)
 80073f8:	f7f9 fe02 	bl	8001000 <HAL_GPIO_WritePin>
	 		  Send();
 80073fc:	f7ff fe36 	bl	800706c <Send>
	 	  }
	 	  if((GPIOE->IDR & (1<<10))==0)//Уменьшение напряжения на выводе ЦАП
 8007400:	4b23      	ldr	r3, [pc, #140]	; (8007490 <main+0x250>)
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007408:	2b00      	cmp	r3, #0
 800740a:	d131      	bne.n	8007470 <main+0x230>
	 	  {
	 		  Vd=Vd-j;//Аналогично предыдущему условию, но с поправкой на уменьшение значения
 800740c:	4b1f      	ldr	r3, [pc, #124]	; (800748c <main+0x24c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	60fb      	str	r3, [r7, #12]
	 		  if(Vd<0)//Ограничение по минимуму
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	da01      	bge.n	8007420 <main+0x1e0>
	 		  {
	 			  Vd=0;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
	 		  }
	 		  V=i*Vd;//Преобразование значения напряжения в значение для ЦАП(без инвертирования просто i*Vd)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800742a:	ed97 7a02 	vldr	s14, [r7, #8]
 800742e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007432:	edc7 7a01 	vstr	s15, [r7, #4]
	 		  HAL_Delay(200);
 8007436:	20c8      	movs	r0, #200	; 0xc8
 8007438:	f7f9 f95c 	bl	80006f4 <HAL_Delay>
	 		  HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1,DAC_ALIGN_12B_R,V);
 800743c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007444:	ee17 3a90 	vmov	r3, s15
 8007448:	2200      	movs	r2, #0
 800744a:	2100      	movs	r1, #0
 800744c:	480b      	ldr	r0, [pc, #44]	; (800747c <main+0x23c>)
 800744e:	f7f9 fad1 	bl	80009f4 <HAL_DAC_SetValue>
	 		  HAL_GPIO_WritePin(GPIOE, LD2_Pin,1);
 8007452:	2201      	movs	r2, #1
 8007454:	2102      	movs	r1, #2
 8007456:	480e      	ldr	r0, [pc, #56]	; (8007490 <main+0x250>)
 8007458:	f7f9 fdd2 	bl	8001000 <HAL_GPIO_WritePin>
	 		  HAL_Delay(200);
 800745c:	20c8      	movs	r0, #200	; 0xc8
 800745e:	f7f9 f949 	bl	80006f4 <HAL_Delay>
	 		  HAL_GPIO_WritePin(GPIOE, LD2_Pin,0);
 8007462:	2200      	movs	r2, #0
 8007464:	2102      	movs	r1, #2
 8007466:	480a      	ldr	r0, [pc, #40]	; (8007490 <main+0x250>)
 8007468:	f7f9 fdca 	bl	8001000 <HAL_GPIO_WritePin>
	 		  Send();
 800746c:	f7ff fdfe 	bl	800706c <Send>
	 	  }
	 	  HAL_Delay(200);
 8007470:	20c8      	movs	r0, #200	; 0xc8
 8007472:	f7f9 f93f 	bl	80006f4 <HAL_Delay>
	  if((GPIOD->IDR & (1<<13))==0)//Условие для замыкания пина PC0, который обнуляет напряжение на выводе ЦАП
 8007476:	e70d      	b.n	8007294 <main+0x54>
 8007478:	3fa147ae 	.word	0x3fa147ae
 800747c:	24000038 	.word	0x24000038
 8007480:	58020400 	.word	0x58020400
 8007484:	58020c00 	.word	0x58020c00
 8007488:	24000008 	.word	0x24000008
 800748c:	2400000c 	.word	0x2400000c
 8007490:	58021000 	.word	0x58021000

08007494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b0cc      	sub	sp, #304	; 0x130
 8007498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800749a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800749e:	224c      	movs	r2, #76	; 0x4c
 80074a0:	2100      	movs	r1, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fcce 	bl	8007e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80074a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80074ac:	2220      	movs	r2, #32
 80074ae:	2100      	movs	r1, #0
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fcc7 	bl	8007e44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80074b6:	f107 0308 	add.w	r3, r7, #8
 80074ba:	4618      	mov	r0, r3
 80074bc:	23bc      	movs	r3, #188	; 0xbc
 80074be:	461a      	mov	r2, r3
 80074c0:	2100      	movs	r1, #0
 80074c2:	f000 fcbf 	bl	8007e44 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80074c6:	2002      	movs	r0, #2
 80074c8:	f7fa fb94 	bl	8001bf4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80074cc:	1d3b      	adds	r3, r7, #4
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	4b4d      	ldr	r3, [pc, #308]	; (8007608 <SystemClock_Config+0x174>)
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	4a4c      	ldr	r2, [pc, #304]	; (8007608 <SystemClock_Config+0x174>)
 80074d8:	f023 0301 	bic.w	r3, r3, #1
 80074dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074de:	4b4a      	ldr	r3, [pc, #296]	; (8007608 <SystemClock_Config+0x174>)
 80074e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e2:	f003 0201 	and.w	r2, r3, #1
 80074e6:	1d3b      	adds	r3, r7, #4
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	4b48      	ldr	r3, [pc, #288]	; (800760c <SystemClock_Config+0x178>)
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80074f2:	4a46      	ldr	r2, [pc, #280]	; (800760c <SystemClock_Config+0x178>)
 80074f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074f8:	6193      	str	r3, [r2, #24]
 80074fa:	4b44      	ldr	r3, [pc, #272]	; (800760c <SystemClock_Config+0x178>)
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8007502:	1d3b      	adds	r3, r7, #4
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800750a:	bf00      	nop
 800750c:	4b3f      	ldr	r3, [pc, #252]	; (800760c <SystemClock_Config+0x178>)
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007518:	d1f8      	bne.n	800750c <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800751a:	2301      	movs	r3, #1
 800751c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007520:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007524:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007528:	2302      	movs	r3, #2
 800752a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800752e:	2302      	movs	r3, #2
 8007530:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007534:	2301      	movs	r3, #1
 8007536:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 800753a:	2318      	movs	r3, #24
 800753c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007540:	2302      	movs	r3, #2
 8007542:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007546:	2304      	movs	r3, #4
 8007548:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800754c:	2302      	movs	r3, #2
 800754e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007552:	230c      	movs	r3, #12
 8007554:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007558:	2300      	movs	r3, #0
 800755a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007564:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007568:	4618      	mov	r0, r3
 800756a:	f7fa fb8b 	bl	8001c84 <HAL_RCC_OscConfig>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8007574:	f000 fa34 	bl	80079e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007578:	233f      	movs	r3, #63	; 0x3f
 800757a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800757e:	2303      	movs	r3, #3
 8007580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007584:	2300      	movs	r3, #0
 8007586:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800758a:	2300      	movs	r3, #0
 800758c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8007590:	2300      	movs	r3, #0
 8007592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8007596:	2300      	movs	r3, #0
 8007598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800759c:	2300      	movs	r3, #0
 800759e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80075a2:	2300      	movs	r3, #0
 80075a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80075a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80075ac:	2101      	movs	r1, #1
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fa ff20 	bl	80023f4 <HAL_RCC_ClockConfig>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80075ba:	f000 fa11 	bl	80079e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80075be:	f107 0308 	add.w	r3, r7, #8
 80075c2:	4a13      	ldr	r2, [pc, #76]	; (8007610 <SystemClock_Config+0x17c>)
 80075c4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80075c6:	f107 0308 	add.w	r3, r7, #8
 80075ca:	2200      	movs	r2, #0
 80075cc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80075ce:	f107 0308 	add.w	r3, r7, #8
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80075d8:	f107 0308 	add.w	r3, r7, #8
 80075dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80075e4:	f107 0308 	add.w	r3, r7, #8
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fb fa61 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <SystemClock_Config+0x164>
  {
    Error_Handler();
 80075f4:	f000 f9f4 	bl	80079e0 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80075f8:	f7fa fb34 	bl	8001c64 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80075fc:	bf00      	nop
 80075fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	58000400 	.word	0x58000400
 800760c:	58024800 	.word	0x58024800
 8007610:	0004000a 	.word	0x0004000a

08007614 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800761a:	1d3b      	adds	r3, r7, #4
 800761c:	2224      	movs	r2, #36	; 0x24
 800761e:	2100      	movs	r1, #0
 8007620:	4618      	mov	r0, r3
 8007622:	f000 fc0f 	bl	8007e44 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8007626:	4b12      	ldr	r3, [pc, #72]	; (8007670 <MX_DAC1_Init+0x5c>)
 8007628:	4a12      	ldr	r2, [pc, #72]	; (8007674 <MX_DAC1_Init+0x60>)
 800762a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800762c:	4810      	ldr	r0, [pc, #64]	; (8007670 <MX_DAC1_Init+0x5c>)
 800762e:	f7f9 f972 	bl	8000916 <HAL_DAC_Init>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007638:	f000 f9d2 	bl	80079e0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800763c:	2300      	movs	r3, #0
 800763e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007640:	2300      	movs	r3, #0
 8007642:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8007648:	2301      	movs	r3, #1
 800764a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800764c:	2300      	movs	r3, #0
 800764e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007650:	1d3b      	adds	r3, r7, #4
 8007652:	2200      	movs	r2, #0
 8007654:	4619      	mov	r1, r3
 8007656:	4806      	ldr	r0, [pc, #24]	; (8007670 <MX_DAC1_Init+0x5c>)
 8007658:	f7f9 fa06 	bl	8000a68 <HAL_DAC_ConfigChannel>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8007662:	f000 f9bd 	bl	80079e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8007666:	bf00      	nop
 8007668:	3728      	adds	r7, #40	; 0x28
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	24000038 	.word	0x24000038
 8007674:	40007400 	.word	0x40007400

08007678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800767c:	4b1b      	ldr	r3, [pc, #108]	; (80076ec <MX_I2C1_Init+0x74>)
 800767e:	4a1c      	ldr	r2, [pc, #112]	; (80076f0 <MX_I2C1_Init+0x78>)
 8007680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8007682:	4b1a      	ldr	r3, [pc, #104]	; (80076ec <MX_I2C1_Init+0x74>)
 8007684:	4a1b      	ldr	r2, [pc, #108]	; (80076f4 <MX_I2C1_Init+0x7c>)
 8007686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007688:	4b18      	ldr	r3, [pc, #96]	; (80076ec <MX_I2C1_Init+0x74>)
 800768a:	2200      	movs	r2, #0
 800768c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800768e:	4b17      	ldr	r3, [pc, #92]	; (80076ec <MX_I2C1_Init+0x74>)
 8007690:	2201      	movs	r2, #1
 8007692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007694:	4b15      	ldr	r3, [pc, #84]	; (80076ec <MX_I2C1_Init+0x74>)
 8007696:	2200      	movs	r2, #0
 8007698:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800769a:	4b14      	ldr	r3, [pc, #80]	; (80076ec <MX_I2C1_Init+0x74>)
 800769c:	2200      	movs	r2, #0
 800769e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80076a0:	4b12      	ldr	r3, [pc, #72]	; (80076ec <MX_I2C1_Init+0x74>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80076a6:	4b11      	ldr	r3, [pc, #68]	; (80076ec <MX_I2C1_Init+0x74>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80076ac:	4b0f      	ldr	r3, [pc, #60]	; (80076ec <MX_I2C1_Init+0x74>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80076b2:	480e      	ldr	r0, [pc, #56]	; (80076ec <MX_I2C1_Init+0x74>)
 80076b4:	f7f9 fcbe 	bl	8001034 <HAL_I2C_Init>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80076be:	f000 f98f 	bl	80079e0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80076c2:	2100      	movs	r1, #0
 80076c4:	4809      	ldr	r0, [pc, #36]	; (80076ec <MX_I2C1_Init+0x74>)
 80076c6:	f7fa f8b5 	bl	8001834 <HAL_I2CEx_ConfigAnalogFilter>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80076d0:	f000 f986 	bl	80079e0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80076d4:	2100      	movs	r1, #0
 80076d6:	4805      	ldr	r0, [pc, #20]	; (80076ec <MX_I2C1_Init+0x74>)
 80076d8:	f7fa f8f7 	bl	80018ca <HAL_I2CEx_ConfigDigitalFilter>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80076e2:	f000 f97d 	bl	80079e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80076e6:	bf00      	nop
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	240000d8 	.word	0x240000d8
 80076f0:	40005400 	.word	0x40005400
 80076f4:	10b0dcfb 	.word	0x10b0dcfb

080076f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80076fc:	4b22      	ldr	r3, [pc, #136]	; (8007788 <MX_USART3_UART_Init+0x90>)
 80076fe:	4a23      	ldr	r2, [pc, #140]	; (800778c <MX_USART3_UART_Init+0x94>)
 8007700:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007702:	4b21      	ldr	r3, [pc, #132]	; (8007788 <MX_USART3_UART_Init+0x90>)
 8007704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007708:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800770a:	4b1f      	ldr	r3, [pc, #124]	; (8007788 <MX_USART3_UART_Init+0x90>)
 800770c:	2200      	movs	r2, #0
 800770e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007710:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <MX_USART3_UART_Init+0x90>)
 8007712:	2200      	movs	r2, #0
 8007714:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007716:	4b1c      	ldr	r3, [pc, #112]	; (8007788 <MX_USART3_UART_Init+0x90>)
 8007718:	2200      	movs	r2, #0
 800771a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800771c:	4b1a      	ldr	r3, [pc, #104]	; (8007788 <MX_USART3_UART_Init+0x90>)
 800771e:	220c      	movs	r2, #12
 8007720:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007722:	4b19      	ldr	r3, [pc, #100]	; (8007788 <MX_USART3_UART_Init+0x90>)
 8007724:	2200      	movs	r2, #0
 8007726:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007728:	4b17      	ldr	r3, [pc, #92]	; (8007788 <MX_USART3_UART_Init+0x90>)
 800772a:	2200      	movs	r2, #0
 800772c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800772e:	4b16      	ldr	r3, [pc, #88]	; (8007788 <MX_USART3_UART_Init+0x90>)
 8007730:	2200      	movs	r2, #0
 8007732:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007734:	4b14      	ldr	r3, [pc, #80]	; (8007788 <MX_USART3_UART_Init+0x90>)
 8007736:	2200      	movs	r2, #0
 8007738:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800773a:	4b13      	ldr	r3, [pc, #76]	; (8007788 <MX_USART3_UART_Init+0x90>)
 800773c:	2200      	movs	r2, #0
 800773e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007740:	4811      	ldr	r0, [pc, #68]	; (8007788 <MX_USART3_UART_Init+0x90>)
 8007742:	f7fc fcd3 	bl	80040ec <HAL_UART_Init>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800774c:	f000 f948 	bl	80079e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007750:	2100      	movs	r1, #0
 8007752:	480d      	ldr	r0, [pc, #52]	; (8007788 <MX_USART3_UART_Init+0x90>)
 8007754:	f7ff f83d 	bl	80067d2 <HAL_UARTEx_SetTxFifoThreshold>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800775e:	f000 f93f 	bl	80079e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007762:	2100      	movs	r1, #0
 8007764:	4808      	ldr	r0, [pc, #32]	; (8007788 <MX_USART3_UART_Init+0x90>)
 8007766:	f7ff f872 	bl	800684e <HAL_UARTEx_SetRxFifoThreshold>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8007770:	f000 f936 	bl	80079e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8007774:	4804      	ldr	r0, [pc, #16]	; (8007788 <MX_USART3_UART_Init+0x90>)
 8007776:	f7fe fff3 	bl	8006760 <HAL_UARTEx_DisableFifoMode>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8007780:	f000 f92e 	bl	80079e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007784:	bf00      	nop
 8007786:	bd80      	pop	{r7, pc}
 8007788:	2400004c 	.word	0x2400004c
 800778c:	40004800 	.word	0x40004800

08007790 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007794:	4b15      	ldr	r3, [pc, #84]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007796:	4a16      	ldr	r2, [pc, #88]	; (80077f0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8007798:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800779a:	4b14      	ldr	r3, [pc, #80]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800779c:	2209      	movs	r2, #9
 800779e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80077a0:	4b12      	ldr	r3, [pc, #72]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80077a2:	2202      	movs	r2, #2
 80077a4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077a6:	4b11      	ldr	r3, [pc, #68]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077ac:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80077ae:	2202      	movs	r2, #2
 80077b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80077b2:	4b0e      	ldr	r3, [pc, #56]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80077b4:	2201      	movs	r2, #1
 80077b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80077b8:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80077be:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80077c4:	4b09      	ldr	r3, [pc, #36]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80077c6:	2201      	movs	r2, #1
 80077c8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80077ca:	4b08      	ldr	r3, [pc, #32]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80077cc:	2201      	movs	r2, #1
 80077ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80077d6:	4805      	ldr	r0, [pc, #20]	; (80077ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80077d8:	f7fa f8c3 	bl	8001962 <HAL_PCD_Init>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80077e2:	f000 f8fd 	bl	80079e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80077e6:	bf00      	nop
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	24000124 	.word	0x24000124
 80077f0:	40080000 	.word	0x40080000

080077f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08c      	sub	sp, #48	; 0x30
 80077f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077fa:	f107 031c 	add.w	r3, r7, #28
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	605a      	str	r2, [r3, #4]
 8007804:	609a      	str	r2, [r3, #8]
 8007806:	60da      	str	r2, [r3, #12]
 8007808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800780a:	4b6e      	ldr	r3, [pc, #440]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 800780c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007810:	4a6c      	ldr	r2, [pc, #432]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 8007812:	f043 0304 	orr.w	r3, r3, #4
 8007816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800781a:	4b6a      	ldr	r3, [pc, #424]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 800781c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	61bb      	str	r3, [r7, #24]
 8007826:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007828:	4b66      	ldr	r3, [pc, #408]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 800782a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800782e:	4a65      	ldr	r2, [pc, #404]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 8007830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007838:	4b62      	ldr	r3, [pc, #392]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 800783a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800783e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007846:	4b5f      	ldr	r3, [pc, #380]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 8007848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800784c:	4a5d      	ldr	r2, [pc, #372]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007856:	4b5b      	ldr	r3, [pc, #364]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 8007858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007864:	4b57      	ldr	r3, [pc, #348]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 8007866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800786a:	4a56      	ldr	r2, [pc, #344]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 800786c:	f043 0302 	orr.w	r3, r3, #2
 8007870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007874:	4b53      	ldr	r3, [pc, #332]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 8007876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007882:	4b50      	ldr	r3, [pc, #320]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 8007884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007888:	4a4e      	ldr	r2, [pc, #312]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 800788a:	f043 0310 	orr.w	r3, r3, #16
 800788e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007892:	4b4c      	ldr	r3, [pc, #304]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 8007894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80078a0:	4b48      	ldr	r3, [pc, #288]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 80078a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078a6:	4a47      	ldr	r2, [pc, #284]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 80078a8:	f043 0308 	orr.w	r3, r3, #8
 80078ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80078b0:	4b44      	ldr	r3, [pc, #272]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 80078b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078b6:	f003 0308 	and.w	r3, r3, #8
 80078ba:	607b      	str	r3, [r7, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80078be:	4b41      	ldr	r3, [pc, #260]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 80078c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078c4:	4a3f      	ldr	r2, [pc, #252]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 80078c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80078ce:	4b3d      	ldr	r3, [pc, #244]	; (80079c4 <MX_GPIO_Init+0x1d0>)
 80078d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d8:	603b      	str	r3, [r7, #0]
 80078da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80078dc:	2200      	movs	r2, #0
 80078de:	f244 0101 	movw	r1, #16385	; 0x4001
 80078e2:	4839      	ldr	r0, [pc, #228]	; (80079c8 <MX_GPIO_Init+0x1d4>)
 80078e4:	f7f9 fb8c 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80078e8:	2200      	movs	r2, #0
 80078ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80078ee:	4837      	ldr	r0, [pc, #220]	; (80079cc <MX_GPIO_Init+0x1d8>)
 80078f0:	f7f9 fb86 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80078f4:	2200      	movs	r2, #0
 80078f6:	2102      	movs	r1, #2
 80078f8:	4835      	ldr	r0, [pc, #212]	; (80079d0 <MX_GPIO_Init+0x1dc>)
 80078fa:	f7f9 fb81 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80078fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007904:	2300      	movs	r3, #0
 8007906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007908:	2300      	movs	r3, #0
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800790c:	f107 031c 	add.w	r3, r7, #28
 8007910:	4619      	mov	r1, r3
 8007912:	4830      	ldr	r0, [pc, #192]	; (80079d4 <MX_GPIO_Init+0x1e0>)
 8007914:	f7f9 f9c4 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8007918:	f244 0301 	movw	r3, #16385	; 0x4001
 800791c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800791e:	2301      	movs	r3, #1
 8007920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007922:	2300      	movs	r3, #0
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007926:	2300      	movs	r3, #0
 8007928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800792a:	f107 031c 	add.w	r3, r7, #28
 800792e:	4619      	mov	r1, r3
 8007930:	4825      	ldr	r0, [pc, #148]	; (80079c8 <MX_GPIO_Init+0x1d4>)
 8007932:	f7f9 f9b5 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800793c:	2300      	movs	r3, #0
 800793e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007940:	2301      	movs	r3, #1
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007944:	f107 031c 	add.w	r3, r7, #28
 8007948:	4619      	mov	r1, r3
 800794a:	4821      	ldr	r0, [pc, #132]	; (80079d0 <MX_GPIO_Init+0x1dc>)
 800794c:	f7f9 f9a8 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8007950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007956:	2301      	movs	r3, #1
 8007958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800795a:	2300      	movs	r3, #0
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800795e:	2300      	movs	r3, #0
 8007960:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8007962:	f107 031c 	add.w	r3, r7, #28
 8007966:	4619      	mov	r1, r3
 8007968:	4818      	ldr	r0, [pc, #96]	; (80079cc <MX_GPIO_Init+0x1d8>)
 800796a:	f7f9 f999 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800796e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007974:	2300      	movs	r3, #0
 8007976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007978:	2301      	movs	r3, #1
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800797c:	f107 031c 	add.w	r3, r7, #28
 8007980:	4619      	mov	r1, r3
 8007982:	4812      	ldr	r0, [pc, #72]	; (80079cc <MX_GPIO_Init+0x1d8>)
 8007984:	f7f9 f98c 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8007988:	2380      	movs	r3, #128	; 0x80
 800798a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800798c:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <MX_GPIO_Init+0x1e4>)
 800798e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007990:	2300      	movs	r3, #0
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8007994:	f107 031c 	add.w	r3, r7, #28
 8007998:	4619      	mov	r1, r3
 800799a:	4810      	ldr	r0, [pc, #64]	; (80079dc <MX_GPIO_Init+0x1e8>)
 800799c:	f7f9 f980 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80079a0:	2302      	movs	r3, #2
 80079a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079a4:	2301      	movs	r3, #1
 80079a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079a8:	2300      	movs	r3, #0
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ac:	2300      	movs	r3, #0
 80079ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80079b0:	f107 031c 	add.w	r3, r7, #28
 80079b4:	4619      	mov	r1, r3
 80079b6:	4806      	ldr	r0, [pc, #24]	; (80079d0 <MX_GPIO_Init+0x1dc>)
 80079b8:	f7f9 f972 	bl	8000ca0 <HAL_GPIO_Init>

}
 80079bc:	bf00      	nop
 80079be:	3730      	adds	r7, #48	; 0x30
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	58024400 	.word	0x58024400
 80079c8:	58020400 	.word	0x58020400
 80079cc:	58020c00 	.word	0x58020c00
 80079d0:	58021000 	.word	0x58021000
 80079d4:	58020800 	.word	0x58020800
 80079d8:	11110000 	.word	0x11110000
 80079dc:	58021800 	.word	0x58021800

080079e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80079e4:	bf00      	nop
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
	...

080079f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079f6:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <HAL_MspInit+0x30>)
 80079f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079fc:	4a08      	ldr	r2, [pc, #32]	; (8007a20 <HAL_MspInit+0x30>)
 80079fe:	f043 0302 	orr.w	r3, r3, #2
 8007a02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007a06:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <HAL_MspInit+0x30>)
 8007a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	607b      	str	r3, [r7, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	58024400 	.word	0x58024400

08007a24 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08a      	sub	sp, #40	; 0x28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a2c:	f107 0314 	add.w	r3, r7, #20
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	605a      	str	r2, [r3, #4]
 8007a36:	609a      	str	r2, [r3, #8]
 8007a38:	60da      	str	r2, [r3, #12]
 8007a3a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a18      	ldr	r2, [pc, #96]	; (8007aa4 <HAL_DAC_MspInit+0x80>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d129      	bne.n	8007a9a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8007a46:	4b18      	ldr	r3, [pc, #96]	; (8007aa8 <HAL_DAC_MspInit+0x84>)
 8007a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a4c:	4a16      	ldr	r2, [pc, #88]	; (8007aa8 <HAL_DAC_MspInit+0x84>)
 8007a4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <HAL_DAC_MspInit+0x84>)
 8007a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a60:	613b      	str	r3, [r7, #16]
 8007a62:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a64:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <HAL_DAC_MspInit+0x84>)
 8007a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a6a:	4a0f      	ldr	r2, [pc, #60]	; (8007aa8 <HAL_DAC_MspInit+0x84>)
 8007a6c:	f043 0301 	orr.w	r3, r3, #1
 8007a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a74:	4b0c      	ldr	r3, [pc, #48]	; (8007aa8 <HAL_DAC_MspInit+0x84>)
 8007a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007a82:	2310      	movs	r3, #16
 8007a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007a86:	2303      	movs	r3, #3
 8007a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a8e:	f107 0314 	add.w	r3, r7, #20
 8007a92:	4619      	mov	r1, r3
 8007a94:	4805      	ldr	r0, [pc, #20]	; (8007aac <HAL_DAC_MspInit+0x88>)
 8007a96:	f7f9 f903 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8007a9a:	bf00      	nop
 8007a9c:	3728      	adds	r7, #40	; 0x28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	40007400 	.word	0x40007400
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	58020000 	.word	0x58020000

08007ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08a      	sub	sp, #40	; 0x28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ab8:	f107 0314 	add.w	r3, r7, #20
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	605a      	str	r2, [r3, #4]
 8007ac2:	609a      	str	r2, [r3, #8]
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a1a      	ldr	r2, [pc, #104]	; (8007b38 <HAL_I2C_MspInit+0x88>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d12d      	bne.n	8007b2e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ad2:	4b1a      	ldr	r3, [pc, #104]	; (8007b3c <HAL_I2C_MspInit+0x8c>)
 8007ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ad8:	4a18      	ldr	r2, [pc, #96]	; (8007b3c <HAL_I2C_MspInit+0x8c>)
 8007ada:	f043 0302 	orr.w	r3, r3, #2
 8007ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ae2:	4b16      	ldr	r3, [pc, #88]	; (8007b3c <HAL_I2C_MspInit+0x8c>)
 8007ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	613b      	str	r3, [r7, #16]
 8007aee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007af0:	23c0      	movs	r3, #192	; 0xc0
 8007af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007af4:	2312      	movs	r3, #18
 8007af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007afc:	2300      	movs	r3, #0
 8007afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007b00:	2304      	movs	r3, #4
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b04:	f107 0314 	add.w	r3, r7, #20
 8007b08:	4619      	mov	r1, r3
 8007b0a:	480d      	ldr	r0, [pc, #52]	; (8007b40 <HAL_I2C_MspInit+0x90>)
 8007b0c:	f7f9 f8c8 	bl	8000ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <HAL_I2C_MspInit+0x8c>)
 8007b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b16:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <HAL_I2C_MspInit+0x8c>)
 8007b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007b20:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <HAL_I2C_MspInit+0x8c>)
 8007b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007b2e:	bf00      	nop
 8007b30:	3728      	adds	r7, #40	; 0x28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40005400 	.word	0x40005400
 8007b3c:	58024400 	.word	0x58024400
 8007b40:	58020400 	.word	0x58020400

08007b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b4c:	f107 0314 	add.w	r3, r7, #20
 8007b50:	2200      	movs	r2, #0
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	605a      	str	r2, [r3, #4]
 8007b56:	609a      	str	r2, [r3, #8]
 8007b58:	60da      	str	r2, [r3, #12]
 8007b5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1a      	ldr	r2, [pc, #104]	; (8007bcc <HAL_UART_MspInit+0x88>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d12e      	bne.n	8007bc4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007b66:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <HAL_UART_MspInit+0x8c>)
 8007b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b6c:	4a18      	ldr	r2, [pc, #96]	; (8007bd0 <HAL_UART_MspInit+0x8c>)
 8007b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007b76:	4b16      	ldr	r3, [pc, #88]	; (8007bd0 <HAL_UART_MspInit+0x8c>)
 8007b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b80:	613b      	str	r3, [r7, #16]
 8007b82:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b84:	4b12      	ldr	r3, [pc, #72]	; (8007bd0 <HAL_UART_MspInit+0x8c>)
 8007b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b8a:	4a11      	ldr	r2, [pc, #68]	; (8007bd0 <HAL_UART_MspInit+0x8c>)
 8007b8c:	f043 0308 	orr.w	r3, r3, #8
 8007b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b94:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <HAL_UART_MspInit+0x8c>)
 8007b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8007ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bac:	2300      	movs	r3, #0
 8007bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007bb4:	2307      	movs	r3, #7
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007bb8:	f107 0314 	add.w	r3, r7, #20
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4805      	ldr	r0, [pc, #20]	; (8007bd4 <HAL_UART_MspInit+0x90>)
 8007bc0:	f7f9 f86e 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007bc4:	bf00      	nop
 8007bc6:	3728      	adds	r7, #40	; 0x28
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	40004800 	.word	0x40004800
 8007bd0:	58024400 	.word	0x58024400
 8007bd4:	58020c00 	.word	0x58020c00

08007bd8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	; 0x28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be0:	f107 0314 	add.w	r3, r7, #20
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	605a      	str	r2, [r3, #4]
 8007bea:	609a      	str	r2, [r3, #8]
 8007bec:	60da      	str	r2, [r3, #12]
 8007bee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a21      	ldr	r2, [pc, #132]	; (8007c7c <HAL_PCD_MspInit+0xa4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d13b      	bne.n	8007c72 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bfa:	4b21      	ldr	r3, [pc, #132]	; (8007c80 <HAL_PCD_MspInit+0xa8>)
 8007bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c00:	4a1f      	ldr	r2, [pc, #124]	; (8007c80 <HAL_PCD_MspInit+0xa8>)
 8007c02:	f043 0301 	orr.w	r3, r3, #1
 8007c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c0a:	4b1d      	ldr	r3, [pc, #116]	; (8007c80 <HAL_PCD_MspInit+0xa8>)
 8007c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	613b      	str	r3, [r7, #16]
 8007c16:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8007c18:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c26:	2300      	movs	r3, #0
 8007c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8007c2a:	230a      	movs	r3, #10
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c2e:	f107 0314 	add.w	r3, r7, #20
 8007c32:	4619      	mov	r1, r3
 8007c34:	4813      	ldr	r0, [pc, #76]	; (8007c84 <HAL_PCD_MspInit+0xac>)
 8007c36:	f7f9 f833 	bl	8000ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c48:	f107 0314 	add.w	r3, r7, #20
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	480d      	ldr	r0, [pc, #52]	; (8007c84 <HAL_PCD_MspInit+0xac>)
 8007c50:	f7f9 f826 	bl	8000ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c54:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <HAL_PCD_MspInit+0xa8>)
 8007c56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007c5a:	4a09      	ldr	r2, [pc, #36]	; (8007c80 <HAL_PCD_MspInit+0xa8>)
 8007c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007c64:	4b06      	ldr	r3, [pc, #24]	; (8007c80 <HAL_PCD_MspInit+0xa8>)
 8007c66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8007c72:	bf00      	nop
 8007c74:	3728      	adds	r7, #40	; 0x28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40080000 	.word	0x40080000
 8007c80:	58024400 	.word	0x58024400
 8007c84:	58020000 	.word	0x58020000

08007c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c8c:	bf00      	nop
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c96:	b480      	push	{r7}
 8007c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c9a:	e7fe      	b.n	8007c9a <HardFault_Handler+0x4>

08007c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ca0:	e7fe      	b.n	8007ca0 <MemManage_Handler+0x4>

08007ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ca6:	e7fe      	b.n	8007ca6 <BusFault_Handler+0x4>

08007ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007cac:	e7fe      	b.n	8007cac <UsageFault_Handler+0x4>

08007cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007cb2:	bf00      	nop
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007cc0:	bf00      	nop
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007cce:	bf00      	nop
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007cdc:	f7f8 fcea 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007ce0:	bf00      	nop
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007ce8:	4b29      	ldr	r3, [pc, #164]	; (8007d90 <SystemInit+0xac>)
 8007cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cee:	4a28      	ldr	r2, [pc, #160]	; (8007d90 <SystemInit+0xac>)
 8007cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007cf8:	4b26      	ldr	r3, [pc, #152]	; (8007d94 <SystemInit+0xb0>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a25      	ldr	r2, [pc, #148]	; (8007d94 <SystemInit+0xb0>)
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007d04:	4b23      	ldr	r3, [pc, #140]	; (8007d94 <SystemInit+0xb0>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007d0a:	4b22      	ldr	r3, [pc, #136]	; (8007d94 <SystemInit+0xb0>)
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	4921      	ldr	r1, [pc, #132]	; (8007d94 <SystemInit+0xb0>)
 8007d10:	4b21      	ldr	r3, [pc, #132]	; (8007d98 <SystemInit+0xb4>)
 8007d12:	4013      	ands	r3, r2
 8007d14:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007d16:	4b1f      	ldr	r3, [pc, #124]	; (8007d94 <SystemInit+0xb0>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007d1c:	4b1d      	ldr	r3, [pc, #116]	; (8007d94 <SystemInit+0xb0>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007d22:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <SystemInit+0xb0>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8007d28:	4b1a      	ldr	r3, [pc, #104]	; (8007d94 <SystemInit+0xb0>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8007d2e:	4b19      	ldr	r3, [pc, #100]	; (8007d94 <SystemInit+0xb0>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8007d34:	4b17      	ldr	r3, [pc, #92]	; (8007d94 <SystemInit+0xb0>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007d3a:	4b16      	ldr	r3, [pc, #88]	; (8007d94 <SystemInit+0xb0>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8007d40:	4b14      	ldr	r3, [pc, #80]	; (8007d94 <SystemInit+0xb0>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007d46:	4b13      	ldr	r3, [pc, #76]	; (8007d94 <SystemInit+0xb0>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8007d4c:	4b11      	ldr	r3, [pc, #68]	; (8007d94 <SystemInit+0xb0>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007d52:	4b10      	ldr	r3, [pc, #64]	; (8007d94 <SystemInit+0xb0>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007d58:	4b0e      	ldr	r3, [pc, #56]	; (8007d94 <SystemInit+0xb0>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a0d      	ldr	r2, [pc, #52]	; (8007d94 <SystemInit+0xb0>)
 8007d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007d64:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <SystemInit+0xb0>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007d6a:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <SystemInit+0xb8>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <SystemInit+0xbc>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d76:	d202      	bcs.n	8007d7e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007d78:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <SystemInit+0xc0>)
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d7e:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <SystemInit+0xac>)
 8007d80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d84:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8007d86:	bf00      	nop
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	e000ed00 	.word	0xe000ed00
 8007d94:	58024400 	.word	0x58024400
 8007d98:	eaf6ed7f 	.word	0xeaf6ed7f
 8007d9c:	5c001000 	.word	0x5c001000
 8007da0:	ffff0000 	.word	0xffff0000
 8007da4:	51008108 	.word	0x51008108

08007da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007de0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007dae:	e003      	b.n	8007db8 <LoopCopyDataInit>

08007db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007db0:	4b0c      	ldr	r3, [pc, #48]	; (8007de4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007db6:	3104      	adds	r1, #4

08007db8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007db8:	480b      	ldr	r0, [pc, #44]	; (8007de8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007dba:	4b0c      	ldr	r3, [pc, #48]	; (8007dec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007dc0:	d3f6      	bcc.n	8007db0 <CopyDataInit>
  ldr  r2, =_sbss
 8007dc2:	4a0b      	ldr	r2, [pc, #44]	; (8007df0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007dc4:	e002      	b.n	8007dcc <LoopFillZerobss>

08007dc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007dc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007dc8:	f842 3b04 	str.w	r3, [r2], #4

08007dcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007dcc:	4b09      	ldr	r3, [pc, #36]	; (8007df4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007dd0:	d3f9      	bcc.n	8007dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007dd2:	f7ff ff87 	bl	8007ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007dd6:	f000 f811 	bl	8007dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007dda:	f7ff fa31 	bl	8007240 <main>
  bx  lr    
 8007dde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007de0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8007de4:	08007edc 	.word	0x08007edc
  ldr  r0, =_sdata
 8007de8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8007dec:	24000018 	.word	0x24000018
  ldr  r2, =_sbss
 8007df0:	24000018 	.word	0x24000018
  ldr  r3, = _ebss
 8007df4:	2400052c 	.word	0x2400052c

08007df8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007df8:	e7fe      	b.n	8007df8 <ADC3_IRQHandler>
	...

08007dfc <__libc_init_array>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	4e0d      	ldr	r6, [pc, #52]	; (8007e34 <__libc_init_array+0x38>)
 8007e00:	4c0d      	ldr	r4, [pc, #52]	; (8007e38 <__libc_init_array+0x3c>)
 8007e02:	1ba4      	subs	r4, r4, r6
 8007e04:	10a4      	asrs	r4, r4, #2
 8007e06:	2500      	movs	r5, #0
 8007e08:	42a5      	cmp	r5, r4
 8007e0a:	d109      	bne.n	8007e20 <__libc_init_array+0x24>
 8007e0c:	4e0b      	ldr	r6, [pc, #44]	; (8007e3c <__libc_init_array+0x40>)
 8007e0e:	4c0c      	ldr	r4, [pc, #48]	; (8007e40 <__libc_init_array+0x44>)
 8007e10:	f000 f820 	bl	8007e54 <_init>
 8007e14:	1ba4      	subs	r4, r4, r6
 8007e16:	10a4      	asrs	r4, r4, #2
 8007e18:	2500      	movs	r5, #0
 8007e1a:	42a5      	cmp	r5, r4
 8007e1c:	d105      	bne.n	8007e2a <__libc_init_array+0x2e>
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e24:	4798      	blx	r3
 8007e26:	3501      	adds	r5, #1
 8007e28:	e7ee      	b.n	8007e08 <__libc_init_array+0xc>
 8007e2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e2e:	4798      	blx	r3
 8007e30:	3501      	adds	r5, #1
 8007e32:	e7f2      	b.n	8007e1a <__libc_init_array+0x1e>
 8007e34:	08007ed4 	.word	0x08007ed4
 8007e38:	08007ed4 	.word	0x08007ed4
 8007e3c:	08007ed4 	.word	0x08007ed4
 8007e40:	08007ed8 	.word	0x08007ed8

08007e44 <memset>:
 8007e44:	4402      	add	r2, r0
 8007e46:	4603      	mov	r3, r0
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d100      	bne.n	8007e4e <memset+0xa>
 8007e4c:	4770      	bx	lr
 8007e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e52:	e7f9      	b.n	8007e48 <memset+0x4>

08007e54 <_init>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	bf00      	nop
 8007e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5a:	bc08      	pop	{r3}
 8007e5c:	469e      	mov	lr, r3
 8007e5e:	4770      	bx	lr

08007e60 <_fini>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	bf00      	nop
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr
